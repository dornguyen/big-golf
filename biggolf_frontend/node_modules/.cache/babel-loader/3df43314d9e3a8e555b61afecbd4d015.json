{"ast":null,"code":"var parseAttributes = require('./parse-attribs');\nvar parseFromString = require('xml-parse-from-string');\n\n//In some cases element.attribute.nodeName can return\n//all lowercase values.. so we need to map them to the correct \n//case\nvar NAME_MAP = {\n  scaleh: 'scaleH',\n  scalew: 'scaleW',\n  stretchh: 'stretchH',\n  lineheight: 'lineHeight',\n  alphachnl: 'alphaChnl',\n  redchnl: 'redChnl',\n  greenchnl: 'greenChnl',\n  bluechnl: 'blueChnl'\n};\nmodule.exports = function parse(data) {\n  data = data.toString();\n  var xmlRoot = parseFromString(data);\n  var output = {\n    pages: [],\n    chars: [],\n    kernings: []\n  }\n\n  //get config settings\n  ;\n  ['info', 'common'].forEach(function (key) {\n    var element = xmlRoot.getElementsByTagName(key)[0];\n    if (element) output[key] = parseAttributes(getAttribs(element));\n  });\n\n  //get page info\n  var pageRoot = xmlRoot.getElementsByTagName('pages')[0];\n  if (!pageRoot) throw new Error('malformed file -- no <pages> element');\n  var pages = pageRoot.getElementsByTagName('page');\n  for (var i = 0; i < pages.length; i++) {\n    var p = pages[i];\n    var id = parseInt(p.getAttribute('id'), 10);\n    var file = p.getAttribute('file');\n    if (isNaN(id)) throw new Error('malformed file -- page \"id\" attribute is NaN');\n    if (!file) throw new Error('malformed file -- needs page \"file\" attribute');\n    output.pages[parseInt(id, 10)] = file;\n  }\n\n  //get kernings / chars\n  ;\n  ['chars', 'kernings'].forEach(function (key) {\n    var element = xmlRoot.getElementsByTagName(key)[0];\n    if (!element) return;\n    var childTag = key.substring(0, key.length - 1);\n    var children = element.getElementsByTagName(childTag);\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      output[key].push(parseAttributes(getAttribs(child)));\n    }\n  });\n  return output;\n};\nfunction getAttribs(element) {\n  var attribs = getAttribList(element);\n  return attribs.reduce(function (dict, attrib) {\n    var key = mapName(attrib.nodeName);\n    dict[key] = attrib.nodeValue;\n    return dict;\n  }, {});\n}\nfunction getAttribList(element) {\n  //IE8+ and modern browsers\n  var attribs = [];\n  for (var i = 0; i < element.attributes.length; i++) attribs.push(element.attributes[i]);\n  return attribs;\n}\nfunction mapName(nodeName) {\n  return NAME_MAP[nodeName.toLowerCase()] || nodeName;\n}","map":{"version":3,"names":["parseAttributes","require","parseFromString","NAME_MAP","scaleh","scalew","stretchh","lineheight","alphachnl","redchnl","greenchnl","bluechnl","module","exports","parse","data","toString","xmlRoot","output","pages","chars","kernings","forEach","key","element","getElementsByTagName","getAttribs","pageRoot","Error","i","length","p","id","parseInt","getAttribute","file","isNaN","childTag","substring","children","child","push","attribs","getAttribList","reduce","dict","attrib","mapName","nodeName","nodeValue","attributes","toLowerCase"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/parse-bmfont-xml/lib/browser.js"],"sourcesContent":["var parseAttributes = require('./parse-attribs')\nvar parseFromString = require('xml-parse-from-string')\n\n//In some cases element.attribute.nodeName can return\n//all lowercase values.. so we need to map them to the correct \n//case\nvar NAME_MAP = {\n  scaleh: 'scaleH',\n  scalew: 'scaleW',\n  stretchh: 'stretchH',\n  lineheight: 'lineHeight',\n  alphachnl: 'alphaChnl',\n  redchnl: 'redChnl',\n  greenchnl: 'greenChnl',\n  bluechnl: 'blueChnl'\n}\n\nmodule.exports = function parse(data) {\n  data = data.toString()\n  \n  var xmlRoot = parseFromString(data)\n  var output = {\n    pages: [],\n    chars: [],\n    kernings: []\n  }\n\n  //get config settings\n  ;['info', 'common'].forEach(function(key) {\n    var element = xmlRoot.getElementsByTagName(key)[0]\n    if (element)\n      output[key] = parseAttributes(getAttribs(element))\n  })\n\n  //get page info\n  var pageRoot = xmlRoot.getElementsByTagName('pages')[0]\n  if (!pageRoot)\n    throw new Error('malformed file -- no <pages> element')\n  var pages = pageRoot.getElementsByTagName('page')\n  for (var i=0; i<pages.length; i++) {\n    var p = pages[i]\n    var id = parseInt(p.getAttribute('id'), 10)\n    var file = p.getAttribute('file')\n    if (isNaN(id))\n      throw new Error('malformed file -- page \"id\" attribute is NaN')\n    if (!file)\n      throw new Error('malformed file -- needs page \"file\" attribute')\n    output.pages[parseInt(id, 10)] = file\n  }\n\n  //get kernings / chars\n  ;['chars', 'kernings'].forEach(function(key) {\n    var element = xmlRoot.getElementsByTagName(key)[0]\n    if (!element)\n      return\n    var childTag = key.substring(0, key.length-1)\n    var children = element.getElementsByTagName(childTag)\n    for (var i=0; i<children.length; i++) {      \n      var child = children[i]\n      output[key].push(parseAttributes(getAttribs(child)))\n    }\n  })\n  return output\n}\n\nfunction getAttribs(element) {\n  var attribs = getAttribList(element)\n  return attribs.reduce(function(dict, attrib) {\n    var key = mapName(attrib.nodeName)\n    dict[key] = attrib.nodeValue\n    return dict\n  }, {})\n}\n\nfunction getAttribList(element) {\n  //IE8+ and modern browsers\n  var attribs = []\n  for (var i=0; i<element.attributes.length; i++)\n    attribs.push(element.attributes[i])\n  return attribs\n}\n\nfunction mapName(nodeName) {\n  return NAME_MAP[nodeName.toLowerCase()] || nodeName\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}