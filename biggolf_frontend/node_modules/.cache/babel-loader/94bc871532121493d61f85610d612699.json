{"ast":null,"code":"var util = require('util');\nvar stream = require('readable-stream');\nvar RE_RES = /^(\\d\\d\\d)\\s.*/;\nvar RE_MULTI = /^(\\d\\d\\d)-/;\n\n// Codes from 100 to 200 are FTP marks\nfunction isMark(code) {\n  code = parseInt(code, 10);\n  return code > 100 && code < 200;\n}\nmodule.exports = ResponseParser;\nfunction ResponseParser() {\n  this.currentCode = 0;\n  this.buffer = [];\n  stream.Transform.call(this, {\n    objectMode: true\n  });\n}\nutil.inherits(ResponseParser, stream.Transform);\nResponseParser.prototype._transform = function (chunk, encoding, done) {\n  var data = chunk.toString();\n  if (this._lastChunk) {\n    data = this._lastChunk + data;\n    this._lastChunk = '';\n  }\n  var lines = data.split(/\\r?\\n/);\n\n  // Check if last line contained a '\\n' or was truncated, in which case we store\n  // it away to add it when a new write happens\n  if (lines && lines.length && lines[lines.length - 1] !== '') {\n    this._lastChunk = lines.pop();\n  }\n  lines = lines.filter(function (l) {\n    return !!l;\n  });\n  lines.forEach(function (line) {\n    var simpleRes = RE_RES.exec(line);\n    var multiRes;\n    if (simpleRes) {\n      var code = parseInt(simpleRes[1], 10);\n      if (this.buffer.length) {\n        this.buffer.push(line);\n        if (this.currentCode === code) {\n          line = this.buffer.join('\\n');\n          this.buffer = [];\n          this.currentCode = 0;\n        }\n      }\n      this.push({\n        code: code,\n        text: line,\n        isMark: isMark(code),\n        // In FTP every response code above 399 means error in some way.\n        // Since the RFC is not respected by many servers, we are going to\n        // overgeneralize and consider every value above 399 as an error.\n        isError: code > 399\n      });\n    } else {\n      if (!this.buffer.length && (multiRes = RE_MULTI.exec(line))) {\n        this.currentCode = parseInt(multiRes[1], 10);\n      }\n      this.buffer.push(line.toString());\n    }\n  }, this);\n  done();\n};","map":{"version":3,"names":["util","require","stream","RE_RES","RE_MULTI","isMark","code","parseInt","module","exports","ResponseParser","currentCode","buffer","Transform","call","objectMode","inherits","prototype","_transform","chunk","encoding","done","data","toString","_lastChunk","lines","split","length","pop","filter","l","forEach","line","simpleRes","exec","multiRes","push","join","text","isError"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/ftp-response-parser/index.js"],"sourcesContent":["var util = require('util')\nvar stream = require('readable-stream');\n\nvar RE_RES = /^(\\d\\d\\d)\\s.*/;\nvar RE_MULTI = /^(\\d\\d\\d)-/;\n\n// Codes from 100 to 200 are FTP marks\nfunction isMark(code) {\n  code = parseInt(code, 10);\n  return code > 100 && code < 200;\n}\n\nmodule.exports = ResponseParser;\n\nfunction ResponseParser() {\n  this.currentCode = 0;\n  this.buffer = [];\n\n  stream.Transform.call(this, {\n    objectMode: true\n  });\n}\n\nutil.inherits(ResponseParser, stream.Transform);\n\nResponseParser.prototype._transform = function(chunk, encoding, done) {\n  var data = chunk.toString();\n  if (this._lastChunk) {\n    data = this._lastChunk + data;\n    this._lastChunk = '';\n  }\n\n  var lines = data.split(/\\r?\\n/);\n\n  // Check if last line contained a '\\n' or was truncated, in which case we store\n  // it away to add it when a new write happens\n  if (lines && lines.length && lines[lines.length - 1] !== '') {\n    this._lastChunk = lines.pop();\n  }\n\n  lines = lines.filter(function(l) {\n    return !!l;\n  });\n\n  lines.forEach(function(line) {\n    var simpleRes = RE_RES.exec(line);\n    var multiRes;\n\n    if (simpleRes) {\n      var code = parseInt(simpleRes[1], 10);\n\n      if (this.buffer.length) {\n        this.buffer.push(line);\n\n        if (this.currentCode === code) {\n          line = this.buffer.join('\\n');\n          this.buffer = [];\n          this.currentCode = 0;\n        }\n      }\n\n      this.push({\n        code: code,\n        text: line,\n        isMark: isMark(code),\n\n        // In FTP every response code above 399 means error in some way.\n        // Since the RFC is not respected by many servers, we are going to\n        // overgeneralize and consider every value above 399 as an error.\n        isError: code > 399\n      });\n    } else {\n      if (!this.buffer.length && (multiRes = RE_MULTI.exec(line))) {\n        this.currentCode = parseInt(multiRes[1], 10);\n      }\n      this.buffer.push(line.toString());\n    }\n  }, this);\n\n  done();\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}