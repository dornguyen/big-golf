{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.open = open;\nexports.path = path;\nexports.staticDir = staticDir;\nexports.openDir = void 0;\nrequire(\"source-map-support/register\");\nvar _fs = _interopRequireDefault(require(\"./fs\"));\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _constants = _interopRequireDefault(require(\"constants\"));\nvar _logger = _interopRequireDefault(require(\"./logger\"));\nconst RDWR_EXCL = _constants.default.O_CREAT | _constants.default.O_TRUNC | _constants.default.O_RDWR | _constants.default.O_EXCL;\nasync function tempDir() {\n  const now = new Date();\n  const filePath = _path.default.join(process.env.APPIUM_TMP_DIR || _os.default.tmpdir(), [now.getFullYear(), now.getMonth(), now.getDate(), '-', process.pid, '-', (Math.random() * 0x100000000 + 1).toString(36)].join(''));\n  await _fs.default.mkdir(filePath);\n  return filePath;\n}\nasync function path(rawAffixes, defaultPrefix) {\n  const affixes = parseAffixes(rawAffixes, defaultPrefix);\n  const name = `${affixes.prefix || ''}${affixes.suffix || ''}`;\n  const tempDirectory = await tempDir();\n  return _path.default.join(tempDirectory, name);\n}\nasync function open(affixes) {\n  const filePath = await path(affixes, 'f-');\n  try {\n    let fd = await _fs.default.open(filePath, RDWR_EXCL, 0o600);\n    return {\n      path: filePath,\n      fd\n    };\n  } catch (err) {\n    _logger.default.errorAndThrow(err);\n  }\n}\nfunction parseAffixes(rawAffixes, defaultPrefix) {\n  let affixes = {\n    prefix: null,\n    suffix: null\n  };\n  if (rawAffixes) {\n    switch (typeof rawAffixes) {\n      case 'string':\n        affixes.prefix = rawAffixes;\n        break;\n      case 'object':\n        affixes = rawAffixes;\n        break;\n      default:\n        throw new Error(`Unknown affix declaration: ${affixes}`);\n    }\n  } else {\n    affixes.prefix = defaultPrefix;\n  }\n  return affixes;\n}\nconst _static = tempDir();\nconst openDir = tempDir;\nexports.openDir = openDir;\nasync function staticDir() {\n  return _static;\n}\nrequire('source-map-support').install();","map":{"version":3,"mappings":";;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,SAAS,GAAGC,mBAAKC,OAAL,GAAeD,mBAAKE,OAApB,GAA8BF,mBAAKG,MAAnC,GAA4CH,mBAAKI,MAAnE;AAUA,eAAeC,OAAf,GAA0B;EACxB,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;EACA,MAAMC,QAAQ,GAAGC,cAASC,IAAT,CAAcC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8BC,YAAGC,MAAH,EAA5C,EACf,CACET,GAAG,CAACU,WAAJ,EADF,EACqBV,GAAG,CAACW,QAAJ,EADrB,EACqCX,GAAG,CAACY,OAAJ,EADrC,EAEE,GAFF,EAGEP,OAAO,CAACQ,GAHV,EAIE,GAJF,EAKE,CAACC,IAAI,CAACC,MAAL,KAAgB,WAAhB,GAA8B,CAA/B,EAAkCC,QAAlC,CAA2C,EAA3C,CALF,EAMEZ,IANF,CAMO,EANP,CADe,CAAjB;EAUA,MAAMa,YAAGC,KAAH,CAAShB,QAAT,CAAN;EAEA,OAAOA,QAAP;AACD;AAgBD,eAAeiB,IAAf,CAAqBC,UAArB,EAAiCC,aAAjC,EAAgD;EAC9C,MAAMC,OAAO,GAAGC,YAAY,CAACH,UAAD,EAAaC,aAAb,CAA5B;EACA,MAAMG,IAAI,GAAI,GAAEF,OAAO,CAACG,MAAR,IAAkB,EAAG,GAAEH,OAAO,CAACI,MAAR,IAAkB,EAAG,EAA5D;EACA,MAAMC,aAAa,GAAG,MAAM5B,OAAO,EAAnC;EACA,OAAOI,cAASC,IAAT,CAAcuB,aAAd,EAA6BH,IAA7B,CAAP;AACD;AAeD,eAAeI,IAAf,CAAqBN,OAArB,EAA8B;EAC5B,MAAMpB,QAAQ,GAAG,MAAMiB,IAAI,CAACG,OAAD,EAAU,IAAV,CAA3B;EACA,IAAI;IACF,IAAIO,EAAE,GAAG,MAAMZ,YAAGW,IAAH,CAAQ1B,QAAR,EAAkBT,SAAlB,EAA6B,KAA7B,CAAf;IAEA,OAAO;MAAC0B,IAAI,EAAEjB,QAAP;MAAiB2B;IAAjB,CAAP;EACD,CAJD,CAIE,OAAOC,GAAP,EAAY;IACZC,gBAAIC,aAAJ,CAAkBF,GAAlB;EACD;AACF;AAUD,SAASP,YAAT,CAAuBH,UAAvB,EAAmCC,aAAnC,EAAkD;EAChD,IAAIC,OAAO,GAAG;IAACG,MAAM,EAAE,IAAT;IAAeC,MAAM,EAAE;EAAvB,CAAd;EACA,IAAIN,UAAJ,EAAgB;IACd,QAAQ,OAAOA,UAAf;MACE,KAAK,QAAL;QACEE,OAAO,CAACG,MAAR,GAAiBL,UAAjB;QACA;MACF,KAAK,QAAL;QACEE,OAAO,GAAGF,UAAV;QACA;MACF;QACE,MAAM,IAAIa,KAAJ,CAAW,8BAA6BX,OAAQ,EAAhD,CAAN;IAAA;EAEL,CAXD,MAWO;IACLA,OAAO,CAACG,MAAR,GAAiBJ,aAAjB;EACD;EACD,OAAOC,OAAP;AACD;AAED,MAAMY,OAAO,GAAGnC,OAAO,EAAvB;AAOA,MAAMoC,OAAO,GAAGpC,OAAhB;;AAOA,eAAeqC,SAAf,GAA4B;EAC1B,OAAOF,OAAP;AACD;AAAAG","names":["RDWR_EXCL","cnst","O_CREAT","O_TRUNC","O_RDWR","O_EXCL","tempDir","now","Date","filePath","nodePath","join","process","env","APPIUM_TMP_DIR","os","tmpdir","getFullYear","getMonth","getDate","pid","Math","random","toString","fs","mkdir","path","rawAffixes","defaultPrefix","affixes","parseAffixes","name","prefix","suffix","tempDirectory","open","fd","err","log","errorAndThrow","Error","_static","openDir","staticDir","require"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\appium-support\\lib\\tempdir.js"],"sourcesContent":["/* This library is originated from temp.js at http://github.com/bruce/node-temp */\nimport fs from './fs';\nimport os from 'os';\nimport nodePath from 'path';\nimport cnst from 'constants';\nimport log from './logger';\n\nconst RDWR_EXCL = cnst.O_CREAT | cnst.O_TRUNC | cnst.O_RDWR | cnst.O_EXCL;\n\n/**\n * Generate a temporary directory in os.tempdir() or process.env.APPIUM_TMP_DIR.\n * e.g.\n * - No `process.env.APPIUM_TMP_DIR`: `/var/folders/34/2222sh8n27d6rcp7jqlkw8km0000gn/T/xxxxxxxx.yyyy`\n * - With `process.env.APPIUM_TMP_DIR = '/path/to/root'`: `/path/to/root/xxxxxxxx.yyyy`\n *\n * @returns {string} A path to the temporary directory\n */\nasync function tempDir () {\n  const now = new Date();\n  const filePath = nodePath.join(process.env.APPIUM_TMP_DIR || os.tmpdir(),\n    [\n      now.getFullYear(), now.getMonth(), now.getDate(),\n      '-',\n      process.pid,\n      '-',\n      (Math.random() * 0x100000000 + 1).toString(36),\n    ].join(''));\n  // creates a temp directory using the date and a random string\n\n  await fs.mkdir(filePath);\n\n  return filePath;\n}\n\n/**\n * @typedef {Object} Affixes\n * @property {string} prefix - prefix of the temp directory name\n * @property {string} suffix - suffix of the temp directory name\n */\n\n/**\n * Generate a temporary directory in os.tempdir() or process.env.APPIUM_TMP_DIR\n * with arbitrary prefix/suffix for the directory name.\n *\n * @param {string|Affixes} rawAffixes\n * @param {?string} defaultPrefix\n * @returns {string}  A path to the temporary directory with rawAffixes and defaultPrefix\n */\nasync function path (rawAffixes, defaultPrefix) {\n  const affixes = parseAffixes(rawAffixes, defaultPrefix);\n  const name = `${affixes.prefix || ''}${affixes.suffix || ''}`;\n  const tempDirectory = await tempDir();\n  return nodePath.join(tempDirectory, name);\n}\n\n/**\n * @typedef {Object} OpenedAffixes\n * @property {string} path - The path to file\n * @property {integer} fd - The file descriptor opened\n */\n\n/**\n * Generate a temporary directory in os.tempdir() or process.env.APPIUM_TMP_DIR\n * with arbitrary prefix/suffix for the directory name and return it as open.\n *\n * @param {Affixes} affixes\n * @returns {OpenedAffixes}\n */\nasync function open (affixes) {\n  const filePath = await path(affixes, 'f-');\n  try {\n    let fd = await fs.open(filePath, RDWR_EXCL, 0o600);\n    // opens the file in mode 384\n    return {path: filePath, fd};\n  } catch (err) {\n    log.errorAndThrow(err);\n  }\n}\n\n/**\n *\n * Returns prefix/suffix object\n *\n * @param {string|Affixes} rawAffixes\n * @param {?string} defaultPrefix\n * @returns {Affixes}\n */\nfunction parseAffixes (rawAffixes, defaultPrefix) {\n  let affixes = {prefix: null, suffix: null};\n  if (rawAffixes) {\n    switch (typeof rawAffixes) {\n      case 'string':\n        affixes.prefix = rawAffixes;\n        break;\n      case 'object':\n        affixes = rawAffixes;\n        break;\n      default:\n        throw new Error(`Unknown affix declaration: ${affixes}`);\n    }\n  } else {\n    affixes.prefix = defaultPrefix;\n  }\n  return affixes;\n}\n\nconst _static = tempDir();\n\n/**\n * Returns a new path to a temporary directory\n *\n * @returns {string} A new tempDir() if tempRootDirectory is not provided\n */\nconst openDir = tempDir;\n\n/**\n * Returns a path to a temporary directory whcih is defined as static in the same process\n *\n * @returns {string} A temp directory path whcih is defined as static in the same process\n */\nasync function staticDir () { // eslint-disable-line require-await\n  return _static;\n}\n\nexport { open, path, openDir, staticDir };\n"]},"metadata":{},"sourceType":"script"}