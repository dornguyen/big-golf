{"ast":null,"code":"var HEADER = [66, 77, 70];\nmodule.exports = function readBMFontBinary(buf) {\n  if (buf.length < 6) throw new Error('invalid buffer length for BMFont');\n  var header = HEADER.every(function (byte, i) {\n    return buf.readUInt8(i) === byte;\n  });\n  if (!header) throw new Error('BMFont missing BMF byte header');\n  var i = 3;\n  var vers = buf.readUInt8(i++);\n  if (vers > 3) throw new Error('Only supports BMFont Binary v3 (BMFont App v1.10)');\n  var target = {\n    kernings: [],\n    chars: []\n  };\n  for (var b = 0; b < 5; b++) i += readBlock(target, buf, i);\n  return target;\n};\nfunction readBlock(target, buf, i) {\n  if (i > buf.length - 1) return 0;\n  var blockID = buf.readUInt8(i++);\n  var blockSize = buf.readInt32LE(i);\n  i += 4;\n  switch (blockID) {\n    case 1:\n      target.info = readInfo(buf, i);\n      break;\n    case 2:\n      target.common = readCommon(buf, i);\n      break;\n    case 3:\n      target.pages = readPages(buf, i, blockSize);\n      break;\n    case 4:\n      target.chars = readChars(buf, i, blockSize);\n      break;\n    case 5:\n      target.kernings = readKernings(buf, i, blockSize);\n      break;\n  }\n  return 5 + blockSize;\n}\nfunction readInfo(buf, i) {\n  var info = {};\n  info.size = buf.readInt16LE(i);\n  var bitField = buf.readUInt8(i + 2);\n  info.smooth = bitField >> 7 & 1;\n  info.unicode = bitField >> 6 & 1;\n  info.italic = bitField >> 5 & 1;\n  info.bold = bitField >> 4 & 1;\n\n  //fixedHeight is only mentioned in binary spec \n  if (bitField >> 3 & 1) info.fixedHeight = 1;\n  info.charset = buf.readUInt8(i + 3) || '';\n  info.stretchH = buf.readUInt16LE(i + 4);\n  info.aa = buf.readUInt8(i + 6);\n  info.padding = [buf.readInt8(i + 7), buf.readInt8(i + 8), buf.readInt8(i + 9), buf.readInt8(i + 10)];\n  info.spacing = [buf.readInt8(i + 11), buf.readInt8(i + 12)];\n  info.outline = buf.readUInt8(i + 13);\n  info.face = readStringNT(buf, i + 14);\n  return info;\n}\nfunction readCommon(buf, i) {\n  var common = {};\n  common.lineHeight = buf.readUInt16LE(i);\n  common.base = buf.readUInt16LE(i + 2);\n  common.scaleW = buf.readUInt16LE(i + 4);\n  common.scaleH = buf.readUInt16LE(i + 6);\n  common.pages = buf.readUInt16LE(i + 8);\n  var bitField = buf.readUInt8(i + 10);\n  common.packed = 0;\n  common.alphaChnl = buf.readUInt8(i + 11);\n  common.redChnl = buf.readUInt8(i + 12);\n  common.greenChnl = buf.readUInt8(i + 13);\n  common.blueChnl = buf.readUInt8(i + 14);\n  return common;\n}\nfunction readPages(buf, i, size) {\n  var pages = [];\n  var text = readNameNT(buf, i);\n  var len = text.length + 1;\n  var count = size / len;\n  for (var c = 0; c < count; c++) {\n    pages[c] = buf.slice(i, i + text.length).toString('utf8');\n    i += len;\n  }\n  return pages;\n}\nfunction readChars(buf, i, blockSize) {\n  var chars = [];\n  var count = blockSize / 20;\n  for (var c = 0; c < count; c++) {\n    var char = {};\n    var off = c * 20;\n    char.id = buf.readUInt32LE(i + 0 + off);\n    char.x = buf.readUInt16LE(i + 4 + off);\n    char.y = buf.readUInt16LE(i + 6 + off);\n    char.width = buf.readUInt16LE(i + 8 + off);\n    char.height = buf.readUInt16LE(i + 10 + off);\n    char.xoffset = buf.readInt16LE(i + 12 + off);\n    char.yoffset = buf.readInt16LE(i + 14 + off);\n    char.xadvance = buf.readInt16LE(i + 16 + off);\n    char.page = buf.readUInt8(i + 18 + off);\n    char.chnl = buf.readUInt8(i + 19 + off);\n    chars[c] = char;\n  }\n  return chars;\n}\nfunction readKernings(buf, i, blockSize) {\n  var kernings = [];\n  var count = blockSize / 10;\n  for (var c = 0; c < count; c++) {\n    var kern = {};\n    var off = c * 10;\n    kern.first = buf.readUInt32LE(i + 0 + off);\n    kern.second = buf.readUInt32LE(i + 4 + off);\n    kern.amount = buf.readInt16LE(i + 8 + off);\n    kernings[c] = kern;\n  }\n  return kernings;\n}\nfunction readNameNT(buf, offset) {\n  var pos = offset;\n  for (; pos < buf.length; pos++) {\n    if (buf[pos] === 0x00) break;\n  }\n  return buf.slice(offset, pos);\n}\nfunction readStringNT(buf, offset) {\n  return readNameNT(buf, offset).toString('utf8');\n}","map":{"version":3,"names":["HEADER","module","exports","readBMFontBinary","buf","length","Error","header","every","byte","i","readUInt8","vers","target","kernings","chars","b","readBlock","blockID","blockSize","readInt32LE","info","readInfo","common","readCommon","pages","readPages","readChars","readKernings","size","readInt16LE","bitField","smooth","unicode","italic","bold","fixedHeight","charset","stretchH","readUInt16LE","aa","padding","readInt8","spacing","outline","face","readStringNT","lineHeight","base","scaleW","scaleH","packed","alphaChnl","redChnl","greenChnl","blueChnl","text","readNameNT","len","count","c","slice","toString","char","off","id","readUInt32LE","x","y","width","height","xoffset","yoffset","xadvance","page","chnl","kern","first","second","amount","offset","pos"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/parse-bmfont-binary/index.js"],"sourcesContent":["var HEADER = [66, 77, 70]\n\nmodule.exports = function readBMFontBinary(buf) {\n  if (buf.length < 6)\n    throw new Error('invalid buffer length for BMFont')\n\n  var header = HEADER.every(function(byte, i) {\n    return buf.readUInt8(i) === byte\n  })\n\n  if (!header)\n    throw new Error('BMFont missing BMF byte header')\n\n  var i = 3\n  var vers = buf.readUInt8(i++)\n  if (vers > 3)\n    throw new Error('Only supports BMFont Binary v3 (BMFont App v1.10)')\n  \n  var target = { kernings: [], chars: [] }\n  for (var b=0; b<5; b++)\n    i += readBlock(target, buf, i)\n  return target\n}\n\nfunction readBlock(target, buf, i) {\n  if (i > buf.length-1)\n    return 0\n\n  var blockID = buf.readUInt8(i++)\n  var blockSize = buf.readInt32LE(i)\n  i += 4\n\n  switch(blockID) {\n    case 1: \n      target.info = readInfo(buf, i)\n      break\n    case 2:\n      target.common = readCommon(buf, i)\n      break\n    case 3:\n      target.pages = readPages(buf, i, blockSize)\n      break\n    case 4:\n      target.chars = readChars(buf, i, blockSize)\n      break\n    case 5:\n      target.kernings = readKernings(buf, i, blockSize)\n      break\n  }\n  return 5 + blockSize\n}\n\nfunction readInfo(buf, i) {\n  var info = {}\n  info.size = buf.readInt16LE(i)\n\n  var bitField = buf.readUInt8(i+2)\n  info.smooth = (bitField >> 7) & 1\n  info.unicode = (bitField >> 6) & 1\n  info.italic = (bitField >> 5) & 1\n  info.bold = (bitField >> 4) & 1\n  \n  //fixedHeight is only mentioned in binary spec \n  if ((bitField >> 3) & 1)\n    info.fixedHeight = 1\n  \n  info.charset = buf.readUInt8(i+3) || ''\n  info.stretchH = buf.readUInt16LE(i+4)\n  info.aa = buf.readUInt8(i+6)\n  info.padding = [\n    buf.readInt8(i+7),\n    buf.readInt8(i+8),\n    buf.readInt8(i+9),\n    buf.readInt8(i+10)\n  ]\n  info.spacing = [\n    buf.readInt8(i+11),\n    buf.readInt8(i+12)\n  ]\n  info.outline = buf.readUInt8(i+13)\n  info.face = readStringNT(buf, i+14)\n  return info\n}\n\nfunction readCommon(buf, i) {\n  var common = {}\n  common.lineHeight = buf.readUInt16LE(i)\n  common.base = buf.readUInt16LE(i+2)\n  common.scaleW = buf.readUInt16LE(i+4)\n  common.scaleH = buf.readUInt16LE(i+6)\n  common.pages = buf.readUInt16LE(i+8)\n  var bitField = buf.readUInt8(i+10)\n  common.packed = 0\n  common.alphaChnl = buf.readUInt8(i+11)\n  common.redChnl = buf.readUInt8(i+12)\n  common.greenChnl = buf.readUInt8(i+13)\n  common.blueChnl = buf.readUInt8(i+14)\n  return common\n}\n\nfunction readPages(buf, i, size) {\n  var pages = []\n  var text = readNameNT(buf, i)\n  var len = text.length+1\n  var count = size / len\n  for (var c=0; c<count; c++) {\n    pages[c] = buf.slice(i, i+text.length).toString('utf8')\n    i += len\n  }\n  return pages\n}\n\nfunction readChars(buf, i, blockSize) {\n  var chars = []\n\n  var count = blockSize / 20\n  for (var c=0; c<count; c++) {\n    var char = {}\n    var off = c*20\n    char.id = buf.readUInt32LE(i + 0 + off)\n    char.x = buf.readUInt16LE(i + 4 + off)\n    char.y = buf.readUInt16LE(i + 6 + off)\n    char.width = buf.readUInt16LE(i + 8 + off)\n    char.height = buf.readUInt16LE(i + 10 + off)\n    char.xoffset = buf.readInt16LE(i + 12 + off)\n    char.yoffset = buf.readInt16LE(i + 14 + off)\n    char.xadvance = buf.readInt16LE(i + 16 + off)\n    char.page = buf.readUInt8(i + 18 + off)\n    char.chnl = buf.readUInt8(i + 19 + off)\n    chars[c] = char\n  }\n  return chars\n}\n\nfunction readKernings(buf, i, blockSize) {\n  var kernings = []\n  var count = blockSize / 10\n  for (var c=0; c<count; c++) {\n    var kern = {}\n    var off = c*10\n    kern.first = buf.readUInt32LE(i + 0 + off)\n    kern.second = buf.readUInt32LE(i + 4 + off)\n    kern.amount = buf.readInt16LE(i + 8 + off)\n    kernings[c] = kern\n  }\n  return kernings\n}\n\nfunction readNameNT(buf, offset) {\n  var pos=offset\n  for (; pos<buf.length; pos++) {\n    if (buf[pos] === 0x00) \n      break\n  }\n  return buf.slice(offset, pos)\n}\n\nfunction readStringNT(buf, offset) {\n  return readNameNT(buf, offset).toString('utf8')\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}