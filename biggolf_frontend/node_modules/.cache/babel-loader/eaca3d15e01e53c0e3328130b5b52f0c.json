{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addConstants = addConstants;\nexports.addJimpMethods = addJimpMethods;\nexports.jimpEvMethod = jimpEvMethod;\nexports.jimpEvChange = jimpEvChange;\nObject.defineProperty(exports, \"addType\", {\n  enumerable: true,\n  get: function get() {\n    return MIME.addType;\n  }\n});\nexports[\"default\"] = void 0;\nvar _construct2 = _interopRequireDefault(require(\"@babel/runtime/helpers/construct\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _events = _interopRequireDefault(require(\"events\"));\nvar _utils = require(\"@jimp/utils\");\nvar _anyBase = _interopRequireDefault(require(\"any-base\"));\nvar _mkdirp = _interopRequireDefault(require(\"mkdirp\"));\nvar _pixelmatch = _interopRequireDefault(require(\"pixelmatch\"));\nvar _tinycolor = _interopRequireDefault(require(\"tinycolor2\"));\nvar _phash = _interopRequireDefault(require(\"./modules/phash\"));\nvar _request = _interopRequireDefault(require(\"./request\"));\nvar _composite = _interopRequireDefault(require(\"./composite\"));\nvar _promisify = _interopRequireDefault(require(\"./utils/promisify\"));\nvar MIME = _interopRequireWildcard(require(\"./utils/mime\"));\nvar _imageBitmap = require(\"./utils/image-bitmap\");\nvar constants = _interopRequireWildcard(require(\"./constants\"));\nvar alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'; // an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\n\nvar maxHashLength = [NaN, NaN];\nfor (var i = 2; i < 65; i++) {\n  var maxHash = (0, _anyBase[\"default\"])(_anyBase[\"default\"].BIN, alphabet.slice(0, i))(new Array(64 + 1).join('1'));\n  maxHashLength.push(maxHash.length);\n} // no operation\n\nfunction noop() {} // error checking methods\n\nfunction isArrayBuffer(test) {\n  return Object.prototype.toString.call(test).toLowerCase().indexOf('arraybuffer') > -1;\n} // Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\n\nfunction bufferFromArrayBuffer(arrayBuffer) {\n  var buffer = Buffer.alloc(arrayBuffer.byteLength);\n  var view = new Uint8Array(arrayBuffer);\n  for (var _i = 0; _i < buffer.length; ++_i) {\n    buffer[_i] = view[_i];\n  }\n  return buffer;\n}\nfunction loadFromURL(options, cb) {\n  (0, _request[\"default\"])(options, function (err, response, data) {\n    if (err) {\n      return cb(err);\n    }\n    if ('headers' in response && 'location' in response.headers) {\n      options.url = response.headers.location;\n      return loadFromURL(options, cb);\n    }\n    if ((0, _typeof2[\"default\"])(data) === 'object' && Buffer.isBuffer(data)) {\n      return cb(null, data);\n    }\n    var msg = 'Could not load Buffer from <' + options.url + '> ' + '(HTTP: ' + response.statusCode + ')';\n    return new Error(msg);\n  });\n}\nfunction loadBufferFromPath(src, cb) {\n  if (_fs[\"default\"] && typeof _fs[\"default\"].readFile === 'function' && !src.match(/^(http|ftp)s?:\\/\\/./)) {\n    _fs[\"default\"].readFile(src, cb);\n  } else {\n    loadFromURL({\n      url: src\n    }, cb);\n  }\n}\nfunction isRawRGBAData(obj) {\n  return obj && (0, _typeof2[\"default\"])(obj) === 'object' && typeof obj.width === 'number' && typeof obj.height === 'number' && (Buffer.isBuffer(obj.data) || obj.data instanceof Uint8Array || typeof Uint8ClampedArray === 'function' && obj.data instanceof Uint8ClampedArray) && (obj.data.length === obj.width * obj.height * 4 || obj.data.length === obj.width * obj.height * 3);\n}\nfunction makeRGBABufferFromRGB(buffer) {\n  if (buffer.length % 3 !== 0) {\n    throw new Error('Buffer length is incorrect');\n  }\n  var rgbaBuffer = Buffer.allocUnsafe(buffer.length / 3 * 4);\n  var j = 0;\n  for (var _i2 = 0; _i2 < buffer.length; _i2++) {\n    rgbaBuffer[j] = buffer[_i2];\n    if ((_i2 + 1) % 3 === 0) {\n      rgbaBuffer[++j] = 255;\n    }\n    j++;\n  }\n  return rgbaBuffer;\n}\nvar emptyBitmap = {\n  data: null,\n  width: null,\n  height: null\n};\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a url with options)\n * @param options { url, otherOptions}\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from another Jimp image or raw image data)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\nvar Jimp = /*#__PURE__*/\nfunction (_EventEmitter) {\n  (0, _inherits2[\"default\"])(Jimp, _EventEmitter);\n\n  // An object representing a bitmap in memory, comprising:\n  //  - data: a buffer of the bitmap data\n  //  - width: the width of the image in pixels\n  //  - height: the height of the image in pixels\n  // Default colour to use for new pixels\n  // Default MIME is PNG\n  // Exif data for the image\n  // Whether Transparency supporting formats will be exported as RGB or RGBA\n  function Jimp() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    (0, _classCallCheck2[\"default\"])(this, Jimp);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Jimp).call(this));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"bitmap\", emptyBitmap);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_background\", 0x00000000);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_originalMime\", Jimp.MIME_PNG);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_exif\", null);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_rgba\", true);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"writeAsync\", function (path) {\n      return (0, _promisify[\"default\"])(_this.write, (0, _assertThisInitialized2[\"default\"])(_this), path);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getBase64Async\", function (mime) {\n      return (0, _promisify[\"default\"])(_this.getBase64, (0, _assertThisInitialized2[\"default\"])(_this), mime);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getBuffer\", _imageBitmap.getBuffer);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getBufferAsync\", _imageBitmap.getBufferAsync);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getPixelColour\", _this.getPixelColor);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"setPixelColour\", _this.setPixelColor);\n    var jimpInstance = (0, _assertThisInitialized2[\"default\"])(_this);\n    var cb = noop;\n    if (isArrayBuffer(args[0])) {\n      args[0] = bufferFromArrayBuffer(args[0]);\n    }\n    function finish() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      var err = args[0];\n      var evData = err || {};\n      evData.methodName = 'constructor';\n      setTimeout(function () {\n        var _cb;\n\n        // run on next tick.\n        if (err && cb === noop) {\n          jimpInstance.emitError('constructor', err);\n        } else if (!err) {\n          jimpInstance.emitMulti('constructor', 'initialized');\n        }\n        (_cb = cb).call.apply(_cb, [jimpInstance].concat(args));\n      }, 1);\n    }\n    if (typeof args[0] === 'number' && typeof args[1] === 'number' || parseInt(args[0], 10) && parseInt(args[1], 10)) {\n      // create a new image\n      var w = parseInt(args[0], 10);\n      var h = parseInt(args[1], 10);\n      cb = args[2]; // with a hex color\n\n      if (typeof args[2] === 'number') {\n        _this._background = args[2];\n        cb = args[3];\n      } // with a css color\n\n      if (typeof args[2] === 'string') {\n        _this._background = Jimp.cssColorToHex(args[2]);\n        cb = args[3];\n      }\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n      if (typeof cb !== 'function') {\n        return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), 'cb must be a function', finish));\n      }\n      _this.bitmap = {\n        data: Buffer.alloc(w * h * 4),\n        width: w,\n        height: h\n      };\n      for (var _i3 = 0; _i3 < _this.bitmap.data.length; _i3 += 4) {\n        _this.bitmap.data.writeUInt32BE(_this._background, _i3);\n      }\n      finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n    } else if ((0, _typeof2[\"default\"])(args[0]) === 'object' && args[0].url) {\n      cb = args[1] || noop;\n      if (typeof cb !== 'function') {\n        return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), 'cb must be a function', finish));\n      }\n      loadFromURL(args[0], function (err, data) {\n        if (err) {\n          return _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), err, finish);\n        }\n        _this.parseBitmap(data, args[0].url, finish);\n      });\n    } else if (args[0] instanceof Jimp) {\n      // clone an existing Jimp\n      var original = args[0];\n      cb = args[1];\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n      if (typeof cb !== 'function') {\n        return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), 'cb must be a function', finish));\n      }\n      _this.bitmap = {\n        data: Buffer.from(original.bitmap.data),\n        width: original.bitmap.width,\n        height: original.bitmap.height\n      };\n      _this._quality = original._quality;\n      _this._deflateLevel = original._deflateLevel;\n      _this._deflateStrategy = original._deflateStrategy;\n      _this._filterType = original._filterType;\n      _this._rgba = original._rgba;\n      _this._background = original._background;\n      _this._originalMime = original._originalMime;\n      finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n    } else if (isRawRGBAData(args[0])) {\n      var imageData = args[0];\n      cb = args[1] || noop;\n      var isRGBA = imageData.width * imageData.height * 4 === imageData.data.length;\n      var buffer = isRGBA ? Buffer.from(imageData.data) : makeRGBABufferFromRGB(imageData.data);\n      _this.bitmap = {\n        data: buffer,\n        width: imageData.width,\n        height: imageData.height\n      };\n      finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n    } else if (typeof args[0] === 'string') {\n      // read from a path\n      var path = args[0];\n      cb = args[1];\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n      if (typeof cb !== 'function') {\n        return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), 'cb must be a function', finish));\n      }\n      loadBufferFromPath(path, function (err, data) {\n        if (err) {\n          return _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), err, finish);\n        }\n        _this.parseBitmap(data, path, finish);\n      });\n    } else if ((0, _typeof2[\"default\"])(args[0]) === 'object' && Buffer.isBuffer(args[0])) {\n      // read from a buffer\n      var data = args[0];\n      cb = args[1];\n      if (typeof cb !== 'function') {\n        return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), 'cb must be a function', finish));\n      }\n      _this.parseBitmap(data, null, finish);\n    } else {\n      // Allow client libs to add new ways to build a Jimp object.\n      // Extra constructors must be added by `Jimp.appendConstructorOption()`\n      cb = args[args.length - 1];\n      if (typeof cb !== 'function') {\n        // TODO: try to solve the args after cb problem.\n        cb = args[args.length - 2];\n        if (typeof cb !== 'function') {\n          cb = noop;\n        }\n      }\n      var extraConstructor = Jimp.__extraConstructors.find(function (c) {\n        return c.test.apply(c, args);\n      });\n      if (extraConstructor) {\n        new Promise(function (resolve, reject) {\n          var _extraConstructor$run;\n          return (_extraConstructor$run = extraConstructor.run).call.apply(_extraConstructor$run, [(0, _assertThisInitialized2[\"default\"])(_this), resolve, reject].concat(args));\n        }).then(function () {\n          return finish(null, (0, _assertThisInitialized2[\"default\"])(_this));\n        })[\"catch\"](finish);\n      } else {\n        return (0, _possibleConstructorReturn2[\"default\"])(_this, _utils.throwError.call((0, _assertThisInitialized2[\"default\"])(_this), 'No matching constructor overloading was found. ' + 'Please see the docs for how to call the Jimp constructor.', finish));\n      }\n    }\n    return _this;\n  }\n  /**\n   * Parse a bitmap with the loaded image types.\n   *\n   * @param {Buffer} data raw image data\n   * @param {string} path optional path to file\n   * @param {function(Error, Jimp)} finish (optional) a callback for when complete\n   * @memberof Jimp\n   */\n\n  (0, _createClass2[\"default\"])(Jimp, [{\n    key: \"parseBitmap\",\n    value: function parseBitmap(data, path, finish) {\n      _imageBitmap.parseBitmap.call(this, data, null, finish);\n    }\n    /**\n     * Sets the type of the image (RGB or RGBA) when saving in a format that supports transparency (default is RGBA)\n     * @param {boolean} bool A Boolean, true to use RGBA or false to use RGB\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n  }, {\n    key: \"rgba\",\n    value: function rgba(bool, cb) {\n      if (typeof bool !== 'boolean') {\n        return _utils.throwError.call(this, 'bool must be a boolean, true for RGBA or false for RGB', cb);\n      }\n      this._rgba = bool;\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n    /**\n     * Emit for multiple listeners\n     * @param {string} methodName name of the method to emit an error for\n     * @param {string} eventName name of the eventName to emit an error for\n     * @param {object} data to emit\n     */\n  }, {\n    key: \"emitMulti\",\n    value: function emitMulti(methodName, eventName) {\n      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      data = Object.assign(data, {\n        methodName: methodName,\n        eventName: eventName\n      });\n      this.emit('any', data);\n      if (methodName) {\n        this.emit(methodName, data);\n      }\n      this.emit(eventName, data);\n    }\n  }, {\n    key: \"emitError\",\n    value: function emitError(methodName, err) {\n      this.emitMulti(methodName, 'error', err);\n    }\n    /**\n     * Get the current height of the image\n     * @return {number} height of the image\n     */\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.bitmap.height;\n    }\n    /**\n     * Get the current width of the image\n     * @return {number} width of the image\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.bitmap.width;\n    }\n    /**\n     * Nicely format Jimp object when sent to the console e.g. console.log(image)\n     * @returns {string} pretty printed\n     */\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return '<Jimp ' + (this.bitmap === emptyBitmap ? 'pending...' : this.bitmap.width + 'x' + this.bitmap.height) + '>';\n    }\n    /**\n     * Nicely format Jimp object when converted to a string\n     * @returns {string} pretty printed\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '[object Jimp]';\n    }\n    /**\n     * Returns the original MIME of the image (default: \"image/png\")\n     * @returns {string} the MIME\n     */\n  }, {\n    key: \"getMIME\",\n    value: function getMIME() {\n      var mime = this._originalMime || Jimp.MIME_PNG;\n      return mime;\n    }\n    /**\n     * Returns the appropriate file extension for the original MIME of the image (default: \"png\")\n     * @returns {string} the file extension\n     */\n  }, {\n    key: \"getExtension\",\n    value: function getExtension() {\n      var mime = this.getMIME();\n      return MIME.getExtension(mime);\n    }\n    /**\n     * Writes the image to a file\n     * @param {string} path a path to the destination file\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the image is saved to disk\n     * @returns {Jimp} this for chaining of methods\n     */\n  }, {\n    key: \"write\",\n    value: function write(path, cb) {\n      var _this2 = this;\n      if (!_fs[\"default\"] || !_fs[\"default\"].createWriteStream) {\n        throw new Error('Cant access the filesystem. You can use the getBase64 method.');\n      }\n      if (typeof path !== 'string') {\n        return _utils.throwError.call(this, 'path must be a string', cb);\n      }\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n      if (typeof cb !== 'function') {\n        return _utils.throwError.call(this, 'cb must be a function', cb);\n      }\n      var mime = MIME.getType(path) || this.getMIME();\n      var pathObj = _path[\"default\"].parse(path);\n      if (pathObj.dir) {\n        _mkdirp[\"default\"].sync(pathObj.dir);\n      }\n      this.getBuffer(mime, function (err, buffer) {\n        if (err) {\n          return _utils.throwError.call(_this2, err, cb);\n        }\n        var stream = _fs[\"default\"].createWriteStream(path);\n        stream.on('open', function () {\n          stream.write(buffer);\n          stream.end();\n        }).on('error', function (err) {\n          return _utils.throwError.call(_this2, err, cb);\n        });\n        stream.on('finish', function () {\n          cb.call(_this2, null, _this2);\n        });\n      });\n      return this;\n    }\n  }, {\n    key: \"getBase64\",\n    /**\n     * Converts the image to a base 64 string\n     * @param {string} mime the mime type of the image data to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n    value: function getBase64(mime, cb) {\n      if (mime === Jimp.AUTO) {\n        // allow auto MIME detection\n        mime = this.getMIME();\n      }\n      if (typeof mime !== 'string') {\n        return _utils.throwError.call(this, 'mime must be a string', cb);\n      }\n      if (typeof cb !== 'function') {\n        return _utils.throwError.call(this, 'cb must be a function', cb);\n      }\n      this.getBuffer(mime, function (err, data) {\n        if (err) {\n          return _utils.throwError.call(this, err, cb);\n        }\n        var src = 'data:' + mime + ';base64,' + data.toString('base64');\n        cb.call(this, null, src);\n      });\n      return this;\n    }\n  }, {\n    key: \"hash\",\n    /**\n     * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>. And pads the string. Can configure base.\n     * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {string} a string representing the hash\n     */\n    value: function hash(base, cb) {\n      base = base || 64;\n      if (typeof base === 'function') {\n        cb = base;\n        base = 64;\n      }\n      if (typeof base !== 'number') {\n        return _utils.throwError.call(this, 'base must be a number', cb);\n      }\n      if (base < 2 || base > 64) {\n        return _utils.throwError.call(this, 'base must be a number between 2 and 64', cb);\n      }\n      var hash = this.pHash();\n      hash = (0, _anyBase[\"default\"])(_anyBase[\"default\"].BIN, alphabet.slice(0, base))(hash);\n      while (hash.length < maxHashLength[base]) {\n        hash = '0' + hash; // pad out with leading zeros\n      }\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, hash);\n      }\n      return hash;\n    }\n    /**\n     * Calculates the perceptual hash\n     * @returns {number} the perceptual hash\n     */\n  }, {\n    key: \"pHash\",\n    value: function pHash() {\n      var pHash = new _phash[\"default\"]();\n      return pHash.getHash(this);\n    }\n    /**\n     * Calculates the hamming distance of the current image and a hash based on their perceptual hash\n     * @param {hash} compareHash hash to compare to\n     * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n     */\n  }, {\n    key: \"distanceFromHash\",\n    value: function distanceFromHash(compareHash) {\n      var pHash = new _phash[\"default\"]();\n      var currentHash = pHash.getHash(this);\n      return pHash.distance(currentHash, compareHash);\n    }\n    /**\n     * Converts the image to a buffer\n     * @param {string} mime the mime type of the image buffer to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n  }, {\n    key: \"getPixelIndex\",\n    /**\n     * Returns the offset of a pixel in the bitmap buffer\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {number} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    value: function getPixelIndex(x, y, edgeHandling, cb) {\n      var xi;\n      var yi;\n      if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n        cb = edgeHandling;\n        edgeHandling = null;\n      }\n      if (!edgeHandling) {\n        edgeHandling = Jimp.EDGE_EXTEND;\n      }\n      if (typeof x !== 'number' || typeof y !== 'number') {\n        return _utils.throwError.call(this, 'x and y must be numbers', cb);\n      } // round input\n\n      x = Math.round(x);\n      y = Math.round(y);\n      xi = x;\n      yi = y;\n      if (edgeHandling === Jimp.EDGE_EXTEND) {\n        if (x < 0) xi = 0;\n        if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n        if (y < 0) yi = 0;\n        if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n      }\n      if (edgeHandling === Jimp.EDGE_WRAP) {\n        if (x < 0) {\n          xi = this.bitmap.width + x;\n        }\n        if (x >= this.bitmap.width) {\n          xi = x % this.bitmap.width;\n        }\n        if (y < 0) {\n          xi = this.bitmap.height + y;\n        }\n        if (y >= this.bitmap.height) {\n          yi = y % this.bitmap.height;\n        }\n      }\n      var i = this.bitmap.width * yi + xi << 2; // if out of bounds index is -1\n\n      if (xi < 0 || xi >= this.bitmap.width) {\n        i = -1;\n      }\n      if (yi < 0 || yi >= this.bitmap.height) {\n        i = -1;\n      }\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, i);\n      }\n      return i;\n    }\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the color of the pixel\n     */\n  }, {\n    key: \"getPixelColor\",\n    value: function getPixelColor(x, y, cb) {\n      if (typeof x !== 'number' || typeof y !== 'number') return _utils.throwError.call(this, 'x and y must be numbers', cb); // round input\n\n      x = Math.round(x);\n      y = Math.round(y);\n      var idx = this.getPixelIndex(x, y);\n      var hex = this.bitmap.data.readUInt32BE(idx);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, hex);\n      }\n      return hex;\n    }\n  }, {\n    key: \"setPixelColor\",\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} hex color to set\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    value: function setPixelColor(hex, x, y, cb) {\n      if (typeof hex !== 'number' || typeof x !== 'number' || typeof y !== 'number') return _utils.throwError.call(this, 'hex, x and y must be numbers', cb); // round input\n\n      x = Math.round(x);\n      y = Math.round(y);\n      var idx = this.getPixelIndex(x, y);\n      this.bitmap.data.writeUInt32BE(hex, idx);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  }, {\n    key: \"hasAlpha\",\n    /**\n     * Determine if the image contains opaque pixels.\n     * @return {boolean} hasAlpha whether the image contains opaque pixels\n     */\n    value: function hasAlpha() {\n      for (var yIndex = 0; yIndex < this.bitmap.height; yIndex++) {\n        for (var xIndex = 0; xIndex < this.bitmap.width; xIndex++) {\n          var idx = this.bitmap.width * yIndex + xIndex << 2;\n          var alpha = this.bitmap.data[idx + 3];\n          if (alpha !== 0xff) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    /**\n     * Iterate scan through a region of the bitmap\n     * @param {number} x the x coordinate to begin the scan at\n     * @param {number} y the y coordinate to begin the scan at\n     * @param w the width of the scan region\n     * @param h the height of the scan region\n     * @returns {IterableIterator<{x: number, y: number, idx: number, image: Jimp}>}\n     */\n  }, {\n    key: \"scanIterator\",\n    value: function scanIterator(x, y, w, h) {\n      if (typeof x !== 'number' || typeof y !== 'number') {\n        return _utils.throwError.call(this, 'x and y must be numbers');\n      }\n      if (typeof w !== 'number' || typeof h !== 'number') {\n        return _utils.throwError.call(this, 'w and h must be numbers');\n      }\n      return (0, _utils.scanIterator)(this, x, y, w, h);\n    }\n  }]);\n  return Jimp;\n}(_events[\"default\"]);\nfunction addConstants(constants) {\n  var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Jimp;\n  Object.entries(constants).forEach(function (_ref) {\n    var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n      name = _ref2[0],\n      value = _ref2[1];\n    jimpInstance[name] = value;\n  });\n}\nfunction addJimpMethods(methods) {\n  var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Jimp;\n  Object.entries(methods).forEach(function (_ref3) {\n    var _ref4 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n      name = _ref4[0],\n      value = _ref4[1];\n    jimpInstance.prototype[name] = value;\n  });\n}\naddConstants(constants);\naddJimpMethods({\n  composite: _composite[\"default\"]\n});\nJimp.__extraConstructors = [];\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */\n\nJimp.appendConstructorOption = function (name, test, run) {\n  Jimp.__extraConstructors.push({\n    name: name,\n    test: test,\n    run: run\n  });\n};\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */\n\nJimp.read = function () {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return new Promise(function (resolve, reject) {\n    (0, _construct2[\"default\"])(Jimp, args.concat([function (err, image) {\n      if (err) reject(err);else resolve(image);\n    }]));\n  });\n};\nJimp.create = Jimp.read;\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */\n\nJimp.rgbaToInt = function (r, g, b, a, cb) {\n  if (typeof r !== 'number' || typeof g !== 'number' || typeof b !== 'number' || typeof a !== 'number') {\n    return _utils.throwError.call(this, 'r, g, b and a must be numbers', cb);\n  }\n  if (r < 0 || r > 255) {\n    return _utils.throwError.call(this, 'r must be between 0 and 255', cb);\n  }\n  if (g < 0 || g > 255) {\n    _utils.throwError.call(this, 'g must be between 0 and 255', cb);\n  }\n  if (b < 0 || b > 255) {\n    return _utils.throwError.call(this, 'b must be between 0 and 255', cb);\n  }\n  if (a < 0 || a > 255) {\n    return _utils.throwError.call(this, 'a must be between 0 and 255', cb);\n  }\n  r = Math.round(r);\n  b = Math.round(b);\n  g = Math.round(g);\n  a = Math.round(a);\n  var i = r * Math.pow(256, 3) + g * Math.pow(256, 2) + b * Math.pow(256, 1) + a * Math.pow(256, 0);\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, i);\n  }\n  return i;\n};\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */\n\nJimp.intToRGBA = function (i, cb) {\n  if (typeof i !== 'number') {\n    return _utils.throwError.call(this, 'i must be a number', cb);\n  }\n  var rgba = {};\n  rgba.r = Math.floor(i / Math.pow(256, 3));\n  rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n  rgba.b = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) / Math.pow(256, 1));\n  rgba.a = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2) - rgba.b * Math.pow(256, 1)) / Math.pow(256, 0));\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, rgba);\n  }\n  return rgba;\n};\n/**\n * Converts a css color (Hex, 8-digit (RGBA) Hex, RGB, RGBA, HSL, HSLA, HSV, HSVA, Named) to a hex number\n * @param {string} cssColor a number\n * @returns {number} a hex number representing a color\n */\n\nJimp.cssColorToHex = function (cssColor) {\n  cssColor = cssColor || 0; // 0, null, undefined, NaN\n\n  if (typeof cssColor === 'number') return Number(cssColor);\n  return parseInt((0, _tinycolor[\"default\"])(cssColor).toHex8(), 16);\n};\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */\n\nJimp.limit255 = function (n) {\n  n = Math.max(n, 0);\n  n = Math.min(n, 255);\n  return n;\n};\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */\n\nJimp.diff = function (img1, img2) {\n  var threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n  if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp)) return _utils.throwError.call(this, 'img1 and img2 must be an Jimp images');\n  var bmp1 = img1.bitmap;\n  var bmp2 = img2.bitmap;\n  if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n    if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n      // img1 is bigger\n      img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n    } else {\n      // img2 is bigger (or they are the same in area)\n      img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n    }\n  }\n  if (typeof threshold !== 'number' || threshold < 0 || threshold > 1) {\n    return _utils.throwError.call(this, 'threshold must be a number between 0 and 1');\n  }\n  var diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n  var numDiffPixels = (0, _pixelmatch[\"default\"])(bmp1.data, bmp2.data, diff.bitmap.data, diff.bitmap.width, diff.bitmap.height, {\n    threshold: threshold\n  });\n  return {\n    percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n    image: diff\n  };\n};\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\n\nJimp.distance = function (img1, img2) {\n  var phash = new _phash[\"default\"]();\n  var hash1 = phash.getHash(img1);\n  var hash2 = phash.getHash(img2);\n  return phash.distance(hash1, hash2);\n};\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {hash} hash1 a pHash\n * @param {hash} hash2 a pHash\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\n\nJimp.compareHashes = function (hash1, hash2) {\n  var phash = new _phash[\"default\"]();\n  return phash.distance(hash1, hash2);\n};\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */\n\nJimp.colorDiff = function (rgba1, rgba2) {\n  var pow = function pow(n) {\n    return Math.pow(n, 2);\n  };\n  var max = Math.max;\n  var maxVal = 255 * 255 * 3;\n  if (rgba1.a !== 0 && !rgba1.a) {\n    rgba1.a = 255;\n  }\n  if (rgba2.a !== 0 && !rgba2.a) {\n    rgba2.a = 255;\n  }\n  return (max(pow(rgba1.r - rgba2.r), pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)) + max(pow(rgba1.g - rgba2.g), pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)) + max(pow(rgba1.b - rgba2.b), pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a))) / maxVal;\n};\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */\n\nfunction jimpEvMethod(methodName, evName, method) {\n  var evNameBefore = 'before-' + evName;\n  var evNameAfter = evName.replace(/e$/, '') + 'ed';\n  Jimp.prototype[methodName] = function () {\n    var wrappedCb;\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    var cb = args[method.length - 1];\n    var jimpInstance = this;\n    if (typeof cb === 'function') {\n      wrappedCb = function wrappedCb() {\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n        var err = args[0],\n          data = args[1];\n        if (err) {\n          jimpInstance.emitError(methodName, err);\n        } else {\n          jimpInstance.emitMulti(methodName, evNameAfter, (0, _defineProperty2[\"default\"])({}, methodName, data));\n        }\n        cb.apply(this, args);\n      };\n      args[args.length - 1] = wrappedCb;\n    } else {\n      wrappedCb = false;\n    }\n    this.emitMulti(methodName, evNameBefore);\n    var result;\n    try {\n      result = method.apply(this, args);\n      if (!wrappedCb) {\n        this.emitMulti(methodName, evNameAfter, (0, _defineProperty2[\"default\"])({}, methodName, result));\n      }\n    } catch (error) {\n      error.methodName = methodName;\n      this.emitError(methodName, error);\n    }\n    return result;\n  };\n  Jimp.prototype[methodName + 'Quiet'] = method;\n}\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */\n\njimpEvMethod('clone', 'clone', function (cb) {\n  var clone = new Jimp(this);\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(clone, null, clone);\n  }\n  return clone;\n});\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */\n\nfunction jimpEvChange(methodName, method) {\n  jimpEvMethod(methodName, 'change', method);\n}\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\njimpEvChange('background', function (hex, cb) {\n  if (typeof hex !== 'number') {\n    return _utils.throwError.call(this, 'hex must be a hexadecimal rgba value', cb);\n  }\n  this._background = hex;\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n});\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\njimpEvChange('scan', function (x, y, w, h, f, cb) {\n  if (typeof x !== 'number' || typeof y !== 'number') {\n    return _utils.throwError.call(this, 'x and y must be numbers', cb);\n  }\n  if (typeof w !== 'number' || typeof h !== 'number') {\n    return _utils.throwError.call(this, 'w and h must be numbers', cb);\n  }\n  if (typeof f !== 'function') {\n    return _utils.throwError.call(this, 'f must be a function', cb);\n  }\n  var result = (0, _utils.scan)(this, x, y, w, h, f);\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, result);\n  }\n  return result;\n});\nif (process.env.ENVIRONMENT === 'BROWSER') {\n  // For use in a web browser or web worker\n\n  /* global self */\n  var gl;\n  if (typeof window !== 'undefined' && (typeof window === \"undefined\" ? \"undefined\" : (0, _typeof2[\"default\"])(window)) === 'object') {\n    gl = window;\n  }\n  if (typeof self !== 'undefined' && (typeof self === \"undefined\" ? \"undefined\" : (0, _typeof2[\"default\"])(self)) === 'object') {\n    gl = self;\n  }\n  gl.Jimp = Jimp;\n  gl.Buffer = Buffer;\n}\nvar _default = Jimp;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,IAAMA,QAAQ,GACZ,kEADF,C,CAGA;AACA;;AACA,IAAMC,aAAa,GAAG,CAACC,GAAD,EAAMA,GAAN,CAAtB;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;EAC3B,IAAMC,OAAO,GAAG,yBAAQC,oBAAQC,GAAhB,EAAqBN,QAAQ,CAACO,KAAT,CAAe,CAAf,EAAkBJ,CAAlB,CAArB,EACd,IAAIK,KAAJ,CAAU,KAAK,CAAf,EAAkBC,IAAlB,CAAuB,GAAvB,CADc,CAAhB;EAGAR,aAAa,CAACS,IAAd,CAAmBN,OAAO,CAACO,MAA3B;AACD,C,CAED;;AACA,SAASC,IAAT,GAAgB,CAAE,C,CAElB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAC3B,OACEC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CACGC,IADH,CACQJ,IADR,EAEGK,WAFH,GAGGC,OAHH,CAGW,aAHX,IAG4B,CAAC,CAJ/B;AAMD,C,CAED;AACA;;AACA,SAASC,qBAAT,CAA+BC,WAA/B,EAA4C;EAC1C,IAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAaH,WAAW,CAACI,UAAzB,CAAf;EACA,IAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeN,WAAf,CAAb;EAEA,KAAK,IAAInB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGoB,MAAM,CAACZ,MAA3B,EAAmC,EAAER,EAArC,EAAwC;IACtCoB,MAAM,CAACpB,EAAD,CAAN,GAAYwB,IAAI,CAACxB,EAAD,CAAhB;EACD;EAED,OAAOoB,MAAP;AACD;AAED,SAASM,WAAT,CAAqBC,OAArB,EAA8BC,EAA9B,EAAkC;EAChC,yBAAQD,OAAR,EAAiB,UAACE,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;IACxC,IAAIF,GAAJ,EAAS;MACP,OAAOD,EAAE,CAACC,GAAD,CAAT;IACD;IAED,IAAI,aAAaC,QAAb,IAAyB,cAAcA,QAAQ,CAACE,OAApD,EAA6D;MAC3DL,OAAO,CAACM,GAAR,GAAcH,QAAQ,CAACE,OAAT,CAAiBE,QAA/B;MACA,OAAOR,WAAW,CAACC,OAAD,EAAUC,EAAV,CAAlB;IACD;IAED,IAAI,yBAAOG,IAAP,MAAgB,QAAhB,IAA4BV,MAAM,CAACc,QAAP,CAAgBJ,IAAhB,CAAhC,EAAuD;MACrD,OAAOH,EAAE,CAAC,IAAD,EAAOG,IAAP,CAAT;IACD;IAED,IAAMK,GAAG,GACP,iCACAT,OAAO,CAACM,GADR,GAEA,IAFA,GAGA,SAHA,GAIAH,QAAQ,CAACO,UAJT,GAKA,GANF;IAQA,OAAO,IAAIC,KAAJ,CAAUF,GAAV,CAAP;EACD,CAvBD;AAwBD;AAED,SAASG,kBAAT,CAA4BC,GAA5B,EAAiCZ,EAAjC,EAAqC;EACnC,IACEa,kBACA,OAAOA,eAAGC,QAAV,KAAuB,UADvB,IAEA,CAACF,GAAG,CAACG,KAAJ,CAAU,qBAAV,CAHH,EAIE;IACAF,eAAGC,QAAH,CAAYF,GAAZ,EAAiBZ,EAAjB;EACD,CAND,MAMO;IACLF,WAAW,CAAC;MAAEO,GAAG,EAAEO;IAAP,CAAD,EAAeZ,EAAf,CAAX;EACD;AACF;AAED,SAASgB,aAAT,CAAuBC,GAAvB,EAA4B;EAC1B,OACEA,GAAG,IACH,yBAAOA,GAAP,MAAe,QADf,IAEA,OAAOA,GAAG,CAACC,KAAX,KAAqB,QAFrB,IAGA,OAAOD,GAAG,CAACE,MAAX,KAAsB,QAHtB,KAIC1B,MAAM,CAACc,QAAP,CAAgBU,GAAG,CAACd,IAApB,KACCc,GAAG,CAACd,IAAJ,YAAoBN,UADrB,IAEE,OAAOuB,iBAAP,KAA6B,UAA7B,IACCH,GAAG,CAACd,IAAJ,YAAoBiB,iBAPxB,MAQCH,GAAG,CAACd,IAAJ,CAASvB,MAAT,KAAoBqC,GAAG,CAACC,KAAJ,GAAYD,GAAG,CAACE,MAAhB,GAAyB,CAA7C,IACCF,GAAG,CAACd,IAAJ,CAASvB,MAAT,KAAoBqC,GAAG,CAACC,KAAJ,GAAYD,GAAG,CAACE,MAAhB,GAAyB,CAT/C,CADF;AAYD;AAED,SAASE,qBAAT,CAA+B7B,MAA/B,EAAuC;EACrC,IAAIA,MAAM,CAACZ,MAAP,GAAgB,CAAhB,KAAsB,CAA1B,EAA6B;IAC3B,MAAM,IAAI8B,KAAJ,CAAU,4BAAV,CAAN;EACD;EAED,IAAMY,UAAU,GAAG7B,MAAM,CAAC8B,WAAP,CAAoB/B,MAAM,CAACZ,MAAP,GAAgB,CAAjB,GAAsB,CAAzC,CAAnB;EACA,IAAI4C,CAAC,GAAG,CAAR;EAEA,KAAK,IAAIpD,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGoB,MAAM,CAACZ,MAA3B,EAAmCR,GAAC,EAApC,EAAwC;IACtCkD,UAAU,CAACE,CAAD,CAAV,GAAgBhC,MAAM,CAACpB,GAAD,CAAtB;IAEA,IAAI,CAACA,GAAC,GAAG,CAAL,IAAU,CAAV,KAAgB,CAApB,EAAuB;MACrBkD,UAAU,CAAC,EAAEE,CAAH,CAAV,GAAkB,GAAlB;IACD;IAEDA,CAAC;EACF;EAED,OAAOF,UAAP;AACD;AAED,IAAMG,WAAW,GAAG;EAClBtB,IAAI,EAAE,IADY;EAElBe,KAAK,EAAE,IAFW;EAGlBC,MAAM,EAAE;AAHU,CAApB;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;IAQMO,I;;;;EACJ;EACA;EACA;EACA;EAGA;EAGA;EAGA;EAGA;EAGA,gBAAqB;IAAA;IAAA,kCAANC,IAAM;MAANA,IAAM;IAAA;IAAA;IACnBC;IADmB,2FAdZH,WAcY;IAAA,gGAXP,UAWO;IAAA,kGARLC,IAAI,CAACG,QAQA;IAAA,0FALb,IAKa;IAAA,0FAFb,IAEa;IAAA,+FAyWR,cAAI;MAAA,OAAI,2BAAUD,MAAKE,KAAf,kDAA4BC,IAA5B,CAAJ;IAAA,CAzWI;IAAA,mGA2YJ,cAAI;MAAA,OAAI,2BAAUH,MAAKI,SAAf,kDAAgCC,IAAhC,CAAJ;IAAA,CA3YA;IAAA,8FAgdTC,sBAhdS;IAAA,mGAkdJC,2BAldI;IAAA,mGAujBJP,MAAKQ,aAvjBD;IAAA,mGAulBJR,MAAKS,aAvlBD;IAGnB,IAAMC,YAAY,iDAAlB;IACA,IAAItC,EAAE,GAAGnB,IAAT;IAEA,IAAIC,aAAa,CAAC6C,IAAI,CAAC,CAAD,CAAL,CAAjB,EAA4B;MAC1BA,IAAI,CAAC,CAAD,CAAJ,GAAUrC,qBAAqB,CAACqC,IAAI,CAAC,CAAD,CAAL,CAA/B;IACD;IAED,SAASY,MAAT,GAAyB;MAAA,mCAANZ,IAAM;QAANA,IAAM;MAAA;MAAA,IAChB1B,GADgB,GACT0B,IADS;MAEvB,IAAMa,MAAM,GAAGvC,GAAG,IAAI,EAAtB;MACAuC,MAAM,CAACC,UAAP,GAAoB,aAApB;MAEAC,UAAU,CAAC,YAAM;QAAA;;QACf;QACA,IAAIzC,GAAG,IAAID,EAAE,KAAKnB,IAAlB,EAAwB;UACtByD,YAAY,CAACK,SAAb,CAAuB,aAAvB,EAAsC1C,GAAtC;QACD,CAFD,MAEO,IAAI,CAACA,GAAL,EAAU;UACfqC,YAAY,CAACM,SAAb,CAAuB,aAAvB,EAAsC,aAAtC;QACD;QAED,SAAE,EAACzD,IAAH,aAAQmD,YAAR,SAAyBX,IAAzB;MACD,CATS,EASP,CATO,CAAV;IAUD;IAED,IACG,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,IAA+B,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnD,IACCkB,QAAQ,CAAClB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAR,IAAyBkB,QAAQ,CAAClB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAFpC,EAGE;MACA;MACA,IAAMmB,CAAC,GAAGD,QAAQ,CAAClB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAlB;MACA,IAAMoB,CAAC,GAAGF,QAAQ,CAAClB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAAlB;MACA3B,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAT,CAJA,CAMA;;MACA,IAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;QAC/BC,MAAKoB,WAAL,GAAmBrB,IAAI,CAAC,CAAD,CAAvB;QACA3B,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAT;MACD,CAVD,CAYA;;MACA,IAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;QAC/BC,MAAKoB,WAAL,GAAmBtB,IAAI,CAACuB,aAAL,CAAmBtB,IAAI,CAAC,CAAD,CAAvB,CAAnB;QACA3B,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAT;MACD;MAED,IAAI,OAAO3B,EAAP,KAAc,WAAlB,EAA+B;QAC7BA,EAAE,GAAGnB,IAAL;MACD;MAED,IAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;QAC5B,0DAAOkD,kBAAW/D,IAAX,iDAAsB,uBAAtB,EAA+CoD,MAA/C,CAAP;MACD;MAEDX,MAAKuB,MAAL,GAAc;QACZhD,IAAI,EAAEV,MAAM,CAACC,KAAP,CAAaoD,CAAC,GAAGC,CAAJ,GAAQ,CAArB,CADM;QAEZ7B,KAAK,EAAE4B,CAFK;QAGZ3B,MAAM,EAAE4B;MAHI,CAAd;MAMA,KAAK,IAAI3E,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGwD,MAAKuB,MAAL,CAAYhD,IAAZ,CAAiBvB,MAArC,EAA6CR,GAAC,IAAI,CAAlD,EAAqD;QACnDwD,MAAKuB,MAAL,CAAYhD,IAAZ,CAAiBiD,aAAjB,CAA+BxB,MAAKoB,WAApC,EAAiD5E,GAAjD;MACD;MAEDmE,MAAM,CAAC,IAAD,iDAAN;IACD,CAxCD,MAwCO,IAAI,yBAAOZ,IAAI,CAAC,CAAD,CAAX,MAAmB,QAAnB,IAA+BA,IAAI,CAAC,CAAD,CAAJ,CAAQtB,GAA3C,EAAgD;MACrDL,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAJ,IAAW9C,IAAhB;MAEA,IAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;QAC5B,0DAAOkD,kBAAW/D,IAAX,iDAAsB,uBAAtB,EAA+CoD,MAA/C,CAAP;MACD;MAEDzC,WAAW,CAAC6B,IAAI,CAAC,CAAD,CAAL,EAAU,UAAC1B,GAAD,EAAME,IAAN,EAAe;QAClC,IAAIF,GAAJ,EAAS;UACP,OAAOiD,kBAAW/D,IAAX,iDAAsBc,GAAtB,EAA2BsC,MAA3B,CAAP;QACD;QAEDX,MAAKyB,WAAL,CAAiBlD,IAAjB,EAAuBwB,IAAI,CAAC,CAAD,CAAJ,CAAQtB,GAA/B,EAAoCkC,MAApC;MACD,CANU,CAAX;IAOD,CAdM,MAcA,IAAIZ,IAAI,CAAC,CAAD,CAAJ,YAAmBD,IAAvB,EAA6B;MAClC;MADkC,IAE3B4B,QAF2B,GAEf3B,IAFe;MAGlC3B,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAT;MAEA,IAAI,OAAO3B,EAAP,KAAc,WAAlB,EAA+B;QAC7BA,EAAE,GAAGnB,IAAL;MACD;MAED,IAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;QAC5B,0DAAOkD,kBAAW/D,IAAX,iDAAsB,uBAAtB,EAA+CoD,MAA/C,CAAP;MACD;MAEDX,MAAKuB,MAAL,GAAc;QACZhD,IAAI,EAAEV,MAAM,CAAC8D,IAAP,CAAYD,QAAQ,CAACH,MAAT,CAAgBhD,IAA5B,CADM;QAEZe,KAAK,EAAEoC,QAAQ,CAACH,MAAT,CAAgBjC,KAFX;QAGZC,MAAM,EAAEmC,QAAQ,CAACH,MAAT,CAAgBhC;MAHZ,CAAd;MAMAS,MAAK4B,QAAL,GAAgBF,QAAQ,CAACE,QAAzB;MACA5B,MAAK6B,aAAL,GAAqBH,QAAQ,CAACG,aAA9B;MACA7B,MAAK8B,gBAAL,GAAwBJ,QAAQ,CAACI,gBAAjC;MACA9B,MAAK+B,WAAL,GAAmBL,QAAQ,CAACK,WAA5B;MACA/B,MAAKgC,KAAL,GAAaN,QAAQ,CAACM,KAAtB;MACAhC,MAAKoB,WAAL,GAAmBM,QAAQ,CAACN,WAA5B;MACApB,MAAKiC,aAAL,GAAqBP,QAAQ,CAACO,aAA9B;MAEAtB,MAAM,CAAC,IAAD,iDAAN;IACD,CA5BM,MA4BA,IAAIvB,aAAa,CAACW,IAAI,CAAC,CAAD,CAAL,CAAjB,EAA4B;MAAA,IAC1BmC,SAD0B,GACbnC,IADa;MAEjC3B,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAJ,IAAW9C,IAAhB;MAEA,IAAMkF,MAAM,GACVD,SAAS,CAAC5C,KAAV,GAAkB4C,SAAS,CAAC3C,MAA5B,GAAqC,CAArC,KAA2C2C,SAAS,CAAC3D,IAAV,CAAevB,MAD5D;MAEA,IAAMY,MAAM,GAAGuE,MAAM,GACjBtE,MAAM,CAAC8D,IAAP,CAAYO,SAAS,CAAC3D,IAAtB,CADiB,GAEjBkB,qBAAqB,CAACyC,SAAS,CAAC3D,IAAX,CAFzB;MAIAyB,MAAKuB,MAAL,GAAc;QACZhD,IAAI,EAAEX,MADM;QAEZ0B,KAAK,EAAE4C,SAAS,CAAC5C,KAFL;QAGZC,MAAM,EAAE2C,SAAS,CAAC3C;MAHN,CAAd;MAMAoB,MAAM,CAAC,IAAD,iDAAN;IACD,CAjBM,MAiBA,IAAI,OAAOZ,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;MACtC;MACA,IAAMI,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAAjB;MACA3B,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAT;MAEA,IAAI,OAAO3B,EAAP,KAAc,WAAlB,EAA+B;QAC7BA,EAAE,GAAGnB,IAAL;MACD;MAED,IAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;QAC5B,0DAAOkD,kBAAW/D,IAAX,iDAAsB,uBAAtB,EAA+CoD,MAA/C,CAAP;MACD;MAED5B,kBAAkB,CAACoB,IAAD,EAAO,UAAC9B,GAAD,EAAME,IAAN,EAAe;QACtC,IAAIF,GAAJ,EAAS;UACP,OAAOiD,kBAAW/D,IAAX,iDAAsBc,GAAtB,EAA2BsC,MAA3B,CAAP;QACD;QAEDX,MAAKyB,WAAL,CAAiBlD,IAAjB,EAAuB4B,IAAvB,EAA6BQ,MAA7B;MACD,CANiB,CAAlB;IAOD,CApBM,MAoBA,IAAI,yBAAOZ,IAAI,CAAC,CAAD,CAAX,MAAmB,QAAnB,IAA+BlC,MAAM,CAACc,QAAP,CAAgBoB,IAAI,CAAC,CAAD,CAApB,CAAnC,EAA6D;MAClE;MACA,IAAMxB,IAAI,GAAGwB,IAAI,CAAC,CAAD,CAAjB;MACA3B,EAAE,GAAG2B,IAAI,CAAC,CAAD,CAAT;MAEA,IAAI,OAAO3B,EAAP,KAAc,UAAlB,EAA8B;QAC5B,0DAAOkD,kBAAW/D,IAAX,iDAAsB,uBAAtB,EAA+CoD,MAA/C,CAAP;MACD;MAEDX,MAAKyB,WAAL,CAAiBlD,IAAjB,EAAuB,IAAvB,EAA6BoC,MAA7B;IACD,CAVM,MAUA;MACL;MACA;MACAvC,EAAE,GAAG2B,IAAI,CAACA,IAAI,CAAC/C,MAAL,GAAc,CAAf,CAAT;MAEA,IAAI,OAAOoB,EAAP,KAAc,UAAlB,EAA8B;QAC5B;QACAA,EAAE,GAAG2B,IAAI,CAACA,IAAI,CAAC/C,MAAL,GAAc,CAAf,CAAT;QAEA,IAAI,OAAOoB,EAAP,KAAc,UAAlB,EAA8B;UAC5BA,EAAE,GAAGnB,IAAL;QACD;MACF;MAED,IAAMmF,gBAAgB,GAAGtC,IAAI,CAACuC,mBAAL,CAAyBC,IAAzB,CAA8B,WAAC;QAAA,OACtDC,CAAC,CAACpF,IAAF,QAAC,EAAS4C,IAAT,CADqD;MAAA,CAA/B,CAAzB;MAIA,IAAIqC,gBAAJ,EAAsB;QACpB,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;UAAA;UAAA,OACV,yCAAgB,CAACC,GAAjB,EAAqBpF,IAArB,+EAAgCkF,OAAhC,EAAyCC,MAAzC,SAAoD3C,IAApD,EADU;QAAA,CAAZ,EAGG6C,IAHH,CAGQ;UAAA,OAAMjC,MAAM,CAAC,IAAD,iDAAZ;QAAA,CAHR,WAISA,MAJT;MAKD,CAND,MAMO;QACL,0DAAOW,kBAAW/D,IAAX,iDAEL,oDACE,2DAHG,EAILoD,MAJK,CAAP;MAMD;IACF;IA5LkB;EA6LpB;EAED;;;;;;;;;;;gCAQYpC,I,EAAM4B,I,EAAMQ,M,EAAQ;MAC9Bc,yBAAYlE,IAAZ,CAAiB,IAAjB,EAAuBgB,IAAvB,EAA6B,IAA7B,EAAmCoC,MAAnC;IACD;IAED;;;;;;;;yBAMKkC,I,EAAMzE,E,EAAI;MACb,IAAI,OAAOyE,IAAP,KAAgB,SAApB,EAA+B;QAC7B,OAAOvB,kBAAW/D,IAAX,CACL,IADK,EAEL,wDAFK,EAGLa,EAHK,CAAP;MAKD;MAED,KAAK4D,KAAL,GAAaa,IAAb;MAEA,IAAI,0BAAczE,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;MACD;MAED,OAAO,IAAP;IACD;IAED;;;;;;;;8BAMUsD,U,EAAYiC,S,EAAsB;MAAA,IAAXvE,IAAW,uEAAJ,EAAI;MAC1CA,IAAI,GAAGnB,MAAM,CAAC2F,MAAP,CAAcxE,IAAd,EAAoB;QAAEsC,UAAU,EAAVA,UAAF;QAAciC,SAAS,EAATA;MAAd,CAApB,CAAP;MACA,KAAKE,IAAL,CAAU,KAAV,EAAiBzE,IAAjB;MAEA,IAAIsC,UAAJ,EAAgB;QACd,KAAKmC,IAAL,CAAUnC,UAAV,EAAsBtC,IAAtB;MACD;MAED,KAAKyE,IAAL,CAAUF,SAAV,EAAqBvE,IAArB;IACD;;;8BAESsC,U,EAAYxC,G,EAAK;MACzB,KAAK2C,SAAL,CAAeH,UAAf,EAA2B,OAA3B,EAAoCxC,GAApC;IACD;IAED;;;;;;gCAIY;MACV,OAAO,KAAKkD,MAAL,CAAYhC,MAAnB;IACD;IAED;;;;;;+BAIW;MACT,OAAO,KAAKgC,MAAL,CAAYjC,KAAnB;IACD;IAED;;;;;;8BAIU;MACR,OACE,YACC,KAAKiC,MAAL,KAAgB1B,WAAhB,GACG,YADH,GAEG,KAAK0B,MAAL,CAAYjC,KAAZ,GAAoB,GAApB,GAA0B,KAAKiC,MAAL,CAAYhC,MAH1C,IAIA,GALF;IAOD;IAED;;;;;;+BAIW;MACT,OAAO,eAAP;IACD;IAED;;;;;;8BAIU;MACR,IAAMc,IAAI,GAAG,KAAK4B,aAAL,IAAsBnC,IAAI,CAACG,QAAxC;MAEA,OAAOI,IAAP;IACD;IAED;;;;;;mCAIe;MACb,IAAMA,IAAI,GAAG,KAAK4C,OAAL,EAAb;MAEA,OAAOC,IAAI,CAACC,YAAL,CAAkB9C,IAAlB,CAAP;IACD;IAED;;;;;;;;0BAMMF,I,EAAM/B,E,EAAI;MAAA;MACd,IAAI,CAACa,cAAD,IAAO,CAACA,eAAGmE,iBAAf,EAAkC;QAChC,MAAM,IAAItE,KAAJ,CACJ,+DADI,CAAN;MAGD;MAED,IAAI,OAAOqB,IAAP,KAAgB,QAApB,EAA8B;QAC5B,OAAOmB,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;MACD;MAED,IAAI,OAAOA,EAAP,KAAc,WAAlB,EAA+B;QAC7BA,EAAE,GAAGnB,IAAL;MACD;MAED,IAAI,OAAOmB,EAAP,KAAc,UAAlB,EAA8B;QAC5B,OAAOkD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;MACD;MAED,IAAMiC,IAAI,GAAG6C,IAAI,CAACG,OAAL,CAAalD,IAAb,KAAsB,KAAK8C,OAAL,EAAnC;MACA,IAAMK,OAAO,GAAGC,iBAAKC,KAAL,CAAWrD,IAAX,CAAhB;MAEA,IAAImD,OAAO,CAACG,GAAZ,EAAiB;QACfC,mBAAOC,IAAP,CAAYL,OAAO,CAACG,GAApB;MACD;MAED,KAAKnD,SAAL,CAAeD,IAAf,EAAqB,UAAChC,GAAD,EAAMT,MAAN,EAAiB;QACpC,IAAIS,GAAJ,EAAS;UACP,OAAOiD,kBAAW/D,IAAX,CAAgBqG,MAAhB,EAAsBvF,GAAtB,EAA2BD,EAA3B,CAAP;QACD;QAED,IAAMyF,MAAM,GAAG5E,eAAGmE,iBAAH,CAAqBjD,IAArB,CAAf;QAEA0D,MAAM,CACHC,EADH,CACM,MADN,EACc,YAAM;UAChBD,MAAM,CAAC3D,KAAP,CAAatC,MAAb;UACAiG,MAAM,CAACE,GAAP;QACD,CAJH,EAKGD,EALH,CAKM,OALN,EAKe,aAAG,EAAI;UAClB,OAAOxC,kBAAW/D,IAAX,CAAgBqG,MAAhB,EAAsBvF,GAAtB,EAA2BD,EAA3B,CAAP;QACD,CAPH;QAQAyF,MAAM,CAACC,EAAP,CAAU,QAAV,EAAoB,YAAM;UACxB1F,EAAE,CAACb,IAAH,CAAQqG,MAAR,EAAc,IAAd,EAAoBA,MAApB;QACD,CAFD;MAGD,CAlBD;MAoBA,OAAO,IAAP;IACD;;;IAID;;;;;;8BAMUvD,I,EAAMjC,E,EAAI;MAClB,IAAIiC,IAAI,KAAKP,IAAI,CAACkE,IAAlB,EAAwB;QACtB;QACA3D,IAAI,GAAG,KAAK4C,OAAL,EAAP;MACD;MAED,IAAI,OAAO5C,IAAP,KAAgB,QAApB,EAA8B;QAC5B,OAAOiB,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;MACD;MAED,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;QAC5B,OAAOkD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;MACD;MAED,KAAKkC,SAAL,CAAeD,IAAf,EAAqB,UAAShC,GAAT,EAAcE,IAAd,EAAoB;QACvC,IAAIF,GAAJ,EAAS;UACP,OAAOiD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsBc,GAAtB,EAA2BD,EAA3B,CAAP;QACD;QAED,IAAMY,GAAG,GAAG,UAAUqB,IAAV,GAAiB,UAAjB,GAA8B9B,IAAI,CAACjB,QAAL,CAAc,QAAd,CAA1C;QACAc,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoByB,GAApB;MACD,CAPD;MASA,OAAO,IAAP;IACD;;;IAID;;;;;;yBAMKiF,I,EAAM7F,E,EAAI;MACb6F,IAAI,GAAGA,IAAI,IAAI,EAAf;MAEA,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;QAC9B7F,EAAE,GAAG6F,IAAL;QACAA,IAAI,GAAG,EAAP;MACD;MAED,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;QAC5B,OAAO3C,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+Ca,EAA/C,CAAP;MACD;MAED,IAAI6F,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,EAAvB,EAA2B;QACzB,OAAO3C,kBAAW/D,IAAX,CACL,IADK,EAEL,wCAFK,EAGLa,EAHK,CAAP;MAKD;MAED,IAAI8F,IAAI,GAAG,KAAKC,KAAL,EAAX;MACAD,IAAI,GAAG,yBAAQxH,oBAAQC,GAAhB,EAAqBN,QAAQ,CAACO,KAAT,CAAe,CAAf,EAAkBqH,IAAlB,CAArB,EAA8CC,IAA9C,CAAP;MAEA,OAAOA,IAAI,CAAClH,MAAL,GAAcV,aAAa,CAAC2H,IAAD,CAAlC,EAA0C;QACxCC,IAAI,GAAG,MAAMA,IAAb,CADwC,CACrB;MACpB;;MAED,IAAI,0BAAc9F,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB2G,IAApB;MACD;MAED,OAAOA,IAAP;IACD;IAED;;;;;;4BAIQ;MACN,IAAMC,KAAK,GAAG,IAAIC,iBAAJ,EAAd;MACA,OAAOD,KAAK,CAACE,OAAN,CAAc,IAAd,CAAP;IACD;IAED;;;;;;;qCAKiBC,W,EAAa;MAC5B,IAAMH,KAAK,GAAG,IAAIC,iBAAJ,EAAd;MACA,IAAMG,WAAW,GAAGJ,KAAK,CAACE,OAAN,CAAc,IAAd,CAApB;MAEA,OAAOF,KAAK,CAACK,QAAN,CAAeD,WAAf,EAA4BD,WAA5B,CAAP;IACD;IAED;;;;;;;;IAUA;;;;;;;;kCAQcG,C,EAAGC,C,EAAGC,Y,EAAcvG,E,EAAI;MACpC,IAAIwG,EAAJ;MACA,IAAIC,EAAJ;MAEA,IAAI,OAAOF,YAAP,KAAwB,UAAxB,IAAsC,OAAOvG,EAAP,KAAc,WAAxD,EAAqE;QACnEA,EAAE,GAAGuG,YAAL;QACAA,YAAY,GAAG,IAAf;MACD;MAED,IAAI,CAACA,YAAL,EAAmB;QACjBA,YAAY,GAAG7E,IAAI,CAACgF,WAApB;MACD;MAED,IAAI,OAAOL,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;QAClD,OAAOpD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP;MACD,CAfmC,CAiBpC;;MACAqG,CAAC,GAAGM,IAAI,CAACC,KAAL,CAAWP,CAAX,CAAJ;MACAC,CAAC,GAAGK,IAAI,CAACC,KAAL,CAAWN,CAAX,CAAJ;MACAE,EAAE,GAAGH,CAAL;MACAI,EAAE,GAAGH,CAAL;MAEA,IAAIC,YAAY,KAAK7E,IAAI,CAACgF,WAA1B,EAAuC;QACrC,IAAIL,CAAC,GAAG,CAAR,EAAWG,EAAE,GAAG,CAAL;QACX,IAAIH,CAAC,IAAI,KAAKlD,MAAL,CAAYjC,KAArB,EAA4BsF,EAAE,GAAG,KAAKrD,MAAL,CAAYjC,KAAZ,GAAoB,CAAzB;QAC5B,IAAIoF,CAAC,GAAG,CAAR,EAAWG,EAAE,GAAG,CAAL;QACX,IAAIH,CAAC,IAAI,KAAKnD,MAAL,CAAYhC,MAArB,EAA6BsF,EAAE,GAAG,KAAKtD,MAAL,CAAYhC,MAAZ,GAAqB,CAA1B;MAC9B;MAED,IAAIoF,YAAY,KAAK7E,IAAI,CAACmF,SAA1B,EAAqC;QACnC,IAAIR,CAAC,GAAG,CAAR,EAAW;UACTG,EAAE,GAAG,KAAKrD,MAAL,CAAYjC,KAAZ,GAAoBmF,CAAzB;QACD;QAED,IAAIA,CAAC,IAAI,KAAKlD,MAAL,CAAYjC,KAArB,EAA4B;UAC1BsF,EAAE,GAAGH,CAAC,GAAG,KAAKlD,MAAL,CAAYjC,KAArB;QACD;QAED,IAAIoF,CAAC,GAAG,CAAR,EAAW;UACTE,EAAE,GAAG,KAAKrD,MAAL,CAAYhC,MAAZ,GAAqBmF,CAA1B;QACD;QAED,IAAIA,CAAC,IAAI,KAAKnD,MAAL,CAAYhC,MAArB,EAA6B;UAC3BsF,EAAE,GAAGH,CAAC,GAAG,KAAKnD,MAAL,CAAYhC,MAArB;QACD;MACF;MAED,IAAI/C,CAAC,GAAI,KAAK+E,MAAL,CAAYjC,KAAZ,GAAoBuF,EAApB,GAAyBD,EAA1B,IAAiC,CAAzC,CAhDoC,CAkDpC;;MACA,IAAIA,EAAE,GAAG,CAAL,IAAUA,EAAE,IAAI,KAAKrD,MAAL,CAAYjC,KAAhC,EAAuC;QACrC9C,CAAC,GAAG,CAAC,CAAL;MACD;MAED,IAAIqI,EAAE,GAAG,CAAL,IAAUA,EAAE,IAAI,KAAKtD,MAAL,CAAYhC,MAAhC,EAAwC;QACtC/C,CAAC,GAAG,CAAC,CAAL;MACD;MAED,IAAI,0BAAc4B,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBf,CAApB;MACD;MAED,OAAOA,CAAP;IACD;IAED;;;;;;;;;kCAOciI,C,EAAGC,C,EAAGtG,E,EAAI;MACtB,IAAI,OAAOqG,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EACE,OAAOpD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP,CAFoB,CAItB;;MACAqG,CAAC,GAAGM,IAAI,CAACC,KAAL,CAAWP,CAAX,CAAJ;MACAC,CAAC,GAAGK,IAAI,CAACC,KAAL,CAAWN,CAAX,CAAJ;MAEA,IAAMQ,GAAG,GAAG,KAAKC,aAAL,CAAmBV,CAAnB,EAAsBC,CAAtB,CAAZ;MACA,IAAMU,GAAG,GAAG,KAAK7D,MAAL,CAAYhD,IAAZ,CAAiB8G,YAAjB,CAA8BH,GAA9B,CAAZ;MAEA,IAAI,0BAAc9G,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB6H,GAApB;MACD;MAED,OAAOA,GAAP;IACD;;;IAID;;;;;;;;kCAQcA,G,EAAKX,C,EAAGC,C,EAAGtG,E,EAAI;MAC3B,IACE,OAAOgH,GAAP,KAAe,QAAf,IACA,OAAOX,CAAP,KAAa,QADb,IAEA,OAAOC,CAAP,KAAa,QAHf,EAKE,OAAOpD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,8BAAtB,EAAsDa,EAAtD,CAAP,CANyB,CAQ3B;;MACAqG,CAAC,GAAGM,IAAI,CAACC,KAAL,CAAWP,CAAX,CAAJ;MACAC,CAAC,GAAGK,IAAI,CAACC,KAAL,CAAWN,CAAX,CAAJ;MAEA,IAAMQ,GAAG,GAAG,KAAKC,aAAL,CAAmBV,CAAnB,EAAsBC,CAAtB,CAAZ;MACA,KAAKnD,MAAL,CAAYhD,IAAZ,CAAiBiD,aAAjB,CAA+B4D,GAA/B,EAAoCF,GAApC;MAEA,IAAI,0BAAc9G,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;MACD;MAED,OAAO,IAAP;IACD;;;IAID;;;;+BAIW;MACT,KAAK,IAAI+H,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG,KAAK/D,MAAL,CAAYhC,MAA1C,EAAkD+F,MAAM,EAAxD,EAA4D;QAC1D,KAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG,KAAKhE,MAAL,CAAYjC,KAA1C,EAAiDiG,MAAM,EAAvD,EAA2D;UACzD,IAAML,GAAG,GAAI,KAAK3D,MAAL,CAAYjC,KAAZ,GAAoBgG,MAApB,GAA6BC,MAA9B,IAAyC,CAArD;UACA,IAAMC,KAAK,GAAG,KAAKjE,MAAL,CAAYhD,IAAZ,CAAiB2G,GAAG,GAAG,CAAvB,CAAd;UAEA,IAAIM,KAAK,KAAK,IAAd,EAAoB;YAClB,OAAO,IAAP;UACD;QACF;MACF;MAED,OAAO,KAAP;IACD;IAED;;;;;;;;;;iCAQaf,C,EAAGC,C,EAAGxD,C,EAAGC,C,EAAG;MACvB,IAAI,OAAOsD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;QAClD,OAAOpD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,CAAP;MACD;MAED,IAAI,OAAO2D,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;QAClD,OAAOG,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,CAAP;MACD;MAED,OAAO,yBAAa,IAAb,EAAmBkH,CAAnB,EAAsBC,CAAtB,EAAyBxD,CAAzB,EAA4BC,CAA5B,CAAP;IACD;;;EAjpBgBsE,kB;AAopBZ,SAASC,YAAT,CAAsBC,SAAtB,EAAsD;EAAA,IAArBjF,YAAqB,uEAANZ,IAAM;EAC3D1C,MAAM,CAACwI,OAAP,CAAeD,SAAf,EAA0BE,OAA1B,CAAkC,gBAAmB;IAAA;MAAjBC,IAAiB;MAAXC,KAAW;IACnDrF,YAAY,CAACoF,IAAD,CAAZ,GAAqBC,KAArB;EACD,CAFD;AAGD;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAsD;EAAA,IAArBvF,YAAqB,uEAANZ,IAAM;EAC3D1C,MAAM,CAACwI,OAAP,CAAeK,OAAf,EAAwBJ,OAAxB,CAAgC,iBAAmB;IAAA;MAAjBC,IAAiB;MAAXC,KAAW;IACjDrF,YAAY,CAACrD,SAAb,CAAuByI,IAAvB,IAA+BC,KAA/B;EACD,CAFD;AAGD;AAEDL,YAAY,CAACC,SAAD,CAAZ;AACAK,cAAc,CAAC;EAAEE,SAAS,EAATA;AAAF,CAAD,CAAd;AAEApG,IAAI,CAACuC,mBAAL,GAA2B,EAA3B;AAEA;;;;;;;AAMAvC,IAAI,CAACqG,uBAAL,GAA+B,UAASL,IAAT,EAAe3I,IAAf,EAAqBwF,GAArB,EAA0B;EACvD7C,IAAI,CAACuC,mBAAL,CAAyBtF,IAAzB,CAA8B;IAAE+I,IAAI,EAAJA,IAAF;IAAQ3I,IAAI,EAAJA,IAAR;IAAcwF,GAAG,EAAHA;EAAd,CAA9B;AACD,CAFD;AAIA;;;;;AAIA7C,IAAI,CAACsG,IAAL,GAAY,YAAkB;EAAA,mCAANrG,IAAM;IAANA,IAAM;EAAA;EAC5B,OAAO,IAAIyC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtC,4BAAI5C,IAAJ,EAAYC,IAAZ,SAAkB,UAAC1B,GAAD,EAAMgI,KAAN,EAAgB;MAChC,IAAIhI,GAAJ,EAASqE,MAAM,CAACrE,GAAD,CAAN,CAAT,KACKoE,OAAO,CAAC4D,KAAD,CAAP;IACN,CAHD;EAID,CALM,CAAP;AAMD,CAPD;AASAvG,IAAI,CAACwG,MAAL,GAAcxG,IAAI,CAACsG,IAAnB;AAEA;;;;;;;;;;AASAtG,IAAI,CAACyG,SAAL,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBvI,EAArB,EAAyB;EACxC,IACE,OAAOoI,CAAP,KAAa,QAAb,IACA,OAAOC,CAAP,KAAa,QADb,IAEA,OAAOC,CAAP,KAAa,QAFb,IAGA,OAAOC,CAAP,KAAa,QAJf,EAKE;IACA,OAAOrF,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,+BAAtB,EAAuDa,EAAvD,CAAP;EACD;EAED,IAAIoI,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;IACpB,OAAOlF,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD,CAAP;EACD;EAED,IAAIqI,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;IACpBnF,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD;EACD;EAED,IAAIsI,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;IACpB,OAAOpF,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD,CAAP;EACD;EAED,IAAIuI,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAjB,EAAsB;IACpB,OAAOrF,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,6BAAtB,EAAqDa,EAArD,CAAP;EACD;EAEDoI,CAAC,GAAGzB,IAAI,CAACC,KAAL,CAAWwB,CAAX,CAAJ;EACAE,CAAC,GAAG3B,IAAI,CAACC,KAAL,CAAW0B,CAAX,CAAJ;EACAD,CAAC,GAAG1B,IAAI,CAACC,KAAL,CAAWyB,CAAX,CAAJ;EACAE,CAAC,GAAG5B,IAAI,CAACC,KAAL,CAAW2B,CAAX,CAAJ;EAEA,IAAMnK,CAAC,GACLgK,CAAC,GAAGzB,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAJ,GACAH,CAAC,GAAG1B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CADJ,GAEAF,CAAC,GAAG3B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAFJ,GAGAD,CAAC,GAAG5B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAJN;EAMA,IAAI,0BAAcxI,EAAd,CAAJ,EAAuB;IACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBf,CAApB;EACD;EAED,OAAOA,CAAP;AACD,CA1CD;AA4CA;;;;;;;AAMAsD,IAAI,CAAC+G,SAAL,GAAiB,UAASrK,CAAT,EAAY4B,EAAZ,EAAgB;EAC/B,IAAI,OAAO5B,CAAP,KAAa,QAAjB,EAA2B;IACzB,OAAO8E,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,oBAAtB,EAA4Ca,EAA5C,CAAP;EACD;EAED,IAAM0I,IAAI,GAAG,EAAb;EAEAA,IAAI,CAACN,CAAL,GAASzB,IAAI,CAACgC,KAAL,CAAWvK,CAAC,GAAGuI,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAf,CAAT;EACAE,IAAI,CAACL,CAAL,GAAS1B,IAAI,CAACgC,KAAL,CAAW,CAACvK,CAAC,GAAGsK,IAAI,CAACN,CAAL,GAASzB,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAd,IAAkC7B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAA7C,CAAT;EACAE,IAAI,CAACJ,CAAL,GAAS3B,IAAI,CAACgC,KAAL,CACP,CAACvK,CAAC,GAAGsK,IAAI,CAACN,CAAL,GAASzB,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAAb,GAAgCE,IAAI,CAACL,CAAL,GAAS1B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAA1C,IACE7B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAFK,CAAT;EAIAE,IAAI,CAACH,CAAL,GAAS5B,IAAI,CAACgC,KAAL,CACP,CAACvK,CAAC,GACAsK,IAAI,CAACN,CAAL,GAASzB,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CADV,GAECE,IAAI,CAACL,CAAL,GAAS1B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAFV,GAGCE,IAAI,CAACJ,CAAL,GAAS3B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CAHX,IAIE7B,IAAI,CAAC6B,GAAL,CAAS,GAAT,EAAc,CAAd,CALK,CAAT;EAQA,IAAI,0BAAcxI,EAAd,CAAJ,EAAuB;IACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBuJ,IAApB;EACD;EAED,OAAOA,IAAP;AACD,CA1BD;AA4BA;;;;;;AAKAhH,IAAI,CAACuB,aAAL,GAAqB,UAAS2F,QAAT,EAAmB;EACtCA,QAAQ,GAAGA,QAAQ,IAAI,CAAvB,CADsC,CACZ;;EAE1B,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,OAAOC,MAAM,CAACD,QAAD,CAAb;EAElC,OAAO/F,QAAQ,CAAC,2BAAU+F,QAAV,EAAoBE,MAApB,EAAD,EAA+B,EAA/B,CAAf;AACD,CAND;AAQA;;;;;;AAKApH,IAAI,CAACqH,QAAL,GAAgB,UAASC,CAAT,EAAY;EAC1BA,CAAC,GAAGrC,IAAI,CAACsC,GAAL,CAASD,CAAT,EAAY,CAAZ,CAAJ;EACAA,CAAC,GAAGrC,IAAI,CAACuC,GAAL,CAASF,CAAT,EAAY,GAAZ,CAAJ;EAEA,OAAOA,CAAP;AACD,CALD;AAOA;;;;;;;;AAOAtH,IAAI,CAACyH,IAAL,GAAY,UAASC,IAAT,EAAeC,IAAf,EAAsC;EAAA,IAAjBC,SAAiB,uEAAL,GAAK;EAChD,IAAI,EAAEF,IAAI,YAAY1H,IAAlB,KAA2B,EAAE2H,IAAI,YAAY3H,IAAlB,CAA/B,EACE,OAAOwB,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,sCAAtB,CAAP;EAEF,IAAMoK,IAAI,GAAGH,IAAI,CAACjG,MAAlB;EACA,IAAMqG,IAAI,GAAGH,IAAI,CAAClG,MAAlB;EAEA,IAAIoG,IAAI,CAACrI,KAAL,KAAesI,IAAI,CAACtI,KAApB,IAA6BqI,IAAI,CAACpI,MAAL,KAAgBqI,IAAI,CAACrI,MAAtD,EAA8D;IAC5D,IAAIoI,IAAI,CAACrI,KAAL,GAAaqI,IAAI,CAACpI,MAAlB,GAA2BqI,IAAI,CAACtI,KAAL,GAAasI,IAAI,CAACrI,MAAjD,EAAyD;MACvD;MACAiI,IAAI,GAAGA,IAAI,CAACK,UAAL,GAAkBC,MAAlB,CAAyBF,IAAI,CAACtI,KAA9B,EAAqCsI,IAAI,CAACrI,MAA1C,CAAP;IACD,CAHD,MAGO;MACL;MACAkI,IAAI,GAAGA,IAAI,CAACI,UAAL,GAAkBC,MAAlB,CAAyBH,IAAI,CAACrI,KAA9B,EAAqCqI,IAAI,CAACpI,MAA1C,CAAP;IACD;EACF;EAED,IAAI,OAAOmI,SAAP,KAAqB,QAArB,IAAiCA,SAAS,GAAG,CAA7C,IAAkDA,SAAS,GAAG,CAAlE,EAAqE;IACnE,OAAOpG,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,4CAAtB,CAAP;EACD;EAED,IAAMgK,IAAI,GAAG,IAAIzH,IAAJ,CAAS6H,IAAI,CAACrI,KAAd,EAAqBqI,IAAI,CAACpI,MAA1B,EAAkC,UAAlC,CAAb;EAEA,IAAMwI,aAAa,GAAG,4BACpBJ,IAAI,CAACpJ,IADe,EAEpBqJ,IAAI,CAACrJ,IAFe,EAGpBgJ,IAAI,CAAChG,MAAL,CAAYhD,IAHQ,EAIpBgJ,IAAI,CAAChG,MAAL,CAAYjC,KAJQ,EAKpBiI,IAAI,CAAChG,MAAL,CAAYhC,MALQ,EAMpB;IAAEmI,SAAS,EAATA;EAAF,CANoB,CAAtB;EASA,OAAO;IACLM,OAAO,EAAED,aAAa,IAAIR,IAAI,CAAChG,MAAL,CAAYjC,KAAZ,GAAoBiI,IAAI,CAAChG,MAAL,CAAYhC,MAApC,CADjB;IAEL8G,KAAK,EAAEkB;EAFF,CAAP;AAID,CApCD;AAsCA;;;;;;;AAMAzH,IAAI,CAAC0E,QAAL,GAAgB,UAASgD,IAAT,EAAeC,IAAf,EAAqB;EACnC,IAAMQ,KAAK,GAAG,IAAI7D,iBAAJ,EAAd;EACA,IAAM8D,KAAK,GAAGD,KAAK,CAAC5D,OAAN,CAAcmD,IAAd,CAAd;EACA,IAAMW,KAAK,GAAGF,KAAK,CAAC5D,OAAN,CAAcoD,IAAd,CAAd;EAEA,OAAOQ,KAAK,CAACzD,QAAN,CAAe0D,KAAf,EAAsBC,KAAtB,CAAP;AACD,CAND;AAQA;;;;;;;AAMArI,IAAI,CAACsI,aAAL,GAAqB,UAASF,KAAT,EAAgBC,KAAhB,EAAuB;EAC1C,IAAMF,KAAK,GAAG,IAAI7D,iBAAJ,EAAd;EAEA,OAAO6D,KAAK,CAACzD,QAAN,CAAe0D,KAAf,EAAsBC,KAAtB,CAAP;AACD,CAJD;AAMA;;;;;;;;;;AASArI,IAAI,CAACuI,SAAL,GAAiB,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;EACtC,IAAM3B,GAAG,GAAG,SAANA,GAAM,EAAC;IAAA,OAAI7B,IAAI,CAAC6B,GAAL,CAASQ,CAAT,EAAY,CAAZ,CAAJ;EAAA,CAAb;EADsC,IAE9BC,GAF8B,GAEtBtC,IAFsB,CAE9BsC,GAF8B;EAGtC,IAAMmB,MAAM,GAAG,MAAM,GAAN,GAAY,CAA3B;EAEA,IAAIF,KAAK,CAAC3B,CAAN,KAAY,CAAZ,IAAiB,CAAC2B,KAAK,CAAC3B,CAA5B,EAA+B;IAC7B2B,KAAK,CAAC3B,CAAN,GAAU,GAAV;EACD;EAED,IAAI4B,KAAK,CAAC5B,CAAN,KAAY,CAAZ,IAAiB,CAAC4B,KAAK,CAAC5B,CAA5B,EAA+B;IAC7B4B,KAAK,CAAC5B,CAAN,GAAU,GAAV;EACD;EAED,OACE,CAACU,GAAG,CAACT,GAAG,CAAC0B,KAAK,CAAC9B,CAAN,GAAU+B,KAAK,CAAC/B,CAAjB,CAAJ,EAAyBI,GAAG,CAAC0B,KAAK,CAAC9B,CAAN,GAAU+B,KAAK,CAAC/B,CAAhB,GAAoB8B,KAAK,CAAC3B,CAA1B,GAA8B4B,KAAK,CAAC5B,CAArC,CAA5B,CAAH,GACCU,GAAG,CAACT,GAAG,CAAC0B,KAAK,CAAC7B,CAAN,GAAU8B,KAAK,CAAC9B,CAAjB,CAAJ,EAAyBG,GAAG,CAAC0B,KAAK,CAAC7B,CAAN,GAAU8B,KAAK,CAAC9B,CAAhB,GAAoB6B,KAAK,CAAC3B,CAA1B,GAA8B4B,KAAK,CAAC5B,CAArC,CAA5B,CADJ,GAECU,GAAG,CAACT,GAAG,CAAC0B,KAAK,CAAC5B,CAAN,GAAU6B,KAAK,CAAC7B,CAAjB,CAAJ,EAAyBE,GAAG,CAAC0B,KAAK,CAAC5B,CAAN,GAAU6B,KAAK,CAAC7B,CAAhB,GAAoB4B,KAAK,CAAC3B,CAA1B,GAA8B4B,KAAK,CAAC5B,CAArC,CAA5B,CAFL,IAGA6B,MAJF;AAMD,CAnBD;AAqBA;;;;;;;;;;;;;;;AAcO,SAASC,YAAT,CAAsB5H,UAAtB,EAAkC6H,MAAlC,EAA0CC,MAA1C,EAAkD;EACvD,IAAMC,YAAY,GAAG,YAAYF,MAAjC;EACA,IAAMG,WAAW,GAAGH,MAAM,CAACI,OAAP,CAAe,IAAf,EAAqB,EAArB,IAA2B,IAA/C;EAEAhJ,IAAI,CAACzC,SAAL,CAAewD,UAAf,IAA6B,YAAkB;IAC7C,IAAIkI,SAAJ;IAD6C,mCAANhJ,IAAM;MAANA,IAAM;IAAA;IAE7C,IAAM3B,EAAE,GAAG2B,IAAI,CAAC4I,MAAM,CAAC3L,MAAP,GAAgB,CAAjB,CAAf;IACA,IAAM0D,YAAY,GAAG,IAArB;IAEA,IAAI,OAAOtC,EAAP,KAAc,UAAlB,EAA8B;MAC5B2K,SAAS,GAAG,qBAAkB;QAAA,mCAANhJ,IAAM;UAANA,IAAM;QAAA;QAAA,IACrB1B,GADqB,GACR0B,IADQ;UAChBxB,IADgB,GACRwB,IADQ;QAG5B,IAAI1B,GAAJ,EAAS;UACPqC,YAAY,CAACK,SAAb,CAAuBF,UAAvB,EAAmCxC,GAAnC;QACD,CAFD,MAEO;UACLqC,YAAY,CAACM,SAAb,CAAuBH,UAAvB,EAAmCgI,WAAnC,uCACGhI,UADH,EACgBtC,IADhB;QAGD;QAEDH,EAAE,CAAC4K,KAAH,CAAS,IAAT,EAAejJ,IAAf;MACD,CAZD;MAcAA,IAAI,CAACA,IAAI,CAAC/C,MAAL,GAAc,CAAf,CAAJ,GAAwB+L,SAAxB;IACD,CAhBD,MAgBO;MACLA,SAAS,GAAG,KAAZ;IACD;IAED,KAAK/H,SAAL,CAAeH,UAAf,EAA2B+H,YAA3B;IAEA,IAAIK,MAAJ;IAEA,IAAI;MACFA,MAAM,GAAGN,MAAM,CAACK,KAAP,CAAa,IAAb,EAAmBjJ,IAAnB,CAAT;MAEA,IAAI,CAACgJ,SAAL,EAAgB;QACd,KAAK/H,SAAL,CAAeH,UAAf,EAA2BgI,WAA3B,uCACGhI,UADH,EACgBoI,MADhB;MAGD;IACF,CARD,CAQE,OAAOC,KAAP,EAAc;MACdA,KAAK,CAACrI,UAAN,GAAmBA,UAAnB;MACA,KAAKE,SAAL,CAAeF,UAAf,EAA2BqI,KAA3B;IACD;IAED,OAAOD,MAAP;EACD,CA3CD;EA6CAnJ,IAAI,CAACzC,SAAL,CAAewD,UAAU,GAAG,OAA5B,IAAuC8H,MAAvC;AACD;AAED;;;;;;AAKAF,YAAY,CAAC,OAAD,EAAU,OAAV,EAAmB,UAASrK,EAAT,EAAa;EAC1C,IAAM+K,KAAK,GAAG,IAAIrJ,IAAJ,CAAS,IAAT,CAAd;EAEA,IAAI,0BAAc1B,EAAd,CAAJ,EAAuB;IACrBA,EAAE,CAACb,IAAH,CAAQ4L,KAAR,EAAe,IAAf,EAAqBA,KAArB;EACD;EAED,OAAOA,KAAP;AACD,CARW,CAAZ;AAUA;;;;;;AAKO,SAASC,YAAT,CAAsBvI,UAAtB,EAAkC8H,MAAlC,EAA0C;EAC/CF,YAAY,CAAC5H,UAAD,EAAa,QAAb,EAAuB8H,MAAvB,CAAZ;AACD;AAED;;;;;;;AAMAS,YAAY,CAAC,YAAD,EAAe,UAAShE,GAAT,EAAchH,EAAd,EAAkB;EAC3C,IAAI,OAAOgH,GAAP,KAAe,QAAnB,EAA6B;IAC3B,OAAO9D,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,sCAAtB,EAA8Da,EAA9D,CAAP;EACD;EAED,KAAKgD,WAAL,GAAmBgE,GAAnB;EAEA,IAAI,0BAAchH,EAAd,CAAJ,EAAuB;IACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;EACD;EAED,OAAO,IAAP;AACD,CAZW,CAAZ;AAcA;;;;;;;;;;;;AAWA6L,YAAY,CAAC,MAAD,EAAS,UAAS3E,CAAT,EAAYC,CAAZ,EAAexD,CAAf,EAAkBC,CAAlB,EAAqBkI,CAArB,EAAwBjL,EAAxB,EAA4B;EAC/C,IAAI,OAAOqG,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;IAClD,OAAOpD,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP;EACD;EAED,IAAI,OAAO8C,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;IAClD,OAAOG,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDa,EAAjD,CAAP;EACD;EAED,IAAI,OAAOiL,CAAP,KAAa,UAAjB,EAA6B;IAC3B,OAAO/H,kBAAW/D,IAAX,CAAgB,IAAhB,EAAsB,sBAAtB,EAA8Ca,EAA9C,CAAP;EACD;EAED,IAAM6K,MAAM,GAAG,iBAAK,IAAL,EAAWxE,CAAX,EAAcC,CAAd,EAAiBxD,CAAjB,EAAoBC,CAApB,EAAuBkI,CAAvB,CAAf;EAEA,IAAI,0BAAcjL,EAAd,CAAJ,EAAuB;IACrBA,EAAE,CAACb,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB0L,MAApB;EACD;EAED,OAAOA,MAAP;AACD,CApBW,CAAZ;AAsBA,IAAIK,OAAO,CAACC,GAAR,CAAYC,WAAZ,KAA4B,SAAhC,EAA2C;EACzC;;EACA;EACA,IAAIC,EAAJ;EAEA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,QAAOA,MAAP,0DAAOA,MAAP,OAAkB,QAAvD,EAAiE;IAC/DD,EAAE,GAAGC,MAAL;EACD;EAED,IAAI,OAAOC,IAAP,KAAgB,WAAhB,IAA+B,QAAOA,IAAP,0DAAOA,IAAP,OAAgB,QAAnD,EAA6D;IAC3DF,EAAE,GAAGE,IAAL;EACD;EAEDF,EAAE,CAAC3J,IAAH,GAAUA,IAAV;EACA2J,EAAE,CAAC5L,MAAH,GAAYA,MAAZ;AACD;eAIciC,I","names":["alphabet","maxHashLength","NaN","i","maxHash","anyBase","BIN","slice","Array","join","push","length","noop","isArrayBuffer","test","Object","prototype","toString","call","toLowerCase","indexOf","bufferFromArrayBuffer","arrayBuffer","buffer","Buffer","alloc","byteLength","view","Uint8Array","loadFromURL","options","cb","err","response","data","headers","url","location","isBuffer","msg","statusCode","Error","loadBufferFromPath","src","fs","readFile","match","isRawRGBAData","obj","width","height","Uint8ClampedArray","makeRGBABufferFromRGB","rgbaBuffer","allocUnsafe","j","emptyBitmap","Jimp","args","_this","MIME_PNG","write","path","getBase64","mime","getBuffer","getBufferAsync","getPixelColor","setPixelColor","jimpInstance","finish","evData","methodName","setTimeout","emitError","emitMulti","parseInt","w","h","_background","cssColorToHex","throwError","bitmap","writeUInt32BE","parseBitmap","original","from","_quality","_deflateLevel","_deflateStrategy","_filterType","_rgba","_originalMime","imageData","isRGBA","extraConstructor","__extraConstructors","find","c","Promise","resolve","reject","run","then","bool","eventName","assign","emit","getMIME","MIME","getExtension","createWriteStream","getType","pathObj","Path","parse","dir","mkdirp","sync","_this2","stream","on","end","AUTO","base","hash","pHash","ImagePHash","getHash","compareHash","currentHash","distance","x","y","edgeHandling","xi","yi","EDGE_EXTEND","Math","round","EDGE_WRAP","idx","getPixelIndex","hex","readUInt32BE","yIndex","xIndex","alpha","EventEmitter","addConstants","constants","entries","forEach","name","value","addJimpMethods","methods","composite","appendConstructorOption","read","image","create","rgbaToInt","r","g","b","a","pow","intToRGBA","rgba","floor","cssColor","Number","toHex8","limit255","n","max","min","diff","img1","img2","threshold","bmp1","bmp2","cloneQuiet","resize","numDiffPixels","percent","phash","hash1","hash2","compareHashes","colorDiff","rgba1","rgba2","maxVal","jimpEvMethod","evName","method","evNameBefore","evNameAfter","replace","wrappedCb","apply","result","error","clone","jimpEvChange","f","process","env","ENVIRONMENT","gl","window","self"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\core\\src\\index.js"],"sourcesContent":["import fs from 'fs';\nimport Path from 'path';\nimport EventEmitter from 'events';\n\nimport { isNodePattern, throwError, scan, scanIterator } from '@jimp/utils';\nimport anyBase from 'any-base';\nimport mkdirp from 'mkdirp';\nimport pixelMatch from 'pixelmatch';\nimport tinyColor from 'tinycolor2';\n\nimport ImagePHash from './modules/phash';\nimport request from './request';\n\nimport composite from './composite';\nimport promisify from './utils/promisify';\nimport * as MIME from './utils/mime';\nimport { parseBitmap, getBuffer, getBufferAsync } from './utils/image-bitmap';\nimport * as constants from './constants';\n\nconst alphabet =\n  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_';\n\n// an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\nconst maxHashLength = [NaN, NaN];\n\nfor (let i = 2; i < 65; i++) {\n  const maxHash = anyBase(anyBase.BIN, alphabet.slice(0, i))(\n    new Array(64 + 1).join('1')\n  );\n  maxHashLength.push(maxHash.length);\n}\n\n// no operation\nfunction noop() {}\n\n// error checking methods\n\nfunction isArrayBuffer(test) {\n  return (\n    Object.prototype.toString\n      .call(test)\n      .toLowerCase()\n      .indexOf('arraybuffer') > -1\n  );\n}\n\n// Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\nfunction bufferFromArrayBuffer(arrayBuffer) {\n  const buffer = Buffer.alloc(arrayBuffer.byteLength);\n  const view = new Uint8Array(arrayBuffer);\n\n  for (let i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n\n  return buffer;\n}\n\nfunction loadFromURL(options, cb) {\n  request(options, (err, response, data) => {\n    if (err) {\n      return cb(err);\n    }\n\n    if ('headers' in response && 'location' in response.headers) {\n      options.url = response.headers.location;\n      return loadFromURL(options, cb);\n    }\n\n    if (typeof data === 'object' && Buffer.isBuffer(data)) {\n      return cb(null, data);\n    }\n\n    const msg =\n      'Could not load Buffer from <' +\n      options.url +\n      '> ' +\n      '(HTTP: ' +\n      response.statusCode +\n      ')';\n\n    return new Error(msg);\n  });\n}\n\nfunction loadBufferFromPath(src, cb) {\n  if (\n    fs &&\n    typeof fs.readFile === 'function' &&\n    !src.match(/^(http|ftp)s?:\\/\\/./)\n  ) {\n    fs.readFile(src, cb);\n  } else {\n    loadFromURL({ url: src }, cb);\n  }\n}\n\nfunction isRawRGBAData(obj) {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    typeof obj.width === 'number' &&\n    typeof obj.height === 'number' &&\n    (Buffer.isBuffer(obj.data) ||\n      obj.data instanceof Uint8Array ||\n      (typeof Uint8ClampedArray === 'function' &&\n        obj.data instanceof Uint8ClampedArray)) &&\n    (obj.data.length === obj.width * obj.height * 4 ||\n      obj.data.length === obj.width * obj.height * 3)\n  );\n}\n\nfunction makeRGBABufferFromRGB(buffer) {\n  if (buffer.length % 3 !== 0) {\n    throw new Error('Buffer length is incorrect');\n  }\n\n  const rgbaBuffer = Buffer.allocUnsafe((buffer.length / 3) * 4);\n  let j = 0;\n\n  for (let i = 0; i < buffer.length; i++) {\n    rgbaBuffer[j] = buffer[i];\n\n    if ((i + 1) % 3 === 0) {\n      rgbaBuffer[++j] = 255;\n    }\n\n    j++;\n  }\n\n  return rgbaBuffer;\n}\n\nconst emptyBitmap = {\n  data: null,\n  width: null,\n  height: null\n};\n\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a url with options)\n * @param options { url, otherOptions}\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from another Jimp image or raw image data)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\nclass Jimp extends EventEmitter {\n  // An object representing a bitmap in memory, comprising:\n  //  - data: a buffer of the bitmap data\n  //  - width: the width of the image in pixels\n  //  - height: the height of the image in pixels\n  bitmap = emptyBitmap;\n\n  // Default colour to use for new pixels\n  _background = 0x00000000;\n\n  // Default MIME is PNG\n  _originalMime = Jimp.MIME_PNG;\n\n  // Exif data for the image\n  _exif = null;\n\n  // Whether Transparency supporting formats will be exported as RGB or RGBA\n  _rgba = true;\n\n  constructor(...args) {\n    super();\n\n    const jimpInstance = this;\n    let cb = noop;\n\n    if (isArrayBuffer(args[0])) {\n      args[0] = bufferFromArrayBuffer(args[0]);\n    }\n\n    function finish(...args) {\n      const [err] = args;\n      const evData = err || {};\n      evData.methodName = 'constructor';\n\n      setTimeout(() => {\n        // run on next tick.\n        if (err && cb === noop) {\n          jimpInstance.emitError('constructor', err);\n        } else if (!err) {\n          jimpInstance.emitMulti('constructor', 'initialized');\n        }\n\n        cb.call(jimpInstance, ...args);\n      }, 1);\n    }\n\n    if (\n      (typeof args[0] === 'number' && typeof args[1] === 'number') ||\n      (parseInt(args[0], 10) && parseInt(args[1], 10))\n    ) {\n      // create a new image\n      const w = parseInt(args[0], 10);\n      const h = parseInt(args[1], 10);\n      cb = args[2];\n\n      // with a hex color\n      if (typeof args[2] === 'number') {\n        this._background = args[2];\n        cb = args[3];\n      }\n\n      // with a css color\n      if (typeof args[2] === 'string') {\n        this._background = Jimp.cssColorToHex(args[2]);\n        cb = args[3];\n      }\n\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      this.bitmap = {\n        data: Buffer.alloc(w * h * 4),\n        width: w,\n        height: h\n      };\n\n      for (let i = 0; i < this.bitmap.data.length; i += 4) {\n        this.bitmap.data.writeUInt32BE(this._background, i);\n      }\n\n      finish(null, this);\n    } else if (typeof args[0] === 'object' && args[0].url) {\n      cb = args[1] || noop;\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      loadFromURL(args[0], (err, data) => {\n        if (err) {\n          return throwError.call(this, err, finish);\n        }\n\n        this.parseBitmap(data, args[0].url, finish);\n      });\n    } else if (args[0] instanceof Jimp) {\n      // clone an existing Jimp\n      const [original] = args;\n      cb = args[1];\n\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      this.bitmap = {\n        data: Buffer.from(original.bitmap.data),\n        width: original.bitmap.width,\n        height: original.bitmap.height\n      };\n\n      this._quality = original._quality;\n      this._deflateLevel = original._deflateLevel;\n      this._deflateStrategy = original._deflateStrategy;\n      this._filterType = original._filterType;\n      this._rgba = original._rgba;\n      this._background = original._background;\n      this._originalMime = original._originalMime;\n\n      finish(null, this);\n    } else if (isRawRGBAData(args[0])) {\n      const [imageData] = args;\n      cb = args[1] || noop;\n\n      const isRGBA =\n        imageData.width * imageData.height * 4 === imageData.data.length;\n      const buffer = isRGBA\n        ? Buffer.from(imageData.data)\n        : makeRGBABufferFromRGB(imageData.data);\n\n      this.bitmap = {\n        data: buffer,\n        width: imageData.width,\n        height: imageData.height\n      };\n\n      finish(null, this);\n    } else if (typeof args[0] === 'string') {\n      // read from a path\n      const path = args[0];\n      cb = args[1];\n\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      loadBufferFromPath(path, (err, data) => {\n        if (err) {\n          return throwError.call(this, err, finish);\n        }\n\n        this.parseBitmap(data, path, finish);\n      });\n    } else if (typeof args[0] === 'object' && Buffer.isBuffer(args[0])) {\n      // read from a buffer\n      const data = args[0];\n      cb = args[1];\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      this.parseBitmap(data, null, finish);\n    } else {\n      // Allow client libs to add new ways to build a Jimp object.\n      // Extra constructors must be added by `Jimp.appendConstructorOption()`\n      cb = args[args.length - 1];\n\n      if (typeof cb !== 'function') {\n        // TODO: try to solve the args after cb problem.\n        cb = args[args.length - 2];\n\n        if (typeof cb !== 'function') {\n          cb = noop;\n        }\n      }\n\n      const extraConstructor = Jimp.__extraConstructors.find(c =>\n        c.test(...args)\n      );\n\n      if (extraConstructor) {\n        new Promise((resolve, reject) =>\n          extraConstructor.run.call(this, resolve, reject, ...args)\n        )\n          .then(() => finish(null, this))\n          .catch(finish);\n      } else {\n        return throwError.call(\n          this,\n          'No matching constructor overloading was found. ' +\n            'Please see the docs for how to call the Jimp constructor.',\n          finish\n        );\n      }\n    }\n  }\n\n  /**\n   * Parse a bitmap with the loaded image types.\n   *\n   * @param {Buffer} data raw image data\n   * @param {string} path optional path to file\n   * @param {function(Error, Jimp)} finish (optional) a callback for when complete\n   * @memberof Jimp\n   */\n  parseBitmap(data, path, finish) {\n    parseBitmap.call(this, data, null, finish);\n  }\n\n  /**\n   * Sets the type of the image (RGB or RGBA) when saving in a format that supports transparency (default is RGBA)\n   * @param {boolean} bool A Boolean, true to use RGBA or false to use RGB\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  rgba(bool, cb) {\n    if (typeof bool !== 'boolean') {\n      return throwError.call(\n        this,\n        'bool must be a boolean, true for RGBA or false for RGB',\n        cb\n      );\n    }\n\n    this._rgba = bool;\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Emit for multiple listeners\n   * @param {string} methodName name of the method to emit an error for\n   * @param {string} eventName name of the eventName to emit an error for\n   * @param {object} data to emit\n   */\n  emitMulti(methodName, eventName, data = {}) {\n    data = Object.assign(data, { methodName, eventName });\n    this.emit('any', data);\n\n    if (methodName) {\n      this.emit(methodName, data);\n    }\n\n    this.emit(eventName, data);\n  }\n\n  emitError(methodName, err) {\n    this.emitMulti(methodName, 'error', err);\n  }\n\n  /**\n   * Get the current height of the image\n   * @return {number} height of the image\n   */\n  getHeight() {\n    return this.bitmap.height;\n  }\n\n  /**\n   * Get the current width of the image\n   * @return {number} width of the image\n   */\n  getWidth() {\n    return this.bitmap.width;\n  }\n\n  /**\n   * Nicely format Jimp object when sent to the console e.g. console.log(image)\n   * @returns {string} pretty printed\n   */\n  inspect() {\n    return (\n      '<Jimp ' +\n      (this.bitmap === emptyBitmap\n        ? 'pending...'\n        : this.bitmap.width + 'x' + this.bitmap.height) +\n      '>'\n    );\n  }\n\n  /**\n   * Nicely format Jimp object when converted to a string\n   * @returns {string} pretty printed\n   */\n  toString() {\n    return '[object Jimp]';\n  }\n\n  /**\n   * Returns the original MIME of the image (default: \"image/png\")\n   * @returns {string} the MIME\n   */\n  getMIME() {\n    const mime = this._originalMime || Jimp.MIME_PNG;\n\n    return mime;\n  }\n\n  /**\n   * Returns the appropriate file extension for the original MIME of the image (default: \"png\")\n   * @returns {string} the file extension\n   */\n  getExtension() {\n    const mime = this.getMIME();\n\n    return MIME.getExtension(mime);\n  }\n\n  /**\n   * Writes the image to a file\n   * @param {string} path a path to the destination file\n   * @param {function(Error, Jimp)} cb (optional) a function to call when the image is saved to disk\n   * @returns {Jimp} this for chaining of methods\n   */\n  write(path, cb) {\n    if (!fs || !fs.createWriteStream) {\n      throw new Error(\n        'Cant access the filesystem. You can use the getBase64 method.'\n      );\n    }\n\n    if (typeof path !== 'string') {\n      return throwError.call(this, 'path must be a string', cb);\n    }\n\n    if (typeof cb === 'undefined') {\n      cb = noop;\n    }\n\n    if (typeof cb !== 'function') {\n      return throwError.call(this, 'cb must be a function', cb);\n    }\n\n    const mime = MIME.getType(path) || this.getMIME();\n    const pathObj = Path.parse(path);\n\n    if (pathObj.dir) {\n      mkdirp.sync(pathObj.dir);\n    }\n\n    this.getBuffer(mime, (err, buffer) => {\n      if (err) {\n        return throwError.call(this, err, cb);\n      }\n\n      const stream = fs.createWriteStream(path);\n\n      stream\n        .on('open', () => {\n          stream.write(buffer);\n          stream.end();\n        })\n        .on('error', err => {\n          return throwError.call(this, err, cb);\n        });\n      stream.on('finish', () => {\n        cb.call(this, null, this);\n      });\n    });\n\n    return this;\n  }\n\n  writeAsync = path => promisify(this.write, this, path);\n\n  /**\n   * Converts the image to a base 64 string\n   * @param {string} mime the mime type of the image data to be created\n   * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n   * @returns {Jimp} this for chaining of methods\n   */\n  getBase64(mime, cb) {\n    if (mime === Jimp.AUTO) {\n      // allow auto MIME detection\n      mime = this.getMIME();\n    }\n\n    if (typeof mime !== 'string') {\n      return throwError.call(this, 'mime must be a string', cb);\n    }\n\n    if (typeof cb !== 'function') {\n      return throwError.call(this, 'cb must be a function', cb);\n    }\n\n    this.getBuffer(mime, function(err, data) {\n      if (err) {\n        return throwError.call(this, err, cb);\n      }\n\n      const src = 'data:' + mime + ';base64,' + data.toString('base64');\n      cb.call(this, null, src);\n    });\n\n    return this;\n  }\n\n  getBase64Async = mime => promisify(this.getBase64, this, mime);\n\n  /**\n   * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>. And pads the string. Can configure base.\n   * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {string} a string representing the hash\n   */\n  hash(base, cb) {\n    base = base || 64;\n\n    if (typeof base === 'function') {\n      cb = base;\n      base = 64;\n    }\n\n    if (typeof base !== 'number') {\n      return throwError.call(this, 'base must be a number', cb);\n    }\n\n    if (base < 2 || base > 64) {\n      return throwError.call(\n        this,\n        'base must be a number between 2 and 64',\n        cb\n      );\n    }\n\n    let hash = this.pHash();\n    hash = anyBase(anyBase.BIN, alphabet.slice(0, base))(hash);\n\n    while (hash.length < maxHashLength[base]) {\n      hash = '0' + hash; // pad out with leading zeros\n    }\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, hash);\n    }\n\n    return hash;\n  }\n\n  /**\n   * Calculates the perceptual hash\n   * @returns {number} the perceptual hash\n   */\n  pHash() {\n    const pHash = new ImagePHash();\n    return pHash.getHash(this);\n  }\n\n  /**\n   * Calculates the hamming distance of the current image and a hash based on their perceptual hash\n   * @param {hash} compareHash hash to compare to\n   * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n   */\n  distanceFromHash(compareHash) {\n    const pHash = new ImagePHash();\n    const currentHash = pHash.getHash(this);\n\n    return pHash.distance(currentHash, compareHash);\n  }\n\n  /**\n   * Converts the image to a buffer\n   * @param {string} mime the mime type of the image buffer to be created\n   * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n   * @returns {Jimp} this for chaining of methods\n   */\n  getBuffer = getBuffer;\n\n  getBufferAsync = getBufferAsync;\n\n  /**\n   * Returns the offset of a pixel in the bitmap buffer\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n   * @param {number} cb (optional) a callback for when complete\n   * @returns {number} the index of the pixel or -1 if not found\n   */\n  getPixelIndex(x, y, edgeHandling, cb) {\n    let xi;\n    let yi;\n\n    if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n      cb = edgeHandling;\n      edgeHandling = null;\n    }\n\n    if (!edgeHandling) {\n      edgeHandling = Jimp.EDGE_EXTEND;\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    xi = x;\n    yi = y;\n\n    if (edgeHandling === Jimp.EDGE_EXTEND) {\n      if (x < 0) xi = 0;\n      if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n      if (y < 0) yi = 0;\n      if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n    }\n\n    if (edgeHandling === Jimp.EDGE_WRAP) {\n      if (x < 0) {\n        xi = this.bitmap.width + x;\n      }\n\n      if (x >= this.bitmap.width) {\n        xi = x % this.bitmap.width;\n      }\n\n      if (y < 0) {\n        xi = this.bitmap.height + y;\n      }\n\n      if (y >= this.bitmap.height) {\n        yi = y % this.bitmap.height;\n      }\n    }\n\n    let i = (this.bitmap.width * yi + xi) << 2;\n\n    // if out of bounds index is -1\n    if (xi < 0 || xi >= this.bitmap.width) {\n      i = -1;\n    }\n\n    if (yi < 0 || yi >= this.bitmap.height) {\n      i = -1;\n    }\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, i);\n    }\n\n    return i;\n  }\n\n  /**\n   * Returns the hex colour value of a pixel\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {number} the color of the pixel\n   */\n  getPixelColor(x, y, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number')\n      return throwError.call(this, 'x and y must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const idx = this.getPixelIndex(x, y);\n    const hex = this.bitmap.data.readUInt32BE(idx);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, hex);\n    }\n\n    return hex;\n  }\n\n  getPixelColour = this.getPixelColor;\n\n  /**\n   * Returns the hex colour value of a pixel\n   * @param {number} hex color to set\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {number} the index of the pixel or -1 if not found\n   */\n  setPixelColor(hex, x, y, cb) {\n    if (\n      typeof hex !== 'number' ||\n      typeof x !== 'number' ||\n      typeof y !== 'number'\n    )\n      return throwError.call(this, 'hex, x and y must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const idx = this.getPixelIndex(x, y);\n    this.bitmap.data.writeUInt32BE(hex, idx);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n\n  setPixelColour = this.setPixelColor;\n\n  /**\n   * Determine if the image contains opaque pixels.\n   * @return {boolean} hasAlpha whether the image contains opaque pixels\n   */\n  hasAlpha() {\n    for (let yIndex = 0; yIndex < this.bitmap.height; yIndex++) {\n      for (let xIndex = 0; xIndex < this.bitmap.width; xIndex++) {\n        const idx = (this.bitmap.width * yIndex + xIndex) << 2;\n        const alpha = this.bitmap.data[idx + 3];\n\n        if (alpha !== 0xff) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Iterate scan through a region of the bitmap\n   * @param {number} x the x coordinate to begin the scan at\n   * @param {number} y the y coordinate to begin the scan at\n   * @param w the width of the scan region\n   * @param h the height of the scan region\n   * @returns {IterableIterator<{x: number, y: number, idx: number, image: Jimp}>}\n   */\n  scanIterator(x, y, w, h) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers');\n    }\n\n    if (typeof w !== 'number' || typeof h !== 'number') {\n      return throwError.call(this, 'w and h must be numbers');\n    }\n\n    return scanIterator(this, x, y, w, h);\n  }\n}\n\nexport function addConstants(constants, jimpInstance = Jimp) {\n  Object.entries(constants).forEach(([name, value]) => {\n    jimpInstance[name] = value;\n  });\n}\n\nexport function addJimpMethods(methods, jimpInstance = Jimp) {\n  Object.entries(methods).forEach(([name, value]) => {\n    jimpInstance.prototype[name] = value;\n  });\n}\n\naddConstants(constants);\naddJimpMethods({ composite });\n\nJimp.__extraConstructors = [];\n\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */\nJimp.appendConstructorOption = function(name, test, run) {\n  Jimp.__extraConstructors.push({ name, test, run });\n};\n\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */\nJimp.read = function(...args) {\n  return new Promise((resolve, reject) => {\n    new Jimp(...args, (err, image) => {\n      if (err) reject(err);\n      else resolve(image);\n    });\n  });\n};\n\nJimp.create = Jimp.read;\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */\nJimp.rgbaToInt = function(r, g, b, a, cb) {\n  if (\n    typeof r !== 'number' ||\n    typeof g !== 'number' ||\n    typeof b !== 'number' ||\n    typeof a !== 'number'\n  ) {\n    return throwError.call(this, 'r, g, b and a must be numbers', cb);\n  }\n\n  if (r < 0 || r > 255) {\n    return throwError.call(this, 'r must be between 0 and 255', cb);\n  }\n\n  if (g < 0 || g > 255) {\n    throwError.call(this, 'g must be between 0 and 255', cb);\n  }\n\n  if (b < 0 || b > 255) {\n    return throwError.call(this, 'b must be between 0 and 255', cb);\n  }\n\n  if (a < 0 || a > 255) {\n    return throwError.call(this, 'a must be between 0 and 255', cb);\n  }\n\n  r = Math.round(r);\n  b = Math.round(b);\n  g = Math.round(g);\n  a = Math.round(a);\n\n  const i =\n    r * Math.pow(256, 3) +\n    g * Math.pow(256, 2) +\n    b * Math.pow(256, 1) +\n    a * Math.pow(256, 0);\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, i);\n  }\n\n  return i;\n};\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */\nJimp.intToRGBA = function(i, cb) {\n  if (typeof i !== 'number') {\n    return throwError.call(this, 'i must be a number', cb);\n  }\n\n  const rgba = {};\n\n  rgba.r = Math.floor(i / Math.pow(256, 3));\n  rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n  rgba.b = Math.floor(\n    (i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) /\n      Math.pow(256, 1)\n  );\n  rgba.a = Math.floor(\n    (i -\n      rgba.r * Math.pow(256, 3) -\n      rgba.g * Math.pow(256, 2) -\n      rgba.b * Math.pow(256, 1)) /\n      Math.pow(256, 0)\n  );\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, rgba);\n  }\n\n  return rgba;\n};\n\n/**\n * Converts a css color (Hex, 8-digit (RGBA) Hex, RGB, RGBA, HSL, HSLA, HSV, HSVA, Named) to a hex number\n * @param {string} cssColor a number\n * @returns {number} a hex number representing a color\n */\nJimp.cssColorToHex = function(cssColor) {\n  cssColor = cssColor || 0; // 0, null, undefined, NaN\n\n  if (typeof cssColor === 'number') return Number(cssColor);\n\n  return parseInt(tinyColor(cssColor).toHex8(), 16);\n};\n\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */\nJimp.limit255 = function(n) {\n  n = Math.max(n, 0);\n  n = Math.min(n, 255);\n\n  return n;\n};\n\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */\nJimp.diff = function(img1, img2, threshold = 0.1) {\n  if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp))\n    return throwError.call(this, 'img1 and img2 must be an Jimp images');\n\n  const bmp1 = img1.bitmap;\n  const bmp2 = img2.bitmap;\n\n  if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n    if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n      // img1 is bigger\n      img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n    } else {\n      // img2 is bigger (or they are the same in area)\n      img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n    }\n  }\n\n  if (typeof threshold !== 'number' || threshold < 0 || threshold > 1) {\n    return throwError.call(this, 'threshold must be a number between 0 and 1');\n  }\n\n  const diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n\n  const numDiffPixels = pixelMatch(\n    bmp1.data,\n    bmp2.data,\n    diff.bitmap.data,\n    diff.bitmap.width,\n    diff.bitmap.height,\n    { threshold }\n  );\n\n  return {\n    percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n    image: diff\n  };\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.distance = function(img1, img2) {\n  const phash = new ImagePHash();\n  const hash1 = phash.getHash(img1);\n  const hash2 = phash.getHash(img2);\n\n  return phash.distance(hash1, hash2);\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {hash} hash1 a pHash\n * @param {hash} hash2 a pHash\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.compareHashes = function(hash1, hash2) {\n  const phash = new ImagePHash();\n\n  return phash.distance(hash1, hash2);\n};\n\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */\nJimp.colorDiff = function(rgba1, rgba2) {\n  const pow = n => Math.pow(n, 2);\n  const { max } = Math;\n  const maxVal = 255 * 255 * 3;\n\n  if (rgba1.a !== 0 && !rgba1.a) {\n    rgba1.a = 255;\n  }\n\n  if (rgba2.a !== 0 && !rgba2.a) {\n    rgba2.a = 255;\n  }\n\n  return (\n    (max(pow(rgba1.r - rgba2.r), pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)) +\n      max(pow(rgba1.g - rgba2.g), pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)) +\n      max(pow(rgba1.b - rgba2.b), pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a))) /\n    maxVal\n  );\n};\n\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */\nexport function jimpEvMethod(methodName, evName, method) {\n  const evNameBefore = 'before-' + evName;\n  const evNameAfter = evName.replace(/e$/, '') + 'ed';\n\n  Jimp.prototype[methodName] = function(...args) {\n    let wrappedCb;\n    const cb = args[method.length - 1];\n    const jimpInstance = this;\n\n    if (typeof cb === 'function') {\n      wrappedCb = function(...args) {\n        const [err, data] = args;\n\n        if (err) {\n          jimpInstance.emitError(methodName, err);\n        } else {\n          jimpInstance.emitMulti(methodName, evNameAfter, {\n            [methodName]: data\n          });\n        }\n\n        cb.apply(this, args);\n      };\n\n      args[args.length - 1] = wrappedCb;\n    } else {\n      wrappedCb = false;\n    }\n\n    this.emitMulti(methodName, evNameBefore);\n\n    let result;\n\n    try {\n      result = method.apply(this, args);\n\n      if (!wrappedCb) {\n        this.emitMulti(methodName, evNameAfter, {\n          [methodName]: result\n        });\n      }\n    } catch (error) {\n      error.methodName = methodName;\n      this.emitError(methodName, error);\n    }\n\n    return result;\n  };\n\n  Jimp.prototype[methodName + 'Quiet'] = method;\n}\n\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */\njimpEvMethod('clone', 'clone', function(cb) {\n  const clone = new Jimp(this);\n\n  if (isNodePattern(cb)) {\n    cb.call(clone, null, clone);\n  }\n\n  return clone;\n});\n\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */\nexport function jimpEvChange(methodName, method) {\n  jimpEvMethod(methodName, 'change', method);\n}\n\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('background', function(hex, cb) {\n  if (typeof hex !== 'number') {\n    return throwError.call(this, 'hex must be a hexadecimal rgba value', cb);\n  }\n\n  this._background = hex;\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n});\n\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('scan', function(x, y, w, h, f, cb) {\n  if (typeof x !== 'number' || typeof y !== 'number') {\n    return throwError.call(this, 'x and y must be numbers', cb);\n  }\n\n  if (typeof w !== 'number' || typeof h !== 'number') {\n    return throwError.call(this, 'w and h must be numbers', cb);\n  }\n\n  if (typeof f !== 'function') {\n    return throwError.call(this, 'f must be a function', cb);\n  }\n\n  const result = scan(this, x, y, w, h, f);\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, result);\n  }\n\n  return result;\n});\n\nif (process.env.ENVIRONMENT === 'BROWSER') {\n  // For use in a web browser or web worker\n  /* global self */\n  let gl;\n\n  if (typeof window !== 'undefined' && typeof window === 'object') {\n    gl = window;\n  }\n\n  if (typeof self !== 'undefined' && typeof self === 'object') {\n    gl = self;\n  }\n\n  gl.Jimp = Jimp;\n  gl.Buffer = Buffer;\n}\n\nexport { addType } from './utils/mime';\n\nexport default Jimp;\n"]},"metadata":{},"sourceType":"script"}