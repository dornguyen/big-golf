{"ast":null,"code":"\"use strict\";\n\n// JavaScript Image Resizer (c) 2012 - Grant Galitz\n// Released to public domain 29 July 2013: https://github.com/grantgalitz/JS-Image-Resizer/issues/4\nfunction Resize(widthOriginal, heightOriginal, targetWidth, targetHeight, blendAlpha, interpolationPass, resizeCallback) {\n  this.widthOriginal = Math.abs(Math.floor(widthOriginal) || 0);\n  this.heightOriginal = Math.abs(Math.floor(heightOriginal) || 0);\n  this.targetWidth = Math.abs(Math.floor(targetWidth) || 0);\n  this.targetHeight = Math.abs(Math.floor(targetHeight) || 0);\n  this.colorChannels = blendAlpha ? 4 : 3;\n  this.interpolationPass = Boolean(interpolationPass);\n  this.resizeCallback = typeof resizeCallback === 'function' ? resizeCallback : function () {};\n  this.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels;\n  this.originalWidthMultipliedByChannels = this.widthOriginal * this.colorChannels;\n  this.originalHeightMultipliedByChannels = this.heightOriginal * this.colorChannels;\n  this.widthPassResultSize = this.targetWidthMultipliedByChannels * this.heightOriginal;\n  this.finalResultSize = this.targetWidthMultipliedByChannels * this.targetHeight;\n  this.initialize();\n}\nResize.prototype.initialize = function () {\n  // Perform some checks:\n  if (this.widthOriginal > 0 && this.heightOriginal > 0 && this.targetWidth > 0 && this.targetHeight > 0) {\n    this.configurePasses();\n  } else {\n    throw new Error('Invalid settings specified for the resizer.');\n  }\n};\nResize.prototype.configurePasses = function () {\n  if (this.widthOriginal === this.targetWidth) {\n    // Bypass the width resizer pass:\n    this.resizeWidth = this.bypassResizer;\n  } else {\n    // Setup the width resizer pass:\n    this.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;\n    if (this.ratioWeightWidthPass < 1 && this.interpolationPass) {\n      this.initializeFirstPassBuffers(true);\n      this.resizeWidth = this.colorChannels === 4 ? this.resizeWidthInterpolatedRGBA : this.resizeWidthInterpolatedRGB;\n    } else {\n      this.initializeFirstPassBuffers(false);\n      this.resizeWidth = this.colorChannels === 4 ? this.resizeWidthRGBA : this.resizeWidthRGB;\n    }\n  }\n  if (this.heightOriginal === this.targetHeight) {\n    // Bypass the height resizer pass:\n    this.resizeHeight = this.bypassResizer;\n  } else {\n    // Setup the height resizer pass:\n    this.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;\n    if (this.ratioWeightHeightPass < 1 && this.interpolationPass) {\n      this.initializeSecondPassBuffers(true);\n      this.resizeHeight = this.resizeHeightInterpolated;\n    } else {\n      this.initializeSecondPassBuffers(false);\n      this.resizeHeight = this.colorChannels === 4 ? this.resizeHeightRGBA : this.resizeHeightRGB;\n    }\n  }\n};\nResize.prototype._resizeWidthInterpolatedRGBChannels = function (buffer, fourthChannel) {\n  var channelsNum = fourthChannel ? 4 : 3;\n  var ratioWeight = this.ratioWeightWidthPass;\n  var outputBuffer = this.widthBuffer;\n  var weight = 0;\n  var finalOffset = 0;\n  var pixelOffset = 0;\n  var firstWeight = 0;\n  var secondWeight = 0;\n  var targetPosition; // Handle for only one interpolation input being valid for start calculation:\n\n  for (targetPosition = 0; weight < 1 / 3; targetPosition += channelsNum, weight += ratioWeight) {\n    for (finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n      outputBuffer[finalOffset] = buffer[pixelOffset];\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n      if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n    }\n  } // Adjust for overshoot of the last pass's counter:\n\n  weight -= 1 / 3;\n  var interpolationWidthSourceReadStop;\n  for (interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += channelsNum, weight += ratioWeight) {\n    // Calculate weightings:\n    secondWeight = weight % 1;\n    firstWeight = 1 - secondWeight; // Interpolate:\n\n    for (finalOffset = targetPosition, pixelOffset = Math.floor(weight) * channelsNum; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n      outputBuffer[finalOffset + 0] = buffer[pixelOffset + 0] * firstWeight + buffer[pixelOffset + channelsNum + 0] * secondWeight;\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1] * firstWeight + buffer[pixelOffset + channelsNum + 1] * secondWeight;\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2] * firstWeight + buffer[pixelOffset + channelsNum + 2] * secondWeight;\n      if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3] * firstWeight + buffer[pixelOffset + channelsNum + 3] * secondWeight;\n    }\n  } // Handle for only one interpolation input being valid for end calculation:\n\n  for (interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - channelsNum; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += channelsNum) {\n    for (finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {\n      outputBuffer[finalOffset] = buffer[pixelOffset];\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n      if (fourthChannel) outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n    }\n  }\n  return outputBuffer;\n};\nResize.prototype._resizeWidthRGBChannels = function (buffer, fourthChannel) {\n  var channelsNum = fourthChannel ? 4 : 3;\n  var ratioWeight = this.ratioWeightWidthPass;\n  var ratioWeightDivisor = 1 / ratioWeight;\n  var nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - channelsNum + 1;\n  var nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - channelsNum + 1;\n  var output = this.outputWidthWorkBench;\n  var outputBuffer = this.widthBuffer;\n  var trustworthyColorsCount = this.outputWidthWorkBenchOpaquePixelsCount;\n  var weight = 0;\n  var amountToNext = 0;\n  var actualPosition = 0;\n  var currentPosition = 0;\n  var line = 0;\n  var pixelOffset = 0;\n  var outputOffset = 0;\n  var multiplier = 1;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  do {\n    for (line = 0; line < this.originalHeightMultipliedByChannels;) {\n      output[line++] = 0;\n      output[line++] = 0;\n      output[line++] = 0;\n      if (fourthChannel) {\n        output[line++] = 0;\n        trustworthyColorsCount[line / channelsNum - 1] = 0;\n      }\n    }\n    weight = ratioWeight;\n    do {\n      amountToNext = 1 + actualPosition - currentPosition;\n      multiplier = Math.min(weight, amountToNext);\n      for (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {\n        r = buffer[pixelOffset];\n        g = buffer[++pixelOffset];\n        b = buffer[++pixelOffset];\n        a = fourthChannel ? buffer[++pixelOffset] : 255; // Ignore RGB values if pixel is completely transparent\n\n        output[line++] += (a ? r : 0) * multiplier;\n        output[line++] += (a ? g : 0) * multiplier;\n        output[line++] += (a ? b : 0) * multiplier;\n        if (fourthChannel) {\n          output[line++] += a * multiplier;\n          trustworthyColorsCount[line / channelsNum - 1] += a ? multiplier : 0;\n        }\n      }\n      if (weight >= amountToNext) {\n        actualPosition += channelsNum;\n        currentPosition = actualPosition;\n        weight -= amountToNext;\n      } else {\n        currentPosition += weight;\n        break;\n      }\n    } while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);\n    for (line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth) {\n      weight = fourthChannel ? trustworthyColorsCount[line / channelsNum] : 1;\n      multiplier = fourthChannel ? weight ? 1 / weight : 0 : ratioWeightDivisor;\n      outputBuffer[pixelOffset] = output[line++] * multiplier;\n      outputBuffer[++pixelOffset] = output[line++] * multiplier;\n      outputBuffer[++pixelOffset] = output[line++] * multiplier;\n      if (fourthChannel) outputBuffer[++pixelOffset] = output[line++] * ratioWeightDivisor;\n    }\n    outputOffset += channelsNum;\n  } while (outputOffset < this.targetWidthMultipliedByChannels);\n  return outputBuffer;\n};\nResize.prototype._resizeHeightRGBChannels = function (buffer, fourthChannel) {\n  var ratioWeight = this.ratioWeightHeightPass;\n  var ratioWeightDivisor = 1 / ratioWeight;\n  var output = this.outputHeightWorkBench;\n  var outputBuffer = this.heightBuffer;\n  var trustworthyColorsCount = this.outputHeightWorkBenchOpaquePixelsCount;\n  var weight = 0;\n  var amountToNext = 0;\n  var actualPosition = 0;\n  var currentPosition = 0;\n  var pixelOffset = 0;\n  var outputOffset = 0;\n  var caret = 0;\n  var multiplier = 1;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  do {\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n      output[pixelOffset++] = 0;\n      output[pixelOffset++] = 0;\n      output[pixelOffset++] = 0;\n      if (fourthChannel) {\n        output[pixelOffset++] = 0;\n        trustworthyColorsCount[pixelOffset / 4 - 1] = 0;\n      }\n    }\n    weight = ratioWeight;\n    do {\n      amountToNext = 1 + actualPosition - currentPosition;\n      multiplier = Math.min(weight, amountToNext);\n      caret = actualPosition;\n      for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n        r = buffer[caret++];\n        g = buffer[caret++];\n        b = buffer[caret++];\n        a = fourthChannel ? buffer[caret++] : 255; // Ignore RGB values if pixel is completely transparent\n\n        output[pixelOffset++] += (a ? r : 0) * multiplier;\n        output[pixelOffset++] += (a ? g : 0) * multiplier;\n        output[pixelOffset++] += (a ? b : 0) * multiplier;\n        if (fourthChannel) {\n          output[pixelOffset++] += a * multiplier;\n          trustworthyColorsCount[pixelOffset / 4 - 1] += a ? multiplier : 0;\n        }\n      }\n      if (weight >= amountToNext) {\n        actualPosition = caret;\n        currentPosition = actualPosition;\n        weight -= amountToNext;\n      } else {\n        currentPosition += weight;\n        break;\n      }\n    } while (weight > 0 && actualPosition < this.widthPassResultSize);\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n      weight = fourthChannel ? trustworthyColorsCount[pixelOffset / 4] : 1;\n      multiplier = fourthChannel ? weight ? 1 / weight : 0 : ratioWeightDivisor;\n      outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n      outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n      outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);\n      if (fourthChannel) {\n        outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);\n      }\n    }\n  } while (outputOffset < this.finalResultSize);\n  return outputBuffer;\n};\nResize.prototype.resizeWidthInterpolatedRGB = function (buffer) {\n  return this._resizeWidthInterpolatedRGBChannels(buffer, false);\n};\nResize.prototype.resizeWidthInterpolatedRGBA = function (buffer) {\n  return this._resizeWidthInterpolatedRGBChannels(buffer, true);\n};\nResize.prototype.resizeWidthRGB = function (buffer) {\n  return this._resizeWidthRGBChannels(buffer, false);\n};\nResize.prototype.resizeWidthRGBA = function (buffer) {\n  return this._resizeWidthRGBChannels(buffer, true);\n};\nResize.prototype.resizeHeightInterpolated = function (buffer) {\n  var ratioWeight = this.ratioWeightHeightPass;\n  var outputBuffer = this.heightBuffer;\n  var weight = 0;\n  var finalOffset = 0;\n  var pixelOffset = 0;\n  var pixelOffsetAccumulated = 0;\n  var pixelOffsetAccumulated2 = 0;\n  var firstWeight = 0;\n  var secondWeight = 0;\n  var interpolationHeightSourceReadStop; // Handle for only one interpolation input being valid for start calculation:\n\n  for (; weight < 1 / 3; weight += ratioWeight) {\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {\n      outputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);\n    }\n  } // Adjust for overshoot of the last pass's counter:\n\n  weight -= 1 / 3;\n  for (interpolationHeightSourceReadStop = this.heightOriginal - 1; weight < interpolationHeightSourceReadStop; weight += ratioWeight) {\n    // Calculate weightings:\n    secondWeight = weight % 1;\n    firstWeight = 1 - secondWeight; // Interpolate:\n\n    pixelOffsetAccumulated = Math.floor(weight) * this.targetWidthMultipliedByChannels;\n    pixelOffsetAccumulated2 = pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;\n    for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n      outputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++] * firstWeight + buffer[pixelOffsetAccumulated2++] * secondWeight);\n    }\n  } // Handle for only one interpolation input being valid for end calculation:\n\n  while (finalOffset < this.finalResultSize) {\n    for (pixelOffset = 0, pixelOffsetAccumulated = interpolationHeightSourceReadStop * this.targetWidthMultipliedByChannels; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {\n      outputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++]);\n    }\n  }\n  return outputBuffer;\n};\nResize.prototype.resizeHeightRGB = function (buffer) {\n  return this._resizeHeightRGBChannels(buffer, false);\n};\nResize.prototype.resizeHeightRGBA = function (buffer) {\n  return this._resizeHeightRGBChannels(buffer, true);\n};\nResize.prototype.resize = function (buffer) {\n  this.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));\n};\nResize.prototype.bypassResizer = function (buffer) {\n  // Just return the buffer passed:\n  return buffer;\n};\nResize.prototype.initializeFirstPassBuffers = function (BILINEARAlgo) {\n  // Initialize the internal width pass buffers:\n  this.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);\n  if (!BILINEARAlgo) {\n    this.outputWidthWorkBench = this.generateFloatBuffer(this.originalHeightMultipliedByChannels);\n    if (this.colorChannels > 3) {\n      this.outputWidthWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.heightOriginal);\n    }\n  }\n};\nResize.prototype.initializeSecondPassBuffers = function (BILINEARAlgo) {\n  // Initialize the internal height pass buffers:\n  this.heightBuffer = this.generateUint8Buffer(this.finalResultSize);\n  if (!BILINEARAlgo) {\n    this.outputHeightWorkBench = this.generateFloatBuffer(this.targetWidthMultipliedByChannels);\n    if (this.colorChannels > 3) {\n      this.outputHeightWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.targetWidth);\n    }\n  }\n};\nResize.prototype.generateFloatBuffer = function (bufferLength) {\n  // Generate a float32 typed array buffer:\n  try {\n    return new Float32Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\nResize.prototype.generateFloat64Buffer = function (bufferLength) {\n  // Generate a float64 typed array buffer:\n  try {\n    return new Float64Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\nResize.prototype.generateUint8Buffer = function (bufferLength) {\n  // Generate a uint8 typed array buffer:\n  try {\n    return new Uint8Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\nmodule.exports = Resize;","map":{"version":3,"mappings":"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","names":["Resize","widthOriginal","heightOriginal","targetWidth","targetHeight","blendAlpha","interpolationPass","resizeCallback","Math","abs","floor","colorChannels","Boolean","targetWidthMultipliedByChannels","originalWidthMultipliedByChannels","originalHeightMultipliedByChannels","widthPassResultSize","finalResultSize","initialize","prototype","configurePasses","Error","resizeWidth","bypassResizer","ratioWeightWidthPass","initializeFirstPassBuffers","resizeWidthInterpolatedRGBA","resizeWidthInterpolatedRGB","resizeWidthRGBA","resizeWidthRGB","resizeHeight","ratioWeightHeightPass","initializeSecondPassBuffers","resizeHeightInterpolated","resizeHeightRGBA","resizeHeightRGB","_resizeWidthInterpolatedRGBChannels","buffer","fourthChannel","channelsNum","ratioWeight","outputBuffer","widthBuffer","weight","finalOffset","pixelOffset","firstWeight","secondWeight","targetPosition","interpolationWidthSourceReadStop","_resizeWidthRGBChannels","ratioWeightDivisor","nextLineOffsetOriginalWidth","nextLineOffsetTargetWidth","output","outputWidthWorkBench","trustworthyColorsCount","outputWidthWorkBenchOpaquePixelsCount","amountToNext","actualPosition","currentPosition","line","outputOffset","multiplier","r","g","b","a","min","_resizeHeightRGBChannels","outputHeightWorkBench","heightBuffer","outputHeightWorkBenchOpaquePixelsCount","caret","round","pixelOffsetAccumulated","pixelOffsetAccumulated2","interpolationHeightSourceReadStop","resize","BILINEARAlgo","generateFloatBuffer","generateFloat64Buffer","generateUint8Buffer","bufferLength","Float32Array","error","Float64Array","Uint8Array","module","exports"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\plugin-resize\\src\\modules\\resize.js"],"sourcesContent":["// JavaScript Image Resizer (c) 2012 - Grant Galitz\n// Released to public domain 29 July 2013: https://github.com/grantgalitz/JS-Image-Resizer/issues/4\n\nfunction Resize(\n  widthOriginal,\n  heightOriginal,\n  targetWidth,\n  targetHeight,\n  blendAlpha,\n  interpolationPass,\n  resizeCallback\n) {\n  this.widthOriginal = Math.abs(Math.floor(widthOriginal) || 0);\n  this.heightOriginal = Math.abs(Math.floor(heightOriginal) || 0);\n  this.targetWidth = Math.abs(Math.floor(targetWidth) || 0);\n  this.targetHeight = Math.abs(Math.floor(targetHeight) || 0);\n  this.colorChannels = blendAlpha ? 4 : 3;\n  this.interpolationPass = Boolean(interpolationPass);\n  this.resizeCallback =\n    typeof resizeCallback === 'function' ? resizeCallback : function() {};\n\n  this.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels;\n  this.originalWidthMultipliedByChannels =\n    this.widthOriginal * this.colorChannels;\n  this.originalHeightMultipliedByChannels =\n    this.heightOriginal * this.colorChannels;\n  this.widthPassResultSize =\n    this.targetWidthMultipliedByChannels * this.heightOriginal;\n  this.finalResultSize =\n    this.targetWidthMultipliedByChannels * this.targetHeight;\n  this.initialize();\n}\n\nResize.prototype.initialize = function() {\n  // Perform some checks:\n  if (\n    this.widthOriginal > 0 &&\n    this.heightOriginal > 0 &&\n    this.targetWidth > 0 &&\n    this.targetHeight > 0\n  ) {\n    this.configurePasses();\n  } else {\n    throw new Error('Invalid settings specified for the resizer.');\n  }\n};\n\nResize.prototype.configurePasses = function() {\n  if (this.widthOriginal === this.targetWidth) {\n    // Bypass the width resizer pass:\n    this.resizeWidth = this.bypassResizer;\n  } else {\n    // Setup the width resizer pass:\n    this.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;\n    if (this.ratioWeightWidthPass < 1 && this.interpolationPass) {\n      this.initializeFirstPassBuffers(true);\n      this.resizeWidth =\n        this.colorChannels === 4\n          ? this.resizeWidthInterpolatedRGBA\n          : this.resizeWidthInterpolatedRGB;\n    } else {\n      this.initializeFirstPassBuffers(false);\n      this.resizeWidth =\n        this.colorChannels === 4 ? this.resizeWidthRGBA : this.resizeWidthRGB;\n    }\n  }\n\n  if (this.heightOriginal === this.targetHeight) {\n    // Bypass the height resizer pass:\n    this.resizeHeight = this.bypassResizer;\n  } else {\n    // Setup the height resizer pass:\n    this.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;\n    if (this.ratioWeightHeightPass < 1 && this.interpolationPass) {\n      this.initializeSecondPassBuffers(true);\n      this.resizeHeight = this.resizeHeightInterpolated;\n    } else {\n      this.initializeSecondPassBuffers(false);\n      this.resizeHeight =\n        this.colorChannels === 4 ? this.resizeHeightRGBA : this.resizeHeightRGB;\n    }\n  }\n};\n\nResize.prototype._resizeWidthInterpolatedRGBChannels = function(\n  buffer,\n  fourthChannel\n) {\n  const channelsNum = fourthChannel ? 4 : 3;\n  const ratioWeight = this.ratioWeightWidthPass;\n  const outputBuffer = this.widthBuffer;\n\n  let weight = 0;\n  let finalOffset = 0;\n  let pixelOffset = 0;\n  let firstWeight = 0;\n  let secondWeight = 0;\n  let targetPosition;\n\n  // Handle for only one interpolation input being valid for start calculation:\n  for (\n    targetPosition = 0;\n    weight < 1 / 3;\n    targetPosition += channelsNum, weight += ratioWeight\n  ) {\n    for (\n      finalOffset = targetPosition, pixelOffset = 0;\n      finalOffset < this.widthPassResultSize;\n      pixelOffset += this.originalWidthMultipliedByChannels,\n        finalOffset += this.targetWidthMultipliedByChannels\n    ) {\n      outputBuffer[finalOffset] = buffer[pixelOffset];\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n      if (fourthChannel)\n        outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n    }\n  }\n\n  // Adjust for overshoot of the last pass's counter:\n  weight -= 1 / 3;\n  let interpolationWidthSourceReadStop;\n\n  for (\n    interpolationWidthSourceReadStop = this.widthOriginal - 1;\n    weight < interpolationWidthSourceReadStop;\n    targetPosition += channelsNum, weight += ratioWeight\n  ) {\n    // Calculate weightings:\n    secondWeight = weight % 1;\n    firstWeight = 1 - secondWeight;\n    // Interpolate:\n    for (\n      finalOffset = targetPosition,\n        pixelOffset = Math.floor(weight) * channelsNum;\n      finalOffset < this.widthPassResultSize;\n      pixelOffset += this.originalWidthMultipliedByChannels,\n        finalOffset += this.targetWidthMultipliedByChannels\n    ) {\n      outputBuffer[finalOffset + 0] =\n        buffer[pixelOffset + 0] * firstWeight +\n        buffer[pixelOffset + channelsNum + 0] * secondWeight;\n      outputBuffer[finalOffset + 1] =\n        buffer[pixelOffset + 1] * firstWeight +\n        buffer[pixelOffset + channelsNum + 1] * secondWeight;\n      outputBuffer[finalOffset + 2] =\n        buffer[pixelOffset + 2] * firstWeight +\n        buffer[pixelOffset + channelsNum + 2] * secondWeight;\n      if (fourthChannel)\n        outputBuffer[finalOffset + 3] =\n          buffer[pixelOffset + 3] * firstWeight +\n          buffer[pixelOffset + channelsNum + 3] * secondWeight;\n    }\n  }\n\n  // Handle for only one interpolation input being valid for end calculation:\n  for (\n    interpolationWidthSourceReadStop =\n      this.originalWidthMultipliedByChannels - channelsNum;\n    targetPosition < this.targetWidthMultipliedByChannels;\n    targetPosition += channelsNum\n  ) {\n    for (\n      finalOffset = targetPosition,\n        pixelOffset = interpolationWidthSourceReadStop;\n      finalOffset < this.widthPassResultSize;\n      pixelOffset += this.originalWidthMultipliedByChannels,\n        finalOffset += this.targetWidthMultipliedByChannels\n    ) {\n      outputBuffer[finalOffset] = buffer[pixelOffset];\n      outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n      outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n      if (fourthChannel)\n        outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n    }\n  }\n\n  return outputBuffer;\n};\n\nResize.prototype._resizeWidthRGBChannels = function(buffer, fourthChannel) {\n  const channelsNum = fourthChannel ? 4 : 3;\n  const ratioWeight = this.ratioWeightWidthPass;\n  const ratioWeightDivisor = 1 / ratioWeight;\n  const nextLineOffsetOriginalWidth =\n    this.originalWidthMultipliedByChannels - channelsNum + 1;\n  const nextLineOffsetTargetWidth =\n    this.targetWidthMultipliedByChannels - channelsNum + 1;\n  const output = this.outputWidthWorkBench;\n  const outputBuffer = this.widthBuffer;\n  const trustworthyColorsCount = this.outputWidthWorkBenchOpaquePixelsCount;\n\n  let weight = 0;\n  let amountToNext = 0;\n  let actualPosition = 0;\n  let currentPosition = 0;\n  let line = 0;\n  let pixelOffset = 0;\n  let outputOffset = 0;\n  let multiplier = 1;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  let a = 0;\n\n  do {\n    for (line = 0; line < this.originalHeightMultipliedByChannels; ) {\n      output[line++] = 0;\n      output[line++] = 0;\n      output[line++] = 0;\n      if (fourthChannel) {\n        output[line++] = 0;\n        trustworthyColorsCount[line / channelsNum - 1] = 0;\n      }\n    }\n\n    weight = ratioWeight;\n\n    do {\n      amountToNext = 1 + actualPosition - currentPosition;\n      multiplier = Math.min(weight, amountToNext);\n      for (\n        line = 0, pixelOffset = actualPosition;\n        line < this.originalHeightMultipliedByChannels;\n        pixelOffset += nextLineOffsetOriginalWidth\n      ) {\n        r = buffer[pixelOffset];\n        g = buffer[++pixelOffset];\n        b = buffer[++pixelOffset];\n        a = fourthChannel ? buffer[++pixelOffset] : 255;\n        // Ignore RGB values if pixel is completely transparent\n        output[line++] += (a ? r : 0) * multiplier;\n        output[line++] += (a ? g : 0) * multiplier;\n        output[line++] += (a ? b : 0) * multiplier;\n        if (fourthChannel) {\n          output[line++] += a * multiplier;\n          trustworthyColorsCount[line / channelsNum - 1] += a ? multiplier : 0;\n        }\n      }\n\n      if (weight >= amountToNext) {\n        actualPosition += channelsNum;\n        currentPosition = actualPosition;\n        weight -= amountToNext;\n      } else {\n        currentPosition += weight;\n        break;\n      }\n    } while (\n      weight > 0 &&\n      actualPosition < this.originalWidthMultipliedByChannels\n    );\n\n    for (\n      line = 0, pixelOffset = outputOffset;\n      line < this.originalHeightMultipliedByChannels;\n      pixelOffset += nextLineOffsetTargetWidth\n    ) {\n      weight = fourthChannel ? trustworthyColorsCount[line / channelsNum] : 1;\n      multiplier = fourthChannel\n        ? weight\n          ? 1 / weight\n          : 0\n        : ratioWeightDivisor;\n      outputBuffer[pixelOffset] = output[line++] * multiplier;\n      outputBuffer[++pixelOffset] = output[line++] * multiplier;\n      outputBuffer[++pixelOffset] = output[line++] * multiplier;\n      if (fourthChannel)\n        outputBuffer[++pixelOffset] = output[line++] * ratioWeightDivisor;\n    }\n\n    outputOffset += channelsNum;\n  } while (outputOffset < this.targetWidthMultipliedByChannels);\n\n  return outputBuffer;\n};\n\nResize.prototype._resizeHeightRGBChannels = function(buffer, fourthChannel) {\n  const ratioWeight = this.ratioWeightHeightPass;\n  const ratioWeightDivisor = 1 / ratioWeight;\n  const output = this.outputHeightWorkBench;\n  const outputBuffer = this.heightBuffer;\n  const trustworthyColorsCount = this.outputHeightWorkBenchOpaquePixelsCount;\n\n  let weight = 0;\n  let amountToNext = 0;\n  let actualPosition = 0;\n  let currentPosition = 0;\n  let pixelOffset = 0;\n  let outputOffset = 0;\n  let caret = 0;\n  let multiplier = 1;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  let a = 0;\n\n  do {\n    for (\n      pixelOffset = 0;\n      pixelOffset < this.targetWidthMultipliedByChannels;\n\n    ) {\n      output[pixelOffset++] = 0;\n      output[pixelOffset++] = 0;\n      output[pixelOffset++] = 0;\n\n      if (fourthChannel) {\n        output[pixelOffset++] = 0;\n        trustworthyColorsCount[pixelOffset / 4 - 1] = 0;\n      }\n    }\n\n    weight = ratioWeight;\n\n    do {\n      amountToNext = 1 + actualPosition - currentPosition;\n      multiplier = Math.min(weight, amountToNext);\n      caret = actualPosition;\n\n      for (\n        pixelOffset = 0;\n        pixelOffset < this.targetWidthMultipliedByChannels;\n\n      ) {\n        r = buffer[caret++];\n        g = buffer[caret++];\n        b = buffer[caret++];\n        a = fourthChannel ? buffer[caret++] : 255;\n        // Ignore RGB values if pixel is completely transparent\n        output[pixelOffset++] += (a ? r : 0) * multiplier;\n        output[pixelOffset++] += (a ? g : 0) * multiplier;\n        output[pixelOffset++] += (a ? b : 0) * multiplier;\n\n        if (fourthChannel) {\n          output[pixelOffset++] += a * multiplier;\n          trustworthyColorsCount[pixelOffset / 4 - 1] += a ? multiplier : 0;\n        }\n      }\n\n      if (weight >= amountToNext) {\n        actualPosition = caret;\n        currentPosition = actualPosition;\n        weight -= amountToNext;\n      } else {\n        currentPosition += weight;\n        break;\n      }\n    } while (weight > 0 && actualPosition < this.widthPassResultSize);\n\n    for (\n      pixelOffset = 0;\n      pixelOffset < this.targetWidthMultipliedByChannels;\n\n    ) {\n      weight = fourthChannel ? trustworthyColorsCount[pixelOffset / 4] : 1;\n      multiplier = fourthChannel\n        ? weight\n          ? 1 / weight\n          : 0\n        : ratioWeightDivisor;\n      outputBuffer[outputOffset++] = Math.round(\n        output[pixelOffset++] * multiplier\n      );\n      outputBuffer[outputOffset++] = Math.round(\n        output[pixelOffset++] * multiplier\n      );\n      outputBuffer[outputOffset++] = Math.round(\n        output[pixelOffset++] * multiplier\n      );\n\n      if (fourthChannel) {\n        outputBuffer[outputOffset++] = Math.round(\n          output[pixelOffset++] * ratioWeightDivisor\n        );\n      }\n    }\n  } while (outputOffset < this.finalResultSize);\n\n  return outputBuffer;\n};\n\nResize.prototype.resizeWidthInterpolatedRGB = function(buffer) {\n  return this._resizeWidthInterpolatedRGBChannels(buffer, false);\n};\n\nResize.prototype.resizeWidthInterpolatedRGBA = function(buffer) {\n  return this._resizeWidthInterpolatedRGBChannels(buffer, true);\n};\n\nResize.prototype.resizeWidthRGB = function(buffer) {\n  return this._resizeWidthRGBChannels(buffer, false);\n};\n\nResize.prototype.resizeWidthRGBA = function(buffer) {\n  return this._resizeWidthRGBChannels(buffer, true);\n};\n\nResize.prototype.resizeHeightInterpolated = function(buffer) {\n  const ratioWeight = this.ratioWeightHeightPass;\n  const outputBuffer = this.heightBuffer;\n\n  let weight = 0;\n  let finalOffset = 0;\n  let pixelOffset = 0;\n  let pixelOffsetAccumulated = 0;\n  let pixelOffsetAccumulated2 = 0;\n  let firstWeight = 0;\n  let secondWeight = 0;\n  let interpolationHeightSourceReadStop;\n\n  // Handle for only one interpolation input being valid for start calculation:\n  for (; weight < 1 / 3; weight += ratioWeight) {\n    for (\n      pixelOffset = 0;\n      pixelOffset < this.targetWidthMultipliedByChannels;\n\n    ) {\n      outputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);\n    }\n  }\n\n  // Adjust for overshoot of the last pass's counter:\n  weight -= 1 / 3;\n\n  for (\n    interpolationHeightSourceReadStop = this.heightOriginal - 1;\n    weight < interpolationHeightSourceReadStop;\n    weight += ratioWeight\n  ) {\n    // Calculate weightings:\n    secondWeight = weight % 1;\n    firstWeight = 1 - secondWeight;\n    // Interpolate:\n    pixelOffsetAccumulated =\n      Math.floor(weight) * this.targetWidthMultipliedByChannels;\n    pixelOffsetAccumulated2 =\n      pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;\n    for (\n      pixelOffset = 0;\n      pixelOffset < this.targetWidthMultipliedByChannels;\n      ++pixelOffset\n    ) {\n      outputBuffer[finalOffset++] = Math.round(\n        buffer[pixelOffsetAccumulated++] * firstWeight +\n          buffer[pixelOffsetAccumulated2++] * secondWeight\n      );\n    }\n  }\n\n  // Handle for only one interpolation input being valid for end calculation:\n  while (finalOffset < this.finalResultSize) {\n    for (\n      pixelOffset = 0,\n        pixelOffsetAccumulated =\n          interpolationHeightSourceReadStop *\n          this.targetWidthMultipliedByChannels;\n      pixelOffset < this.targetWidthMultipliedByChannels;\n      ++pixelOffset\n    ) {\n      outputBuffer[finalOffset++] = Math.round(\n        buffer[pixelOffsetAccumulated++]\n      );\n    }\n  }\n\n  return outputBuffer;\n};\n\nResize.prototype.resizeHeightRGB = function(buffer) {\n  return this._resizeHeightRGBChannels(buffer, false);\n};\n\nResize.prototype.resizeHeightRGBA = function(buffer) {\n  return this._resizeHeightRGBChannels(buffer, true);\n};\n\nResize.prototype.resize = function(buffer) {\n  this.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));\n};\n\nResize.prototype.bypassResizer = function(buffer) {\n  // Just return the buffer passed:\n  return buffer;\n};\n\nResize.prototype.initializeFirstPassBuffers = function(BILINEARAlgo) {\n  // Initialize the internal width pass buffers:\n  this.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);\n\n  if (!BILINEARAlgo) {\n    this.outputWidthWorkBench = this.generateFloatBuffer(\n      this.originalHeightMultipliedByChannels\n    );\n\n    if (this.colorChannels > 3) {\n      this.outputWidthWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(\n        this.heightOriginal\n      );\n    }\n  }\n};\n\nResize.prototype.initializeSecondPassBuffers = function(BILINEARAlgo) {\n  // Initialize the internal height pass buffers:\n  this.heightBuffer = this.generateUint8Buffer(this.finalResultSize);\n\n  if (!BILINEARAlgo) {\n    this.outputHeightWorkBench = this.generateFloatBuffer(\n      this.targetWidthMultipliedByChannels\n    );\n\n    if (this.colorChannels > 3) {\n      this.outputHeightWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(\n        this.targetWidth\n      );\n    }\n  }\n};\n\nResize.prototype.generateFloatBuffer = function(bufferLength) {\n  // Generate a float32 typed array buffer:\n  try {\n    return new Float32Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\n\nResize.prototype.generateFloat64Buffer = function(bufferLength) {\n  // Generate a float64 typed array buffer:\n  try {\n    return new Float64Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\n\nResize.prototype.generateUint8Buffer = function(bufferLength) {\n  // Generate a uint8 typed array buffer:\n  try {\n    return new Uint8Array(bufferLength);\n  } catch (error) {\n    return [];\n  }\n};\n\nmodule.exports = Resize;\n"]},"metadata":{},"sourceType":"script"}