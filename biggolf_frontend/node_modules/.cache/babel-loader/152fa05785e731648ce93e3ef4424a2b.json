{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _utils = require(\"@jimp/utils\");\nvar _resize = _interopRequireDefault(require(\"./modules/resize\"));\nvar _resize2 = _interopRequireDefault(require(\"./modules/resize2\"));\nvar _default = function _default() {\n  return {\n    constants: {\n      RESIZE_NEAREST_NEIGHBOR: 'nearestNeighbor',\n      RESIZE_BILINEAR: 'bilinearInterpolation',\n      RESIZE_BICUBIC: 'bicubicInterpolation',\n      RESIZE_HERMITE: 'hermiteInterpolation',\n      RESIZE_BEZIER: 'bezierInterpolation'\n    },\n    \"class\": {\n      /**\n       * Resizes the image to a set width and height using a 2-pass bilinear algorithm\n       * @param {number} w the width to resize the image to (or Jimp.AUTO)\n       * @param {number} h the height to resize the image to (or Jimp.AUTO)\n       * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      resize: function resize(w, h, mode, cb) {\n        if (typeof w !== 'number' || typeof h !== 'number') {\n          return _utils.throwError.call(this, 'w and h must be numbers', cb);\n        }\n        if (typeof mode === 'function' && typeof cb === 'undefined') {\n          cb = mode;\n          mode = null;\n        }\n        if (w === this.constructor.AUTO && h === this.constructor.AUTO) {\n          return _utils.throwError.call(this, 'w and h cannot both be set to auto', cb);\n        }\n        if (w === this.constructor.AUTO) {\n          w = this.bitmap.width * (h / this.bitmap.height);\n        }\n        if (h === this.constructor.AUTO) {\n          h = this.bitmap.height * (w / this.bitmap.width);\n        }\n        if (w < 0 || h < 0) {\n          return _utils.throwError.call(this, 'w and h must be positive numbers', cb);\n        } // round inputs\n\n        w = Math.round(w);\n        h = Math.round(h);\n        if (typeof _resize2[\"default\"][mode] === 'function') {\n          var dst = {\n            data: Buffer.alloc(w * h * 4),\n            width: w,\n            height: h\n          };\n          _resize2[\"default\"][mode](this.bitmap, dst);\n          this.bitmap = dst;\n        } else {\n          var image = this;\n          var resize = new _resize[\"default\"](this.bitmap.width, this.bitmap.height, w, h, true, true, function (buffer) {\n            image.bitmap.data = Buffer.from(buffer);\n            image.bitmap.width = w;\n            image.bitmap.height = h;\n          });\n          resize.resize(this.bitmap.data);\n        }\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n        return this;\n      }\n    }\n  };\n};\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["constants","RESIZE_NEAREST_NEIGHBOR","RESIZE_BILINEAR","RESIZE_BICUBIC","RESIZE_HERMITE","RESIZE_BEZIER","resize","w","h","mode","cb","throwError","call","constructor","AUTO","bitmap","width","height","Math","round","Resize2","dst","data","Buffer","alloc","image","Resize","from","buffer"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\plugin-resize\\src\\index.js"],"sourcesContent":["import { throwError, isNodePattern } from '@jimp/utils';\n\nimport Resize from './modules/resize';\nimport Resize2 from './modules/resize2';\n\nexport default () => ({\n  constants: {\n    RESIZE_NEAREST_NEIGHBOR: 'nearestNeighbor',\n    RESIZE_BILINEAR: 'bilinearInterpolation',\n    RESIZE_BICUBIC: 'bicubicInterpolation',\n    RESIZE_HERMITE: 'hermiteInterpolation',\n    RESIZE_BEZIER: 'bezierInterpolation'\n  },\n\n  class: {\n    /**\n     * Resizes the image to a set width and height using a 2-pass bilinear algorithm\n     * @param {number} w the width to resize the image to (or Jimp.AUTO)\n     * @param {number} h the height to resize the image to (or Jimp.AUTO)\n     * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    resize(w, h, mode, cb) {\n      if (typeof w !== 'number' || typeof h !== 'number') {\n        return throwError.call(this, 'w and h must be numbers', cb);\n      }\n\n      if (typeof mode === 'function' && typeof cb === 'undefined') {\n        cb = mode;\n        mode = null;\n      }\n\n      if (w === this.constructor.AUTO && h === this.constructor.AUTO) {\n        return throwError.call(this, 'w and h cannot both be set to auto', cb);\n      }\n\n      if (w === this.constructor.AUTO) {\n        w = this.bitmap.width * (h / this.bitmap.height);\n      }\n\n      if (h === this.constructor.AUTO) {\n        h = this.bitmap.height * (w / this.bitmap.width);\n      }\n\n      if (w < 0 || h < 0) {\n        return throwError.call(this, 'w and h must be positive numbers', cb);\n      }\n\n      // round inputs\n      w = Math.round(w);\n      h = Math.round(h);\n\n      if (typeof Resize2[mode] === 'function') {\n        const dst = {\n          data: Buffer.alloc(w * h * 4),\n          width: w,\n          height: h\n        };\n        Resize2[mode](this.bitmap, dst);\n        this.bitmap = dst;\n      } else {\n        const image = this;\n        const resize = new Resize(\n          this.bitmap.width,\n          this.bitmap.height,\n          w,\n          h,\n          true,\n          true,\n          buffer => {\n            image.bitmap.data = Buffer.from(buffer);\n            image.bitmap.width = w;\n            image.bitmap.height = h;\n          }\n        );\n        resize.resize(this.bitmap.data);\n      }\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}