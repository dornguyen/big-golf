{"ast":null,"code":"var xhr = require('xhr');\nvar noop = function () {};\nvar parseASCII = require('parse-bmfont-ascii');\nvar parseXML = require('parse-bmfont-xml');\nvar readBinary = require('parse-bmfont-binary');\nvar isBinaryFormat = require('./lib/is-binary');\nvar xtend = require('xtend');\nvar xml2 = function hasXML2() {\n  return self.XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest();\n}();\nmodule.exports = function (opt, cb) {\n  cb = typeof cb === 'function' ? cb : noop;\n  if (typeof opt === 'string') opt = {\n    uri: opt\n  };else if (!opt) opt = {};\n  var expectBinary = opt.binary;\n  if (expectBinary) opt = getBinaryOpts(opt);\n  xhr(opt, function (err, res, body) {\n    if (err) return cb(err);\n    if (!/^2/.test(res.statusCode)) return cb(new Error('http status code: ' + res.statusCode));\n    if (!body) return cb(new Error('no body result'));\n    var binary = false;\n\n    //if the response type is an array buffer,\n    //we need to convert it into a regular Buffer object\n    if (isArrayBuffer(body)) {\n      var array = new Uint8Array(body);\n      body = Buffer.from(array, 'binary');\n    }\n\n    //now check the string/Buffer response\n    //and see if it has a binary BMF header\n    if (isBinaryFormat(body)) {\n      binary = true;\n      //if we have a string, turn it into a Buffer\n      if (typeof body === 'string') body = Buffer.from(body, 'binary');\n    }\n\n    //we are not parsing a binary format, just ASCII/XML/etc\n    if (!binary) {\n      //might still be a buffer if responseType is 'arraybuffer'\n      if (Buffer.isBuffer(body)) body = body.toString(opt.encoding);\n      body = body.trim();\n    }\n    var result;\n    try {\n      var type = res.headers['content-type'];\n      if (binary) result = readBinary(body);else if (/json/.test(type) || body.charAt(0) === '{') result = JSON.parse(body);else if (/xml/.test(type) || body.charAt(0) === '<') result = parseXML(body);else result = parseASCII(body);\n    } catch (e) {\n      cb(new Error('error parsing font ' + e.message));\n      cb = noop;\n    }\n    cb(null, result);\n  });\n};\nfunction isArrayBuffer(arr) {\n  var str = Object.prototype.toString;\n  return str.call(arr) === '[object ArrayBuffer]';\n}\nfunction getBinaryOpts(opt) {\n  //IE10+ and other modern browsers support array buffers\n  if (xml2) return xtend(opt, {\n    responseType: 'arraybuffer'\n  });\n  if (typeof self.XMLHttpRequest === 'undefined') throw new Error('your browser does not support XHR loading');\n\n  //IE9 and XML1 browsers could still use an override\n  var req = new self.XMLHttpRequest();\n  req.overrideMimeType('text/plain; charset=x-user-defined');\n  return xtend({\n    xhr: req\n  }, opt);\n}","map":{"version":3,"names":["xhr","require","noop","parseASCII","parseXML","readBinary","isBinaryFormat","xtend","xml2","hasXML2","self","XMLHttpRequest","module","exports","opt","cb","uri","expectBinary","binary","getBinaryOpts","err","res","body","test","statusCode","Error","isArrayBuffer","array","Uint8Array","Buffer","from","isBuffer","toString","encoding","trim","result","type","headers","charAt","JSON","parse","e","message","arr","str","Object","prototype","call","responseType","req","overrideMimeType"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/load-bmfont/browser.js"],"sourcesContent":["var xhr = require('xhr')\nvar noop = function(){}\nvar parseASCII = require('parse-bmfont-ascii')\nvar parseXML = require('parse-bmfont-xml')\nvar readBinary = require('parse-bmfont-binary')\nvar isBinaryFormat = require('./lib/is-binary')\nvar xtend = require('xtend')\n\nvar xml2 = (function hasXML2() {\n  return self.XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest\n})()\n\nmodule.exports = function(opt, cb) {\n  cb = typeof cb === 'function' ? cb : noop\n\n  if (typeof opt === 'string')\n    opt = { uri: opt }\n  else if (!opt)\n    opt = {}\n\n  var expectBinary = opt.binary\n  if (expectBinary)\n    opt = getBinaryOpts(opt)\n\n  xhr(opt, function(err, res, body) {\n    if (err)\n      return cb(err)\n    if (!/^2/.test(res.statusCode))\n      return cb(new Error('http status code: '+res.statusCode))\n    if (!body)\n      return cb(new Error('no body result'))\n\n    var binary = false \n\n    //if the response type is an array buffer,\n    //we need to convert it into a regular Buffer object\n    if (isArrayBuffer(body)) {\n      var array = new Uint8Array(body)\n      body = Buffer.from(array, 'binary')\n    }\n\n    //now check the string/Buffer response\n    //and see if it has a binary BMF header\n    if (isBinaryFormat(body)) {\n      binary = true\n      //if we have a string, turn it into a Buffer\n      if (typeof body === 'string') \n        body = Buffer.from(body, 'binary')\n    } \n\n    //we are not parsing a binary format, just ASCII/XML/etc\n    if (!binary) {\n      //might still be a buffer if responseType is 'arraybuffer'\n      if (Buffer.isBuffer(body))\n        body = body.toString(opt.encoding)\n      body = body.trim()\n    }\n\n    var result\n    try {\n      var type = res.headers['content-type']\n      if (binary)\n        result = readBinary(body)\n      else if (/json/.test(type) || body.charAt(0) === '{')\n        result = JSON.parse(body)\n      else if (/xml/.test(type)  || body.charAt(0) === '<')\n        result = parseXML(body)\n      else\n        result = parseASCII(body)\n    } catch (e) {\n      cb(new Error('error parsing font '+e.message))\n      cb = noop\n    }\n    cb(null, result)\n  })\n}\n\nfunction isArrayBuffer(arr) {\n  var str = Object.prototype.toString\n  return str.call(arr) === '[object ArrayBuffer]'\n}\n\nfunction getBinaryOpts(opt) {\n  //IE10+ and other modern browsers support array buffers\n  if (xml2)\n    return xtend(opt, { responseType: 'arraybuffer' })\n  \n  if (typeof self.XMLHttpRequest === 'undefined')\n    throw new Error('your browser does not support XHR loading')\n\n  //IE9 and XML1 browsers could still use an override\n  var req = new self.XMLHttpRequest()\n  req.overrideMimeType('text/plain; charset=x-user-defined')\n  return xtend({\n    xhr: req\n  }, opt)\n}\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AACxB,IAAIC,IAAI,GAAG,YAAU,CAAC,CAAC;AACvB,IAAIC,UAAU,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC9C,IAAIG,QAAQ,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAC1C,IAAII,UAAU,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AAC/C,IAAIK,cAAc,GAAGL,OAAO,CAAC,iBAAiB,CAAC;AAC/C,IAAIM,KAAK,GAAGN,OAAO,CAAC,OAAO,CAAC;AAE5B,IAAIO,IAAI,GAAI,SAASC,OAAO,GAAG;EAC7B,OAAOC,IAAI,CAACC,cAAc,IAAI,iBAAiB,IAAI,IAAIA,cAAc;AACvE,CAAC,EAAG;AAEJC,MAAM,CAACC,OAAO,GAAG,UAASC,GAAG,EAAEC,EAAE,EAAE;EACjCA,EAAE,GAAG,OAAOA,EAAE,KAAK,UAAU,GAAGA,EAAE,GAAGb,IAAI;EAEzC,IAAI,OAAOY,GAAG,KAAK,QAAQ,EACzBA,GAAG,GAAG;IAAEE,GAAG,EAAEF;EAAI,CAAC,MACf,IAAI,CAACA,GAAG,EACXA,GAAG,GAAG,CAAC,CAAC;EAEV,IAAIG,YAAY,GAAGH,GAAG,CAACI,MAAM;EAC7B,IAAID,YAAY,EACdH,GAAG,GAAGK,aAAa,CAACL,GAAG,CAAC;EAE1Bd,GAAG,CAACc,GAAG,EAAE,UAASM,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IAChC,IAAIF,GAAG,EACL,OAAOL,EAAE,CAACK,GAAG,CAAC;IAChB,IAAI,CAAC,IAAI,CAACG,IAAI,CAACF,GAAG,CAACG,UAAU,CAAC,EAC5B,OAAOT,EAAE,CAAC,IAAIU,KAAK,CAAC,oBAAoB,GAACJ,GAAG,CAACG,UAAU,CAAC,CAAC;IAC3D,IAAI,CAACF,IAAI,EACP,OAAOP,EAAE,CAAC,IAAIU,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAExC,IAAIP,MAAM,GAAG,KAAK;;IAElB;IACA;IACA,IAAIQ,aAAa,CAACJ,IAAI,CAAC,EAAE;MACvB,IAAIK,KAAK,GAAG,IAAIC,UAAU,CAACN,IAAI,CAAC;MAChCA,IAAI,GAAGO,MAAM,CAACC,IAAI,CAACH,KAAK,EAAE,QAAQ,CAAC;IACrC;;IAEA;IACA;IACA,IAAIrB,cAAc,CAACgB,IAAI,CAAC,EAAE;MACxBJ,MAAM,GAAG,IAAI;MACb;MACA,IAAI,OAAOI,IAAI,KAAK,QAAQ,EAC1BA,IAAI,GAAGO,MAAM,CAACC,IAAI,CAACR,IAAI,EAAE,QAAQ,CAAC;IACtC;;IAEA;IACA,IAAI,CAACJ,MAAM,EAAE;MACX;MACA,IAAIW,MAAM,CAACE,QAAQ,CAACT,IAAI,CAAC,EACvBA,IAAI,GAAGA,IAAI,CAACU,QAAQ,CAAClB,GAAG,CAACmB,QAAQ,CAAC;MACpCX,IAAI,GAAGA,IAAI,CAACY,IAAI,EAAE;IACpB;IAEA,IAAIC,MAAM;IACV,IAAI;MACF,IAAIC,IAAI,GAAGf,GAAG,CAACgB,OAAO,CAAC,cAAc,CAAC;MACtC,IAAInB,MAAM,EACRiB,MAAM,GAAG9B,UAAU,CAACiB,IAAI,CAAC,MACtB,IAAI,MAAM,CAACC,IAAI,CAACa,IAAI,CAAC,IAAId,IAAI,CAACgB,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAClDH,MAAM,GAAGI,IAAI,CAACC,KAAK,CAAClB,IAAI,CAAC,MACtB,IAAI,KAAK,CAACC,IAAI,CAACa,IAAI,CAAC,IAAKd,IAAI,CAACgB,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAClDH,MAAM,GAAG/B,QAAQ,CAACkB,IAAI,CAAC,MAEvBa,MAAM,GAAGhC,UAAU,CAACmB,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAOmB,CAAC,EAAE;MACV1B,EAAE,CAAC,IAAIU,KAAK,CAAC,qBAAqB,GAACgB,CAAC,CAACC,OAAO,CAAC,CAAC;MAC9C3B,EAAE,GAAGb,IAAI;IACX;IACAa,EAAE,CAAC,IAAI,EAAEoB,MAAM,CAAC;EAClB,CAAC,CAAC;AACJ,CAAC;AAED,SAAST,aAAa,CAACiB,GAAG,EAAE;EAC1B,IAAIC,GAAG,GAAGC,MAAM,CAACC,SAAS,CAACd,QAAQ;EACnC,OAAOY,GAAG,CAACG,IAAI,CAACJ,GAAG,CAAC,KAAK,sBAAsB;AACjD;AAEA,SAASxB,aAAa,CAACL,GAAG,EAAE;EAC1B;EACA,IAAIN,IAAI,EACN,OAAOD,KAAK,CAACO,GAAG,EAAE;IAAEkC,YAAY,EAAE;EAAc,CAAC,CAAC;EAEpD,IAAI,OAAOtC,IAAI,CAACC,cAAc,KAAK,WAAW,EAC5C,MAAM,IAAIc,KAAK,CAAC,2CAA2C,CAAC;;EAE9D;EACA,IAAIwB,GAAG,GAAG,IAAIvC,IAAI,CAACC,cAAc,EAAE;EACnCsC,GAAG,CAACC,gBAAgB,CAAC,oCAAoC,CAAC;EAC1D,OAAO3C,KAAK,CAAC;IACXP,GAAG,EAAEiD;EACP,CAAC,EAAEnC,GAAG,CAAC;AACT"},"metadata":{},"sourceType":"script"}