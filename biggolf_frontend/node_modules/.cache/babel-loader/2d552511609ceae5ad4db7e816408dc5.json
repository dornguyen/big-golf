{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _tinycolor = _interopRequireDefault(require(\"tinycolor2\"));\nvar _utils = require(\"@jimp/utils\");\nfunction applyKernel(im, kernel, x, y) {\n  var value = [0, 0, 0];\n  var size = (kernel.length - 1) / 2;\n  for (var kx = 0; kx < kernel.length; kx += 1) {\n    for (var ky = 0; ky < kernel[kx].length; ky += 1) {\n      var idx = im.getPixelIndex(x + kx - size, y + ky - size);\n      value[0] += im.bitmap.data[idx] * kernel[kx][ky];\n      value[1] += im.bitmap.data[idx + 1] * kernel[kx][ky];\n      value[2] += im.bitmap.data[idx + 2] * kernel[kx][ky];\n    }\n  }\n  return value;\n}\nvar isDef = function isDef(v) {\n  return typeof v !== 'undefined' && v !== null;\n};\nfunction greyscale(cb) {\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    var grey = parseInt(0.2126 * this.bitmap.data[idx] + 0.7152 * this.bitmap.data[idx + 1] + 0.0722 * this.bitmap.data[idx + 2], 10);\n    this.bitmap.data[idx] = grey;\n    this.bitmap.data[idx + 1] = grey;\n    this.bitmap.data[idx + 2] = grey;\n  });\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n}\nfunction mix(clr, clr2) {\n  var p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n  return {\n    r: (clr2.r - clr.r) * (p / 100) + clr.r,\n    g: (clr2.g - clr.g) * (p / 100) + clr.g,\n    b: (clr2.b - clr.b) * (p / 100) + clr.b\n  };\n}\nfunction colorFn(actions, cb) {\n  var _this = this;\n  if (!actions || !Array.isArray(actions)) {\n    return _utils.throwError.call(this, 'actions must be an array', cb);\n  }\n  actions = actions.map(function (action) {\n    if (action.apply === 'xor' || action.apply === 'mix') {\n      action.params[0] = (0, _tinycolor[\"default\"])(action.params[0]).toRgb();\n    }\n    return action;\n  });\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    var clr = {\n      r: _this.bitmap.data[idx],\n      g: _this.bitmap.data[idx + 1],\n      b: _this.bitmap.data[idx + 2]\n    };\n    var colorModifier = function colorModifier(i, amount) {\n      return _this.constructor.limit255(clr[i] + amount);\n    };\n    actions.forEach(function (action) {\n      if (action.apply === 'mix') {\n        clr = mix(clr, action.params[0], action.params[1]);\n      } else if (action.apply === 'tint') {\n        clr = mix(clr, {\n          r: 255,\n          g: 255,\n          b: 255\n        }, action.params[0]);\n      } else if (action.apply === 'shade') {\n        clr = mix(clr, {\n          r: 0,\n          g: 0,\n          b: 0\n        }, action.params[0]);\n      } else if (action.apply === 'xor') {\n        clr = {\n          r: clr.r ^ action.params[0].r,\n          g: clr.g ^ action.params[0].g,\n          b: clr.b ^ action.params[0].b\n        };\n      } else if (action.apply === 'red') {\n        clr.r = colorModifier('r', action.params[0]);\n      } else if (action.apply === 'green') {\n        clr.g = colorModifier('g', action.params[0]);\n      } else if (action.apply === 'blue') {\n        clr.b = colorModifier('b', action.params[0]);\n      } else {\n        var _clr;\n        if (action.apply === 'hue') {\n          action.apply = 'spin';\n        }\n        clr = (0, _tinycolor[\"default\"])(clr);\n        if (!clr[action.apply]) {\n          return _utils.throwError.call(_this, 'action ' + action.apply + ' not supported', cb);\n        }\n        clr = (_clr = clr)[action.apply].apply(_clr, (0, _toConsumableArray2[\"default\"])(action.params)).toRgb();\n      }\n    });\n    _this.bitmap.data[idx] = clr.r;\n    _this.bitmap.data[idx + 1] = clr.g;\n    _this.bitmap.data[idx + 2] = clr.b;\n  });\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n  return this;\n}\nvar _default = function _default() {\n  return {\n    /**\n     * Adjusts the brightness of the image\n     * @param {number} val the amount to adjust the brightness, a number between -1 and +1\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    brightness: function brightness(val, cb) {\n      if (typeof val !== 'number') {\n        return _utils.throwError.call(this, 'val must be numbers', cb);\n      }\n      if (val < -1 || val > +1) {\n        return _utils.throwError.call(this, 'val must be a number between -1 and +1', cb);\n      }\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        if (val < 0.0) {\n          this.bitmap.data[idx] = this.bitmap.data[idx] * (1 + val);\n          this.bitmap.data[idx + 1] = this.bitmap.data[idx + 1] * (1 + val);\n          this.bitmap.data[idx + 2] = this.bitmap.data[idx + 2] * (1 + val);\n        } else {\n          this.bitmap.data[idx] = this.bitmap.data[idx] + (255 - this.bitmap.data[idx]) * val;\n          this.bitmap.data[idx + 1] = this.bitmap.data[idx + 1] + (255 - this.bitmap.data[idx + 1]) * val;\n          this.bitmap.data[idx + 2] = this.bitmap.data[idx + 2] + (255 - this.bitmap.data[idx + 2]) * val;\n        }\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Adjusts the contrast of the image\n     * @param {number} val the amount to adjust the contrast, a number between -1 and +1\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    contrast: function contrast(val, cb) {\n      if (typeof val !== 'number') {\n        return _utils.throwError.call(this, 'val must be numbers', cb);\n      }\n      if (val < -1 || val > +1) {\n        return _utils.throwError.call(this, 'val must be a number between -1 and +1', cb);\n      }\n      var factor = (val + 1) / (1 - val);\n      function adjust(value) {\n        value = Math.floor(factor * (value - 127) + 127);\n        return value < 0 ? 0 : value > 255 ? 255 : value;\n      }\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx] = adjust(this.bitmap.data[idx]);\n        this.bitmap.data[idx + 1] = adjust(this.bitmap.data[idx + 1]);\n        this.bitmap.data[idx + 2] = adjust(this.bitmap.data[idx + 2]);\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Apply a posterize effect\n     * @param {number} n the amount to adjust the contrast, minimum threshold is two\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    posterize: function posterize(n, cb) {\n      if (typeof n !== 'number') {\n        return _utils.throwError.call(this, 'n must be numbers', cb);\n      }\n      if (n < 2) {\n        n = 2;\n      } // minimum of 2 levels\n\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx] = Math.floor(this.bitmap.data[idx] / 255 * (n - 1)) / (n - 1) * 255;\n        this.bitmap.data[idx + 1] = Math.floor(this.bitmap.data[idx + 1] / 255 * (n - 1)) / (n - 1) * 255;\n        this.bitmap.data[idx + 2] = Math.floor(this.bitmap.data[idx + 2] / 255 * (n - 1)) / (n - 1) * 255;\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Removes colour from the image using ITU Rec 709 luminance values\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    greyscale: greyscale,\n    // Alias of greyscale for our American friends\n    grayscale: greyscale,\n    /**\n     * Multiplies the opacity of each pixel by a factor between 0 and 1\n     * @param {number} f A number, the factor by which to multiply the opacity of each pixel\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    opacity: function opacity(f, cb) {\n      if (typeof f !== 'number') return _utils.throwError.call(this, 'f must be a number', cb);\n      if (f < 0 || f > 1) return _utils.throwError.call(this, 'f must be a number from 0 to 1', cb);\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var v = this.bitmap.data[idx + 3] * f;\n        this.bitmap.data[idx + 3] = v;\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Applies a sepia tone to the image\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    sepia: function sepia(cb) {\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var red = this.bitmap.data[idx];\n        var green = this.bitmap.data[idx + 1];\n        var blue = this.bitmap.data[idx + 2];\n        red = red * 0.393 + green * 0.769 + blue * 0.189;\n        green = red * 0.349 + green * 0.686 + blue * 0.168;\n        blue = red * 0.272 + green * 0.534 + blue * 0.131;\n        this.bitmap.data[idx] = red < 255 ? red : 255;\n        this.bitmap.data[idx + 1] = green < 255 ? green : 255;\n        this.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Fades each pixel by a factor between 0 and 1\n     * @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    fade: function fade(f, cb) {\n      if (typeof f !== 'number') {\n        return _utils.throwError.call(this, 'f must be a number', cb);\n      }\n      if (f < 0 || f > 1) {\n        return _utils.throwError.call(this, 'f must be a number from 0 to 1', cb);\n      } // this method is an alternative to opacity (which may be deprecated)\n\n      this.opacity(1 - f);\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Adds each element of the image to its local neighbors, weighted by the kernel\n     * @param {array} kernel a matrix to weight the neighbors sum\n     * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    convolution: function convolution(kernel, edgeHandling, cb) {\n      if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n        cb = edgeHandling;\n        edgeHandling = null;\n      }\n      if (!edgeHandling) {\n        edgeHandling = this.constructor.EDGE_EXTEND;\n      }\n      var newData = Buffer.from(this.bitmap.data);\n      var kRows = kernel.length;\n      var kCols = kernel[0].length;\n      var rowEnd = Math.floor(kRows / 2);\n      var colEnd = Math.floor(kCols / 2);\n      var rowIni = -rowEnd;\n      var colIni = -colEnd;\n      var weight;\n      var rSum;\n      var gSum;\n      var bSum;\n      var ri;\n      var gi;\n      var bi;\n      var xi;\n      var yi;\n      var idxi;\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        bSum = 0;\n        gSum = 0;\n        rSum = 0;\n        for (var row = rowIni; row <= rowEnd; row++) {\n          for (var col = colIni; col <= colEnd; col++) {\n            xi = x + col;\n            yi = y + row;\n            weight = kernel[row + rowEnd][col + colEnd];\n            idxi = this.getPixelIndex(xi, yi, edgeHandling);\n            if (idxi === -1) {\n              bi = 0;\n              gi = 0;\n              ri = 0;\n            } else {\n              ri = this.bitmap.data[idxi + 0];\n              gi = this.bitmap.data[idxi + 1];\n              bi = this.bitmap.data[idxi + 2];\n            }\n            rSum += weight * ri;\n            gSum += weight * gi;\n            bSum += weight * bi;\n          }\n        }\n        if (rSum < 0) {\n          rSum = 0;\n        }\n        if (gSum < 0) {\n          gSum = 0;\n        }\n        if (bSum < 0) {\n          bSum = 0;\n        }\n        if (rSum > 255) {\n          rSum = 255;\n        }\n        if (gSum > 255) {\n          gSum = 255;\n        }\n        if (bSum > 255) {\n          bSum = 255;\n        }\n        newData[idx + 0] = rSum;\n        newData[idx + 1] = gSum;\n        newData[idx + 2] = bSum;\n      });\n      this.bitmap.data = newData;\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Set the alpha channel on every pixel to fully opaque\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    opaque: function opaque(cb) {\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx + 3] = 255;\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Pixelates the image or a region\n     * @param {number} size the size of the pixels\n     * @param {number} x (optional) the x position of the region to pixelate\n     * @param {number} y (optional) the y position of the region to pixelate\n     * @param {number} w (optional) the width of the region to pixelate\n     * @param {number} h (optional) the height of the region to pixelate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    pixelate: function pixelate(size, x, y, w, h, cb) {\n      if (typeof x === 'function') {\n        cb = x;\n        h = null;\n        w = null;\n        y = null;\n        x = null;\n      } else {\n        if (typeof size !== 'number') {\n          return _utils.throwError.call(this, 'size must be a number', cb);\n        }\n        if (isDef(x) && typeof x !== 'number') {\n          return _utils.throwError.call(this, 'x must be a number', cb);\n        }\n        if (isDef(y) && typeof y !== 'number') {\n          return _utils.throwError.call(this, 'y must be a number', cb);\n        }\n        if (isDef(w) && typeof w !== 'number') {\n          return _utils.throwError.call(this, 'w must be a number', cb);\n        }\n        if (isDef(h) && typeof h !== 'number') {\n          return _utils.throwError.call(this, 'h must be a number', cb);\n        }\n      }\n      var kernel = [[1 / 16, 2 / 16, 1 / 16], [2 / 16, 4 / 16, 2 / 16], [1 / 16, 2 / 16, 1 / 16]];\n      x = x || 0;\n      y = y || 0;\n      w = isDef(w) ? w : this.bitmap.width - x;\n      h = isDef(h) ? h : this.bitmap.height - y;\n      var source = this.cloneQuiet();\n      this.scanQuiet(x, y, w, h, function (xx, yx, idx) {\n        xx = size * Math.floor(xx / size);\n        yx = size * Math.floor(yx / size);\n        var value = applyKernel(source, kernel, xx, yx);\n        this.bitmap.data[idx] = value[0];\n        this.bitmap.data[idx + 1] = value[1];\n        this.bitmap.data[idx + 2] = value[2];\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Applies a convolution kernel to the image or a region\n     * @param {array} kernel the convolution kernel\n     * @param {number} x (optional) the x position of the region to apply convolution to\n     * @param {number} y (optional) the y position of the region to apply convolution to\n     * @param {number} w (optional) the width of the region to apply convolution to\n     * @param {number} h (optional) the height of the region to apply convolution to\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    convolute: function convolute(kernel, x, y, w, h, cb) {\n      if (!Array.isArray(kernel)) return _utils.throwError.call(this, 'the kernel must be an array', cb);\n      if (typeof x === 'function') {\n        cb = x;\n        x = null;\n        y = null;\n        w = null;\n        h = null;\n      } else {\n        if (isDef(x) && typeof x !== 'number') {\n          return _utils.throwError.call(this, 'x must be a number', cb);\n        }\n        if (isDef(y) && typeof y !== 'number') {\n          return _utils.throwError.call(this, 'y must be a number', cb);\n        }\n        if (isDef(w) && typeof w !== 'number') {\n          return _utils.throwError.call(this, 'w must be a number', cb);\n        }\n        if (isDef(h) && typeof h !== 'number') {\n          return _utils.throwError.call(this, 'h must be a number', cb);\n        }\n      }\n      var ksize = (kernel.length - 1) / 2;\n      x = isDef(x) ? x : ksize;\n      y = isDef(y) ? y : ksize;\n      w = isDef(w) ? w : this.bitmap.width - x;\n      h = isDef(h) ? h : this.bitmap.height - y;\n      var source = this.cloneQuiet();\n      this.scanQuiet(x, y, w, h, function (xx, yx, idx) {\n        var value = applyKernel(source, kernel, xx, yx);\n        this.bitmap.data[idx] = this.constructor.limit255(value[0]);\n        this.bitmap.data[idx + 1] = this.constructor.limit255(value[1]);\n        this.bitmap.data[idx + 2] = this.constructor.limit255(value[2]);\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    },\n    /**\n     * Apply multiple color modification rules\n     * @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    color: colorFn,\n    colour: colorFn\n  };\n};\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["applyKernel","im","kernel","x","y","value","size","length","kx","ky","idx","getPixelIndex","bitmap","data","isDef","v","greyscale","cb","scanQuiet","width","height","grey","parseInt","call","mix","clr","clr2","p","r","g","b","colorFn","actions","Array","isArray","throwError","map","action","apply","params","toRgb","_this","colorModifier","i","amount","constructor","limit255","forEach","brightness","val","contrast","factor","adjust","Math","floor","posterize","n","grayscale","opacity","f","sepia","red","green","blue","fade","convolution","edgeHandling","EDGE_EXTEND","newData","Buffer","from","kRows","kCols","rowEnd","colEnd","rowIni","colIni","weight","rSum","gSum","bSum","ri","gi","bi","xi","yi","idxi","row","col","opaque","pixelate","w","h","source","cloneQuiet","xx","yx","convolute","ksize","color","colour"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\plugin-color\\src\\index.js"],"sourcesContent":["import tinyColor from 'tinycolor2';\nimport { throwError, isNodePattern } from '@jimp/utils';\n\nfunction applyKernel(im, kernel, x, y) {\n  const value = [0, 0, 0];\n  const size = (kernel.length - 1) / 2;\n\n  for (let kx = 0; kx < kernel.length; kx += 1) {\n    for (let ky = 0; ky < kernel[kx].length; ky += 1) {\n      const idx = im.getPixelIndex(x + kx - size, y + ky - size);\n\n      value[0] += im.bitmap.data[idx] * kernel[kx][ky];\n      value[1] += im.bitmap.data[idx + 1] * kernel[kx][ky];\n      value[2] += im.bitmap.data[idx + 2] * kernel[kx][ky];\n    }\n  }\n\n  return value;\n}\n\nconst isDef = v => typeof v !== 'undefined' && v !== null;\n\nfunction greyscale(cb) {\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n    x,\n    y,\n    idx\n  ) {\n    const grey = parseInt(\n      0.2126 * this.bitmap.data[idx] +\n        0.7152 * this.bitmap.data[idx + 1] +\n        0.0722 * this.bitmap.data[idx + 2],\n      10\n    );\n\n    this.bitmap.data[idx] = grey;\n    this.bitmap.data[idx + 1] = grey;\n    this.bitmap.data[idx + 2] = grey;\n  });\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nfunction mix(clr, clr2, p = 50) {\n  return {\n    r: (clr2.r - clr.r) * (p / 100) + clr.r,\n    g: (clr2.g - clr.g) * (p / 100) + clr.g,\n    b: (clr2.b - clr.b) * (p / 100) + clr.b\n  };\n}\n\nfunction colorFn(actions, cb) {\n  if (!actions || !Array.isArray(actions)) {\n    return throwError.call(this, 'actions must be an array', cb);\n  }\n\n  actions = actions.map(action => {\n    if (action.apply === 'xor' || action.apply === 'mix') {\n      action.params[0] = tinyColor(action.params[0]).toRgb();\n    }\n\n    return action;\n  });\n\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, (x, y, idx) => {\n    let clr = {\n      r: this.bitmap.data[idx],\n      g: this.bitmap.data[idx + 1],\n      b: this.bitmap.data[idx + 2]\n    };\n\n    const colorModifier = (i, amount) =>\n      this.constructor.limit255(clr[i] + amount);\n\n    actions.forEach(action => {\n      if (action.apply === 'mix') {\n        clr = mix(clr, action.params[0], action.params[1]);\n      } else if (action.apply === 'tint') {\n        clr = mix(clr, { r: 255, g: 255, b: 255 }, action.params[0]);\n      } else if (action.apply === 'shade') {\n        clr = mix(clr, { r: 0, g: 0, b: 0 }, action.params[0]);\n      } else if (action.apply === 'xor') {\n        clr = {\n          r: clr.r ^ action.params[0].r,\n          g: clr.g ^ action.params[0].g,\n          b: clr.b ^ action.params[0].b\n        };\n      } else if (action.apply === 'red') {\n        clr.r = colorModifier('r', action.params[0]);\n      } else if (action.apply === 'green') {\n        clr.g = colorModifier('g', action.params[0]);\n      } else if (action.apply === 'blue') {\n        clr.b = colorModifier('b', action.params[0]);\n      } else {\n        if (action.apply === 'hue') {\n          action.apply = 'spin';\n        }\n\n        clr = tinyColor(clr);\n\n        if (!clr[action.apply]) {\n          return throwError.call(\n            this,\n            'action ' + action.apply + ' not supported',\n            cb\n          );\n        }\n\n        clr = clr[action.apply](...action.params).toRgb();\n      }\n    });\n\n    this.bitmap.data[idx] = clr.r;\n    this.bitmap.data[idx + 1] = clr.g;\n    this.bitmap.data[idx + 2] = clr.b;\n  });\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nexport default () => ({\n  /**\n   * Adjusts the brightness of the image\n   * @param {number} val the amount to adjust the brightness, a number between -1 and +1\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  brightness(val, cb) {\n    if (typeof val !== 'number') {\n      return throwError.call(this, 'val must be numbers', cb);\n    }\n\n    if (val < -1 || val > +1) {\n      return throwError.call(\n        this,\n        'val must be a number between -1 and +1',\n        cb\n      );\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      if (val < 0.0) {\n        this.bitmap.data[idx] = this.bitmap.data[idx] * (1 + val);\n        this.bitmap.data[idx + 1] = this.bitmap.data[idx + 1] * (1 + val);\n        this.bitmap.data[idx + 2] = this.bitmap.data[idx + 2] * (1 + val);\n      } else {\n        this.bitmap.data[idx] =\n          this.bitmap.data[idx] + (255 - this.bitmap.data[idx]) * val;\n        this.bitmap.data[idx + 1] =\n          this.bitmap.data[idx + 1] + (255 - this.bitmap.data[idx + 1]) * val;\n        this.bitmap.data[idx + 2] =\n          this.bitmap.data[idx + 2] + (255 - this.bitmap.data[idx + 2]) * val;\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Adjusts the contrast of the image\n   * @param {number} val the amount to adjust the contrast, a number between -1 and +1\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  contrast(val, cb) {\n    if (typeof val !== 'number') {\n      return throwError.call(this, 'val must be numbers', cb);\n    }\n\n    if (val < -1 || val > +1) {\n      return throwError.call(\n        this,\n        'val must be a number between -1 and +1',\n        cb\n      );\n    }\n\n    const factor = (val + 1) / (1 - val);\n\n    function adjust(value) {\n      value = Math.floor(factor * (value - 127) + 127);\n\n      return value < 0 ? 0 : value > 255 ? 255 : value;\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = adjust(this.bitmap.data[idx]);\n      this.bitmap.data[idx + 1] = adjust(this.bitmap.data[idx + 1]);\n      this.bitmap.data[idx + 2] = adjust(this.bitmap.data[idx + 2]);\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Apply a posterize effect\n   * @param {number} n the amount to adjust the contrast, minimum threshold is two\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  posterize(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be numbers', cb);\n    }\n\n    if (n < 2) {\n      n = 2;\n    } // minimum of 2 levels\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] =\n        (Math.floor((this.bitmap.data[idx] / 255) * (n - 1)) / (n - 1)) * 255;\n      this.bitmap.data[idx + 1] =\n        (Math.floor((this.bitmap.data[idx + 1] / 255) * (n - 1)) / (n - 1)) *\n        255;\n      this.bitmap.data[idx + 2] =\n        (Math.floor((this.bitmap.data[idx + 2] / 255) * (n - 1)) / (n - 1)) *\n        255;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes colour from the image using ITU Rec 709 luminance values\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  greyscale,\n\n  // Alias of greyscale for our American friends\n  grayscale: greyscale,\n\n  /**\n   * Multiplies the opacity of each pixel by a factor between 0 and 1\n   * @param {number} f A number, the factor by which to multiply the opacity of each pixel\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  opacity(f, cb) {\n    if (typeof f !== 'number')\n      return throwError.call(this, 'f must be a number', cb);\n    if (f < 0 || f > 1)\n      return throwError.call(this, 'f must be a number from 0 to 1', cb);\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      const v = this.bitmap.data[idx + 3] * f;\n      this.bitmap.data[idx + 3] = v;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies a sepia tone to the image\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  sepia(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      let red = this.bitmap.data[idx];\n      let green = this.bitmap.data[idx + 1];\n      let blue = this.bitmap.data[idx + 2];\n\n      red = red * 0.393 + green * 0.769 + blue * 0.189;\n      green = red * 0.349 + green * 0.686 + blue * 0.168;\n      blue = red * 0.272 + green * 0.534 + blue * 0.131;\n\n      this.bitmap.data[idx] = red < 255 ? red : 255;\n      this.bitmap.data[idx + 1] = green < 255 ? green : 255;\n      this.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Fades each pixel by a factor between 0 and 1\n   * @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  fade(f, cb) {\n    if (typeof f !== 'number') {\n      return throwError.call(this, 'f must be a number', cb);\n    }\n\n    if (f < 0 || f > 1) {\n      return throwError.call(this, 'f must be a number from 0 to 1', cb);\n    }\n\n    // this method is an alternative to opacity (which may be deprecated)\n    this.opacity(1 - f);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds each element of the image to its local neighbors, weighted by the kernel\n   * @param {array} kernel a matrix to weight the neighbors sum\n   * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  convolution(kernel, edgeHandling, cb) {\n    if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n      cb = edgeHandling;\n      edgeHandling = null;\n    }\n\n    if (!edgeHandling) {\n      edgeHandling = this.constructor.EDGE_EXTEND;\n    }\n\n    const newData = Buffer.from(this.bitmap.data);\n    const kRows = kernel.length;\n    const kCols = kernel[0].length;\n    const rowEnd = Math.floor(kRows / 2);\n    const colEnd = Math.floor(kCols / 2);\n    const rowIni = -rowEnd;\n    const colIni = -colEnd;\n\n    let weight;\n    let rSum;\n    let gSum;\n    let bSum;\n    let ri;\n    let gi;\n    let bi;\n    let xi;\n    let yi;\n    let idxi;\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      bSum = 0;\n      gSum = 0;\n      rSum = 0;\n\n      for (let row = rowIni; row <= rowEnd; row++) {\n        for (let col = colIni; col <= colEnd; col++) {\n          xi = x + col;\n          yi = y + row;\n          weight = kernel[row + rowEnd][col + colEnd];\n          idxi = this.getPixelIndex(xi, yi, edgeHandling);\n\n          if (idxi === -1) {\n            bi = 0;\n            gi = 0;\n            ri = 0;\n          } else {\n            ri = this.bitmap.data[idxi + 0];\n            gi = this.bitmap.data[idxi + 1];\n            bi = this.bitmap.data[idxi + 2];\n          }\n\n          rSum += weight * ri;\n          gSum += weight * gi;\n          bSum += weight * bi;\n        }\n      }\n\n      if (rSum < 0) {\n        rSum = 0;\n      }\n\n      if (gSum < 0) {\n        gSum = 0;\n      }\n\n      if (bSum < 0) {\n        bSum = 0;\n      }\n\n      if (rSum > 255) {\n        rSum = 255;\n      }\n\n      if (gSum > 255) {\n        gSum = 255;\n      }\n\n      if (bSum > 255) {\n        bSum = 255;\n      }\n\n      newData[idx + 0] = rSum;\n      newData[idx + 1] = gSum;\n      newData[idx + 2] = bSum;\n    });\n\n    this.bitmap.data = newData;\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Set the alpha channel on every pixel to fully opaque\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  opaque(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx + 3] = 255;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Pixelates the image or a region\n   * @param {number} size the size of the pixels\n   * @param {number} x (optional) the x position of the region to pixelate\n   * @param {number} y (optional) the y position of the region to pixelate\n   * @param {number} w (optional) the width of the region to pixelate\n   * @param {number} h (optional) the height of the region to pixelate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  pixelate(size, x, y, w, h, cb) {\n    if (typeof x === 'function') {\n      cb = x;\n      h = null;\n      w = null;\n      y = null;\n      x = null;\n    } else {\n      if (typeof size !== 'number') {\n        return throwError.call(this, 'size must be a number', cb);\n      }\n\n      if (isDef(x) && typeof x !== 'number') {\n        return throwError.call(this, 'x must be a number', cb);\n      }\n\n      if (isDef(y) && typeof y !== 'number') {\n        return throwError.call(this, 'y must be a number', cb);\n      }\n\n      if (isDef(w) && typeof w !== 'number') {\n        return throwError.call(this, 'w must be a number', cb);\n      }\n\n      if (isDef(h) && typeof h !== 'number') {\n        return throwError.call(this, 'h must be a number', cb);\n      }\n    }\n\n    const kernel = [\n      [1 / 16, 2 / 16, 1 / 16],\n      [2 / 16, 4 / 16, 2 / 16],\n      [1 / 16, 2 / 16, 1 / 16]\n    ];\n\n    x = x || 0;\n    y = y || 0;\n    w = isDef(w) ? w : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n\n    const source = this.cloneQuiet();\n\n    this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n      xx = size * Math.floor(xx / size);\n      yx = size * Math.floor(yx / size);\n\n      const value = applyKernel(source, kernel, xx, yx);\n\n      this.bitmap.data[idx] = value[0];\n      this.bitmap.data[idx + 1] = value[1];\n      this.bitmap.data[idx + 2] = value[2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies a convolution kernel to the image or a region\n   * @param {array} kernel the convolution kernel\n   * @param {number} x (optional) the x position of the region to apply convolution to\n   * @param {number} y (optional) the y position of the region to apply convolution to\n   * @param {number} w (optional) the width of the region to apply convolution to\n   * @param {number} h (optional) the height of the region to apply convolution to\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  convolute(kernel, x, y, w, h, cb) {\n    if (!Array.isArray(kernel))\n      return throwError.call(this, 'the kernel must be an array', cb);\n\n    if (typeof x === 'function') {\n      cb = x;\n      x = null;\n      y = null;\n      w = null;\n      h = null;\n    } else {\n      if (isDef(x) && typeof x !== 'number') {\n        return throwError.call(this, 'x must be a number', cb);\n      }\n\n      if (isDef(y) && typeof y !== 'number') {\n        return throwError.call(this, 'y must be a number', cb);\n      }\n\n      if (isDef(w) && typeof w !== 'number') {\n        return throwError.call(this, 'w must be a number', cb);\n      }\n\n      if (isDef(h) && typeof h !== 'number') {\n        return throwError.call(this, 'h must be a number', cb);\n      }\n    }\n\n    const ksize = (kernel.length - 1) / 2;\n\n    x = isDef(x) ? x : ksize;\n    y = isDef(y) ? y : ksize;\n    w = isDef(w) ? w : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n\n    const source = this.cloneQuiet();\n\n    this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n      const value = applyKernel(source, kernel, xx, yx);\n\n      this.bitmap.data[idx] = this.constructor.limit255(value[0]);\n      this.bitmap.data[idx + 1] = this.constructor.limit255(value[1]);\n      this.bitmap.data[idx + 2] = this.constructor.limit255(value[2]);\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Apply multiple color modification rules\n   * @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  color: colorFn,\n  colour: colorFn\n});\n"]},"metadata":{},"sourceType":"script"}