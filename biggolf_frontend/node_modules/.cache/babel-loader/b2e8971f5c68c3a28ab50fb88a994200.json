{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) 2015 Guyon Roche\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:</p>\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nmodule.exports = {\n  nearestNeighbor: function nearestNeighbor(src, dst) {\n    var wSrc = src.width;\n    var hSrc = src.height;\n    var wDst = dst.width;\n    var hDst = dst.height;\n    var bufSrc = src.data;\n    var bufDst = dst.data;\n    for (var i = 0; i < hDst; i++) {\n      for (var j = 0; j < wDst; j++) {\n        var posDst = (i * wDst + j) * 4;\n        var iSrc = Math.floor(i * hSrc / hDst);\n        var jSrc = Math.floor(j * wSrc / wDst);\n        var posSrc = (iSrc * wSrc + jSrc) * 4;\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n      }\n    }\n  },\n  bilinearInterpolation: function bilinearInterpolation(src, dst) {\n    var wSrc = src.width;\n    var hSrc = src.height;\n    var wDst = dst.width;\n    var hDst = dst.height;\n    var bufSrc = src.data;\n    var bufDst = dst.data;\n    var interpolate = function interpolate(k, kMin, vMin, kMax, vMax) {\n      // special case - k is integer\n      if (kMin === kMax) {\n        return vMin;\n      }\n      return Math.round((k - kMin) * vMax + (kMax - k) * vMin);\n    };\n    var assign = function assign(pos, offset, x, xMin, xMax, y, yMin, yMax) {\n      var posMin = (yMin * wSrc + xMin) * 4 + offset;\n      var posMax = (yMin * wSrc + xMax) * 4 + offset;\n      var vMin = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]); // special case, y is integer\n\n      if (yMax === yMin) {\n        bufDst[pos + offset] = vMin;\n      } else {\n        posMin = (yMax * wSrc + xMin) * 4 + offset;\n        posMax = (yMax * wSrc + xMax) * 4 + offset;\n        var vMax = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);\n        bufDst[pos + offset] = interpolate(y, yMin, vMin, yMax, vMax);\n      }\n    };\n    for (var i = 0; i < hDst; i++) {\n      for (var j = 0; j < wDst; j++) {\n        var posDst = (i * wDst + j) * 4; // x & y in src coordinates\n\n        var x = j * wSrc / wDst;\n        var xMin = Math.floor(x);\n        var xMax = Math.min(Math.ceil(x), wSrc - 1);\n        var y = i * hSrc / hDst;\n        var yMin = Math.floor(y);\n        var yMax = Math.min(Math.ceil(y), hSrc - 1);\n        assign(posDst, 0, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 1, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 2, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 3, x, xMin, xMax, y, yMin, yMax);\n      }\n    }\n  },\n  _interpolate2D: function _interpolate2D(src, dst, options, interpolate) {\n    var bufSrc = src.data;\n    var bufDst = dst.data;\n    var wSrc = src.width;\n    var hSrc = src.height;\n    var wDst = dst.width;\n    var hDst = dst.height; // when dst smaller than src/2, interpolate first to a multiple between 0.5 and 1.0 src, then sum squares\n\n    var wM = Math.max(1, Math.floor(wSrc / wDst));\n    var wDst2 = wDst * wM;\n    var hM = Math.max(1, Math.floor(hSrc / hDst));\n    var hDst2 = hDst * hM; // ===========================================================\n    // Pass 1 - interpolate rows\n    // buf1 has width of dst2 and height of src\n\n    var buf1 = Buffer.alloc(wDst2 * hSrc * 4);\n    for (var i = 0; i < hSrc; i++) {\n      for (var j = 0; j < wDst2; j++) {\n        // i in src coords, j in dst coords\n        // calculate x in src coords\n        // this interpolation requires 4 sample points and the two inner ones must be real\n        // the outer points can be fudged for the edges.\n        // therefore (wSrc-1)/wDst2\n        var x = j * (wSrc - 1) / wDst2;\n        var xPos = Math.floor(x);\n        var t = x - xPos;\n        var srcPos = (i * wSrc + xPos) * 4;\n        var buf1Pos = (i * wDst2 + j) * 4;\n        for (var k = 0; k < 4; k++) {\n          var kPos = srcPos + k;\n          var x0 = xPos > 0 ? bufSrc[kPos - 4] : 2 * bufSrc[kPos] - bufSrc[kPos + 4];\n          var x1 = bufSrc[kPos];\n          var x2 = bufSrc[kPos + 4];\n          var x3 = xPos < wSrc - 2 ? bufSrc[kPos + 8] : 2 * bufSrc[kPos + 4] - bufSrc[kPos];\n          buf1[buf1Pos + k] = interpolate(x0, x1, x2, x3, t);\n        }\n      }\n    } // this._writeFile(wDst2, hSrc, buf1, \"out/buf1.jpg\");\n    // ===========================================================\n    // Pass 2 - interpolate columns\n    // buf2 has width and height of dst2\n\n    var buf2 = Buffer.alloc(wDst2 * hDst2 * 4);\n    for (var _i = 0; _i < hDst2; _i++) {\n      for (var _j = 0; _j < wDst2; _j++) {\n        // i&j in dst2 coords\n        // calculate y in buf1 coords\n        // this interpolation requires 4 sample points and the two inner ones must be real\n        // the outer points can be fudged for the edges.\n        // therefore (hSrc-1)/hDst2\n        var y = _i * (hSrc - 1) / hDst2;\n        var yPos = Math.floor(y);\n        var _t = y - yPos;\n        var _buf1Pos = (yPos * wDst2 + _j) * 4;\n        var buf2Pos = (_i * wDst2 + _j) * 4;\n        for (var _k = 0; _k < 4; _k++) {\n          var _kPos = _buf1Pos + _k;\n          var y0 = yPos > 0 ? buf1[_kPos - wDst2 * 4] : 2 * buf1[_kPos] - buf1[_kPos + wDst2 * 4];\n          var y1 = buf1[_kPos];\n          var y2 = buf1[_kPos + wDst2 * 4];\n          var y3 = yPos < hSrc - 2 ? buf1[_kPos + wDst2 * 8] : 2 * buf1[_kPos + wDst2 * 4] - buf1[_kPos];\n          buf2[buf2Pos + _k] = interpolate(y0, y1, y2, y3, _t);\n        }\n      }\n    } // this._writeFile(wDst2, hDst2, buf2, \"out/buf2.jpg\");\n    // ===========================================================\n    // Pass 3 - scale to dst\n\n    var m = wM * hM;\n    if (m > 1) {\n      for (var _i2 = 0; _i2 < hDst; _i2++) {\n        for (var _j2 = 0; _j2 < wDst; _j2++) {\n          // i&j in dst bounded coords\n          var r = 0;\n          var g = 0;\n          var b = 0;\n          var a = 0;\n          var realColors = 0;\n          for (var _y = 0; _y < hM; _y++) {\n            var _yPos = _i2 * hM + _y;\n            for (var _x = 0; _x < wM; _x++) {\n              var _xPos = _j2 * wM + _x;\n              var xyPos = (_yPos * wDst2 + _xPos) * 4;\n              var pixelAlpha = buf2[xyPos + 3];\n              if (pixelAlpha) {\n                r += buf2[xyPos];\n                g += buf2[xyPos + 1];\n                b += buf2[xyPos + 2];\n                realColors++;\n              }\n              a += pixelAlpha;\n            }\n          }\n          var pos = (_i2 * wDst + _j2) * 4;\n          bufDst[pos] = realColors ? Math.round(r / realColors) : 0;\n          bufDst[pos + 1] = realColors ? Math.round(g / realColors) : 0;\n          bufDst[pos + 2] = realColors ? Math.round(b / realColors) : 0;\n          bufDst[pos + 3] = Math.round(a / m);\n        }\n      }\n    } else {\n      // replace dst buffer with buf2\n      dst.data = buf2;\n    }\n  },\n  bicubicInterpolation: function bicubicInterpolation(src, dst, options) {\n    var interpolateCubic = function interpolateCubic(x0, x1, x2, x3, t) {\n      var a0 = x3 - x2 - x0 + x1;\n      var a1 = x0 - x1 - a0;\n      var a2 = x2 - x0;\n      var a3 = x1;\n      return Math.max(0, Math.min(255, a0 * (t * t * t) + a1 * (t * t) + a2 * t + a3));\n    };\n    return this._interpolate2D(src, dst, options, interpolateCubic);\n  },\n  hermiteInterpolation: function hermiteInterpolation(src, dst, options) {\n    var interpolateHermite = function interpolateHermite(x0, x1, x2, x3, t) {\n      var c0 = x1;\n      var c1 = 0.5 * (x2 - x0);\n      var c2 = x0 - 2.5 * x1 + 2 * x2 - 0.5 * x3;\n      var c3 = 0.5 * (x3 - x0) + 1.5 * (x1 - x2);\n      return Math.max(0, Math.min(255, Math.round(((c3 * t + c2) * t + c1) * t + c0)));\n    };\n    return this._interpolate2D(src, dst, options, interpolateHermite);\n  },\n  bezierInterpolation: function bezierInterpolation(src, dst, options) {\n    // between 2 points y(n), y(n+1), use next points out, y(n-1), y(n+2)\n    // to predict control points (a & b) to be placed at n+0.5\n    //  ya(n) = y(n) + (y(n+1)-y(n-1))/4\n    //  yb(n) = y(n+1) - (y(n+2)-y(n))/4\n    // then use std bezier to interpolate [n,n+1)\n    //  y(n+t) = y(n)*(1-t)^3 + 3 * ya(n)*(1-t)^2*t + 3 * yb(n)*(1-t)*t^2 + y(n+1)*t^3\n    //  note the 3* factor for the two control points\n    // for edge cases, can choose:\n    //  y(-1) = y(0) - 2*(y(1)-y(0))\n    //  y(w) = y(w-1) + 2*(y(w-1)-y(w-2))\n    // but can go with y(-1) = y(0) and y(w) = y(w-1)\n    var interpolateBezier = function interpolateBezier(x0, x1, x2, x3, t) {\n      // x1, x2 are the knots, use x0 and x3 to calculate control points\n      var cp1 = x1 + (x2 - x0) / 4;\n      var cp2 = x2 - (x3 - x1) / 4;\n      var nt = 1 - t;\n      var c0 = x1 * nt * nt * nt;\n      var c1 = 3 * cp1 * nt * nt * t;\n      var c2 = 3 * cp2 * nt * t * t;\n      var c3 = x2 * t * t * t;\n      return Math.max(0, Math.min(255, Math.round(c0 + c1 + c2 + c3)));\n    };\n    return this._interpolate2D(src, dst, options, interpolateBezier);\n  }\n};","map":{"version":3,"mappings":"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","names":["module","exports","nearestNeighbor","src","dst","wSrc","width","hSrc","height","wDst","hDst","bufSrc","data","bufDst","i","j","posDst","iSrc","Math","floor","jSrc","posSrc","bilinearInterpolation","interpolate","k","kMin","vMin","kMax","vMax","round","assign","pos","offset","x","xMin","xMax","y","yMin","yMax","posMin","posMax","min","ceil","_interpolate2D","options","wM","max","wDst2","hM","hDst2","buf1","Buffer","alloc","xPos","t","srcPos","buf1Pos","kPos","x0","x1","x2","x3","buf2","yPos","buf2Pos","y0","y1","y2","y3","m","r","g","b","a","realColors","xyPos","pixelAlpha","bicubicInterpolation","interpolateCubic","a0","a1","a2","a3","hermiteInterpolation","interpolateHermite","c0","c1","c2","c3","bezierInterpolation","interpolateBezier","cp1","cp2","nt"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\plugin-resize\\src\\modules\\resize2.js"],"sourcesContent":["/**\n * Copyright (c) 2015 Guyon Roche\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:</p>\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nmodule.exports = {\n  nearestNeighbor(src, dst) {\n    const wSrc = src.width;\n    const hSrc = src.height;\n\n    const wDst = dst.width;\n    const hDst = dst.height;\n\n    const bufSrc = src.data;\n    const bufDst = dst.data;\n\n    for (let i = 0; i < hDst; i++) {\n      for (let j = 0; j < wDst; j++) {\n        let posDst = (i * wDst + j) * 4;\n\n        const iSrc = Math.floor((i * hSrc) / hDst);\n        const jSrc = Math.floor((j * wSrc) / wDst);\n        let posSrc = (iSrc * wSrc + jSrc) * 4;\n\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n        bufDst[posDst++] = bufSrc[posSrc++];\n      }\n    }\n  },\n\n  bilinearInterpolation(src, dst) {\n    const wSrc = src.width;\n    const hSrc = src.height;\n\n    const wDst = dst.width;\n    const hDst = dst.height;\n\n    const bufSrc = src.data;\n    const bufDst = dst.data;\n\n    const interpolate = function(k, kMin, vMin, kMax, vMax) {\n      // special case - k is integer\n      if (kMin === kMax) {\n        return vMin;\n      }\n\n      return Math.round((k - kMin) * vMax + (kMax - k) * vMin);\n    };\n\n    const assign = function(pos, offset, x, xMin, xMax, y, yMin, yMax) {\n      let posMin = (yMin * wSrc + xMin) * 4 + offset;\n      let posMax = (yMin * wSrc + xMax) * 4 + offset;\n      const vMin = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);\n\n      // special case, y is integer\n      if (yMax === yMin) {\n        bufDst[pos + offset] = vMin;\n      } else {\n        posMin = (yMax * wSrc + xMin) * 4 + offset;\n        posMax = (yMax * wSrc + xMax) * 4 + offset;\n        const vMax = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);\n\n        bufDst[pos + offset] = interpolate(y, yMin, vMin, yMax, vMax);\n      }\n    };\n\n    for (let i = 0; i < hDst; i++) {\n      for (let j = 0; j < wDst; j++) {\n        const posDst = (i * wDst + j) * 4;\n        // x & y in src coordinates\n        const x = (j * wSrc) / wDst;\n        const xMin = Math.floor(x);\n        const xMax = Math.min(Math.ceil(x), wSrc - 1);\n\n        const y = (i * hSrc) / hDst;\n        const yMin = Math.floor(y);\n        const yMax = Math.min(Math.ceil(y), hSrc - 1);\n\n        assign(posDst, 0, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 1, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 2, x, xMin, xMax, y, yMin, yMax);\n        assign(posDst, 3, x, xMin, xMax, y, yMin, yMax);\n      }\n    }\n  },\n\n  _interpolate2D(src, dst, options, interpolate) {\n    const bufSrc = src.data;\n    const bufDst = dst.data;\n\n    const wSrc = src.width;\n    const hSrc = src.height;\n\n    const wDst = dst.width;\n    const hDst = dst.height;\n\n    // when dst smaller than src/2, interpolate first to a multiple between 0.5 and 1.0 src, then sum squares\n    const wM = Math.max(1, Math.floor(wSrc / wDst));\n    const wDst2 = wDst * wM;\n    const hM = Math.max(1, Math.floor(hSrc / hDst));\n    const hDst2 = hDst * hM;\n\n    // ===========================================================\n    // Pass 1 - interpolate rows\n    // buf1 has width of dst2 and height of src\n    const buf1 = Buffer.alloc(wDst2 * hSrc * 4);\n    for (let i = 0; i < hSrc; i++) {\n      for (let j = 0; j < wDst2; j++) {\n        // i in src coords, j in dst coords\n\n        // calculate x in src coords\n        // this interpolation requires 4 sample points and the two inner ones must be real\n        // the outer points can be fudged for the edges.\n        // therefore (wSrc-1)/wDst2\n        const x = (j * (wSrc - 1)) / wDst2;\n        const xPos = Math.floor(x);\n        const t = x - xPos;\n        const srcPos = (i * wSrc + xPos) * 4;\n        const buf1Pos = (i * wDst2 + j) * 4;\n\n        for (let k = 0; k < 4; k++) {\n          const kPos = srcPos + k;\n          const x0 =\n            xPos > 0 ? bufSrc[kPos - 4] : 2 * bufSrc[kPos] - bufSrc[kPos + 4];\n          const x1 = bufSrc[kPos];\n          const x2 = bufSrc[kPos + 4];\n          const x3 =\n            xPos < wSrc - 2\n              ? bufSrc[kPos + 8]\n              : 2 * bufSrc[kPos + 4] - bufSrc[kPos];\n          buf1[buf1Pos + k] = interpolate(x0, x1, x2, x3, t);\n        }\n      }\n    }\n    // this._writeFile(wDst2, hSrc, buf1, \"out/buf1.jpg\");\n\n    // ===========================================================\n    // Pass 2 - interpolate columns\n    // buf2 has width and height of dst2\n    const buf2 = Buffer.alloc(wDst2 * hDst2 * 4);\n    for (let i = 0; i < hDst2; i++) {\n      for (let j = 0; j < wDst2; j++) {\n        // i&j in dst2 coords\n\n        // calculate y in buf1 coords\n        // this interpolation requires 4 sample points and the two inner ones must be real\n        // the outer points can be fudged for the edges.\n        // therefore (hSrc-1)/hDst2\n        const y = (i * (hSrc - 1)) / hDst2;\n        const yPos = Math.floor(y);\n        const t = y - yPos;\n        const buf1Pos = (yPos * wDst2 + j) * 4;\n        const buf2Pos = (i * wDst2 + j) * 4;\n        for (let k = 0; k < 4; k++) {\n          const kPos = buf1Pos + k;\n          const y0 =\n            yPos > 0\n              ? buf1[kPos - wDst2 * 4]\n              : 2 * buf1[kPos] - buf1[kPos + wDst2 * 4];\n          const y1 = buf1[kPos];\n          const y2 = buf1[kPos + wDst2 * 4];\n          const y3 =\n            yPos < hSrc - 2\n              ? buf1[kPos + wDst2 * 8]\n              : 2 * buf1[kPos + wDst2 * 4] - buf1[kPos];\n\n          buf2[buf2Pos + k] = interpolate(y0, y1, y2, y3, t);\n        }\n      }\n    }\n    // this._writeFile(wDst2, hDst2, buf2, \"out/buf2.jpg\");\n\n    // ===========================================================\n    // Pass 3 - scale to dst\n    const m = wM * hM;\n    if (m > 1) {\n      for (let i = 0; i < hDst; i++) {\n        for (let j = 0; j < wDst; j++) {\n          // i&j in dst bounded coords\n          let r = 0;\n          let g = 0;\n          let b = 0;\n          let a = 0;\n          let realColors = 0;\n\n          for (let y = 0; y < hM; y++) {\n            const yPos = i * hM + y;\n\n            for (let x = 0; x < wM; x++) {\n              const xPos = j * wM + x;\n              const xyPos = (yPos * wDst2 + xPos) * 4;\n              const pixelAlpha = buf2[xyPos + 3];\n\n              if (pixelAlpha) {\n                r += buf2[xyPos];\n                g += buf2[xyPos + 1];\n                b += buf2[xyPos + 2];\n                realColors++;\n              }\n\n              a += pixelAlpha;\n            }\n          }\n\n          const pos = (i * wDst + j) * 4;\n          bufDst[pos] = realColors ? Math.round(r / realColors) : 0;\n          bufDst[pos + 1] = realColors ? Math.round(g / realColors) : 0;\n          bufDst[pos + 2] = realColors ? Math.round(b / realColors) : 0;\n          bufDst[pos + 3] = Math.round(a / m);\n        }\n      }\n    } else {\n      // replace dst buffer with buf2\n      dst.data = buf2;\n    }\n  },\n\n  bicubicInterpolation(src, dst, options) {\n    const interpolateCubic = function(x0, x1, x2, x3, t) {\n      const a0 = x3 - x2 - x0 + x1;\n      const a1 = x0 - x1 - a0;\n      const a2 = x2 - x0;\n      const a3 = x1;\n      return Math.max(\n        0,\n        Math.min(255, a0 * (t * t * t) + a1 * (t * t) + a2 * t + a3)\n      );\n    };\n\n    return this._interpolate2D(src, dst, options, interpolateCubic);\n  },\n\n  hermiteInterpolation(src, dst, options) {\n    const interpolateHermite = function(x0, x1, x2, x3, t) {\n      const c0 = x1;\n      const c1 = 0.5 * (x2 - x0);\n      const c2 = x0 - 2.5 * x1 + 2 * x2 - 0.5 * x3;\n      const c3 = 0.5 * (x3 - x0) + 1.5 * (x1 - x2);\n      return Math.max(\n        0,\n        Math.min(255, Math.round(((c3 * t + c2) * t + c1) * t + c0))\n      );\n    };\n\n    return this._interpolate2D(src, dst, options, interpolateHermite);\n  },\n\n  bezierInterpolation(src, dst, options) {\n    // between 2 points y(n), y(n+1), use next points out, y(n-1), y(n+2)\n    // to predict control points (a & b) to be placed at n+0.5\n    //  ya(n) = y(n) + (y(n+1)-y(n-1))/4\n    //  yb(n) = y(n+1) - (y(n+2)-y(n))/4\n    // then use std bezier to interpolate [n,n+1)\n    //  y(n+t) = y(n)*(1-t)^3 + 3 * ya(n)*(1-t)^2*t + 3 * yb(n)*(1-t)*t^2 + y(n+1)*t^3\n    //  note the 3* factor for the two control points\n    // for edge cases, can choose:\n    //  y(-1) = y(0) - 2*(y(1)-y(0))\n    //  y(w) = y(w-1) + 2*(y(w-1)-y(w-2))\n    // but can go with y(-1) = y(0) and y(w) = y(w-1)\n    const interpolateBezier = function(x0, x1, x2, x3, t) {\n      // x1, x2 are the knots, use x0 and x3 to calculate control points\n      const cp1 = x1 + (x2 - x0) / 4;\n      const cp2 = x2 - (x3 - x1) / 4;\n      const nt = 1 - t;\n      const c0 = x1 * nt * nt * nt;\n      const c1 = 3 * cp1 * nt * nt * t;\n      const c2 = 3 * cp2 * nt * t * t;\n      const c3 = x2 * t * t * t;\n      return Math.max(0, Math.min(255, Math.round(c0 + c1 + c2 + c3)));\n    };\n\n    return this._interpolate2D(src, dst, options, interpolateBezier);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}