{"ast":null,"code":"/**\n * @author shaozilee\n *\n * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp\n *\n */\n\nfunction BmpDecoder(buffer, is_with_alpha) {\n  this.pos = 0;\n  this.buffer = buffer;\n  this.is_with_alpha = !!is_with_alpha;\n  this.bottom_up = true;\n  this.flag = this.buffer.toString(\"utf-8\", 0, this.pos += 2);\n  if (this.flag != \"BM\") throw new Error(\"Invalid BMP File\");\n  this.parseHeader();\n  this.parseRGBA();\n}\nBmpDecoder.prototype.parseHeader = function () {\n  this.fileSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.reserved = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.offset = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.headerSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.width = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.height = this.buffer.readInt32LE(this.pos);\n  this.pos += 4;\n  this.planes = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.bitPP = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.compress = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.rawSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.hr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.vr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.colors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.importantColors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  if (this.bitPP === 16 && this.is_with_alpha) {\n    this.bitPP = 15;\n  }\n  if (this.bitPP < 15) {\n    var len = this.colors === 0 ? 1 << this.bitPP : this.colors;\n    this.palette = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var quad = this.buffer.readUInt8(this.pos++);\n      this.palette[i] = {\n        red: red,\n        green: green,\n        blue: blue,\n        quad: quad\n      };\n    }\n  }\n  if (this.height < 0) {\n    this.height *= -1;\n    this.bottom_up = false;\n  }\n};\nBmpDecoder.prototype.parseRGBA = function () {\n  var bitn = \"bit\" + this.bitPP;\n  var len = this.width * this.height * 4;\n  this.data = new Buffer(len);\n  this[bitn]();\n};\nBmpDecoder.prototype.bit1 = function () {\n  var xlen = Math.ceil(this.width / 8);\n  var mode = xlen % 4;\n  var y = this.height >= 0 ? this.height - 1 : -this.height;\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n    for (var x = 0; x < xlen; x++) {\n      var b = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x * 8 * 4;\n      for (var i = 0; i < 8; i++) {\n        if (x * 8 + i < this.width) {\n          var rgb = this.palette[b >> 7 - i & 0x1];\n          this.data[location + i * 4] = 0;\n          this.data[location + i * 4 + 1] = rgb.blue;\n          this.data[location + i * 4 + 2] = rgb.green;\n          this.data[location + i * 4 + 3] = rgb.red;\n        } else {\n          break;\n        }\n      }\n    }\n    if (mode != 0) {\n      this.pos += 4 - mode;\n    }\n  }\n};\nBmpDecoder.prototype.bit4 = function () {\n  //RLE-4\n  if (this.compress == 2) {\n    this.data.fill(0xff);\n    var location = 0;\n    var lines = this.bottom_up ? this.height - 1 : 0;\n    var low_nibble = false; //for all count of pixel\n\n    while (location < this.data.length) {\n      var a = this.buffer.readUInt8(this.pos++);\n      var b = this.buffer.readUInt8(this.pos++);\n      //absolute mode\n      if (a == 0) {\n        if (b == 0) {\n          //line end\n          if (this.bottom_up) {\n            lines--;\n          } else {\n            lines++;\n          }\n          location = lines * this.width * 4;\n          low_nibble = false;\n          continue;\n        } else if (b == 1) {\n          //image end\n          break;\n        } else if (b == 2) {\n          //offset x,y\n          var x = this.buffer.readUInt8(this.pos++);\n          var y = this.buffer.readUInt8(this.pos++);\n          if (this.bottom_up) {\n            lines -= y;\n          } else {\n            lines += y;\n          }\n          location += y * this.width * 4 + x * 4;\n        } else {\n          var c = this.buffer.readUInt8(this.pos++);\n          for (var i = 0; i < b; i++) {\n            if (low_nibble) {\n              setPixelData.call(this, c & 0x0f);\n            } else {\n              setPixelData.call(this, (c & 0xf0) >> 4);\n            }\n            if (i & 1 && i + 1 < b) {\n              c = this.buffer.readUInt8(this.pos++);\n            }\n            low_nibble = !low_nibble;\n          }\n          if ((b + 1 >> 1 & 1) == 1) {\n            this.pos++;\n          }\n        }\n      } else {\n        //encoded mode\n        for (var i = 0; i < a; i++) {\n          if (low_nibble) {\n            setPixelData.call(this, b & 0x0f);\n          } else {\n            setPixelData.call(this, (b & 0xf0) >> 4);\n          }\n          low_nibble = !low_nibble;\n        }\n      }\n    }\n    function setPixelData(rgbIndex) {\n      var rgb = this.palette[rgbIndex];\n      this.data[location] = 0;\n      this.data[location + 1] = rgb.blue;\n      this.data[location + 2] = rgb.green;\n      this.data[location + 3] = rgb.red;\n      location += 4;\n    }\n  } else {\n    var xlen = Math.ceil(this.width / 2);\n    var mode = xlen % 4;\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n      for (var x = 0; x < xlen; x++) {\n        var b = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 2 * 4;\n        var before = b >> 4;\n        var after = b & 0x0F;\n        var rgb = this.palette[before];\n        this.data[location] = 0;\n        this.data[location + 1] = rgb.blue;\n        this.data[location + 2] = rgb.green;\n        this.data[location + 3] = rgb.red;\n        if (x * 2 + 1 >= this.width) break;\n        rgb = this.palette[after];\n        this.data[location + 4] = 0;\n        this.data[location + 4 + 1] = rgb.blue;\n        this.data[location + 4 + 2] = rgb.green;\n        this.data[location + 4 + 3] = rgb.red;\n      }\n      if (mode != 0) {\n        this.pos += 4 - mode;\n      }\n    }\n  }\n};\nBmpDecoder.prototype.bit8 = function () {\n  //RLE-8\n  if (this.compress == 1) {\n    this.data.fill(0xff);\n    var location = 0;\n    var lines = this.bottom_up ? this.height - 1 : 0;\n    while (location < this.data.length) {\n      var a = this.buffer.readUInt8(this.pos++);\n      var b = this.buffer.readUInt8(this.pos++);\n      //absolute mode\n      if (a == 0) {\n        if (b == 0) {\n          //line end\n          if (this.bottom_up) {\n            lines--;\n          } else {\n            lines++;\n          }\n          location = lines * this.width * 4;\n          continue;\n        } else if (b == 1) {\n          //image end\n          break;\n        } else if (b == 2) {\n          //offset x,y\n          var x = this.buffer.readUInt8(this.pos++);\n          var y = this.buffer.readUInt8(this.pos++);\n          if (this.bottom_up) {\n            lines -= y;\n          } else {\n            lines += y;\n          }\n          location += y * this.width * 4 + x * 4;\n        } else {\n          for (var i = 0; i < b; i++) {\n            var c = this.buffer.readUInt8(this.pos++);\n            setPixelData.call(this, c);\n          }\n          if (b & 1 == 1) {\n            this.pos++;\n          }\n        }\n      } else {\n        //encoded mode\n        for (var i = 0; i < a; i++) {\n          setPixelData.call(this, b);\n        }\n      }\n    }\n    function setPixelData(rgbIndex) {\n      var rgb = this.palette[rgbIndex];\n      this.data[location] = 0;\n      this.data[location + 1] = rgb.blue;\n      this.data[location + 2] = rgb.green;\n      this.data[location + 3] = rgb.red;\n      location += 4;\n    }\n  } else {\n    var mode = this.width % 4;\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n      for (var x = 0; x < this.width; x++) {\n        var b = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 4;\n        if (b < this.palette.length) {\n          var rgb = this.palette[b];\n          this.data[location] = 0;\n          this.data[location + 1] = rgb.blue;\n          this.data[location + 2] = rgb.green;\n          this.data[location + 3] = rgb.red;\n        } else {\n          this.data[location] = 0;\n          this.data[location + 1] = 0xFF;\n          this.data[location + 2] = 0xFF;\n          this.data[location + 3] = 0xFF;\n        }\n      }\n      if (mode != 0) {\n        this.pos += 4 - mode;\n      }\n    }\n  }\n};\nBmpDecoder.prototype.bit15 = function () {\n  var dif_w = this.width % 3;\n  var _11111 = parseInt(\"11111\", 2),\n    _1_5 = _11111;\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n    for (var x = 0; x < this.width; x++) {\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos += 2;\n      var blue = (B & _1_5) / _1_5 * 255 | 0;\n      var green = (B >> 5 & _1_5) / _1_5 * 255 | 0;\n      var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;\n      var alpha = B >> 15 ? 0xFF : 0x00;\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = alpha;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\nBmpDecoder.prototype.bit16 = function () {\n  var dif_w = this.width % 2 * 2;\n  //default xrgb555\n  this.maskRed = 0x7C00;\n  this.maskGreen = 0x3E0;\n  this.maskBlue = 0x1F;\n  this.mask0 = 0;\n  if (this.compress == 3) {\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n  }\n  var ns = [0, 0, 0];\n  for (var i = 0; i < 16; i++) {\n    if (this.maskRed >> i & 0x01) ns[0]++;\n    if (this.maskGreen >> i & 0x01) ns[1]++;\n    if (this.maskBlue >> i & 0x01) ns[2]++;\n  }\n  ns[1] += ns[0];\n  ns[2] += ns[1];\n  ns[0] = 8 - ns[0];\n  ns[1] -= 8;\n  ns[2] -= 8;\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n    for (var x = 0; x < this.width; x++) {\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos += 2;\n      var blue = (B & this.maskBlue) << ns[0];\n      var green = (B & this.maskGreen) >> ns[1];\n      var red = (B & this.maskRed) >> ns[2];\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\nBmpDecoder.prototype.bit24 = function () {\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n    for (var x = 0; x < this.width; x++) {\n      //Little Endian rgb\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += this.width % 4;\n  }\n};\n\n/**\n * add 32bit decode func\n * @author soubok\n */\nBmpDecoder.prototype.bit32 = function () {\n  //BI_BITFIELDS\n  if (this.compress == 3) {\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos += 4;\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n      for (var x = 0; x < this.width; x++) {\n        //Little Endian rgba\n        var alpha = this.buffer.readUInt8(this.pos++);\n        var blue = this.buffer.readUInt8(this.pos++);\n        var green = this.buffer.readUInt8(this.pos++);\n        var red = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 4;\n        this.data[location] = alpha;\n        this.data[location + 1] = blue;\n        this.data[location + 2] = green;\n        this.data[location + 3] = red;\n      }\n    }\n  } else {\n    for (var y = this.height - 1; y >= 0; y--) {\n      var line = this.bottom_up ? y : this.height - 1 - y;\n      for (var x = 0; x < this.width; x++) {\n        //Little Endian argb\n        var blue = this.buffer.readUInt8(this.pos++);\n        var green = this.buffer.readUInt8(this.pos++);\n        var red = this.buffer.readUInt8(this.pos++);\n        var alpha = this.buffer.readUInt8(this.pos++);\n        var location = line * this.width * 4 + x * 4;\n        this.data[location] = alpha;\n        this.data[location + 1] = blue;\n        this.data[location + 2] = green;\n        this.data[location + 3] = red;\n      }\n    }\n  }\n};\nBmpDecoder.prototype.getData = function () {\n  return this.data;\n};\nmodule.exports = function (bmpData) {\n  var decoder = new BmpDecoder(bmpData);\n  return decoder;\n};","map":{"version":3,"names":["BmpDecoder","buffer","is_with_alpha","pos","bottom_up","flag","toString","Error","parseHeader","parseRGBA","prototype","fileSize","readUInt32LE","reserved","offset","headerSize","width","height","readInt32LE","planes","readUInt16LE","bitPP","compress","rawSize","hr","vr","colors","importantColors","len","palette","Array","i","blue","readUInt8","green","red","quad","bitn","data","Buffer","bit1","xlen","Math","ceil","mode","y","line","x","b","location","rgb","bit4","fill","lines","low_nibble","length","a","c","setPixelData","call","rgbIndex","before","after","bit8","bit15","dif_w","_11111","parseInt","_1_5","B","alpha","bit16","maskRed","maskGreen","maskBlue","mask0","ns","bit24","bit32","getData","module","exports","bmpData","decoder"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/bmp-js/lib/decoder.js"],"sourcesContent":["/**\n * @author shaozilee\n *\n * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp\n *\n */\n\nfunction BmpDecoder(buffer,is_with_alpha) {\n  this.pos = 0;\n  this.buffer = buffer;\n  this.is_with_alpha = !!is_with_alpha;\n  this.bottom_up = true;\n  this.flag = this.buffer.toString(\"utf-8\", 0, this.pos += 2);\n  if (this.flag != \"BM\") throw new Error(\"Invalid BMP File\");\n  this.parseHeader();\n  this.parseRGBA();\n}\n\nBmpDecoder.prototype.parseHeader = function() {\n  this.fileSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.reserved = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.offset = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.headerSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.width = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.height = this.buffer.readInt32LE(this.pos);\n  this.pos += 4;\n  this.planes = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.bitPP = this.buffer.readUInt16LE(this.pos);\n  this.pos += 2;\n  this.compress = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.rawSize = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.hr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.vr = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.colors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n  this.importantColors = this.buffer.readUInt32LE(this.pos);\n  this.pos += 4;\n\n  if(this.bitPP === 16 && this.is_with_alpha){\n    this.bitPP = 15\n  }\n  if (this.bitPP < 15) {\n    var len = this.colors === 0 ? 1 << this.bitPP : this.colors;\n    this.palette = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var quad = this.buffer.readUInt8(this.pos++);\n      this.palette[i] = {\n        red: red,\n        green: green,\n        blue: blue,\n        quad: quad\n      };\n    }\n  }\n  if(this.height < 0) {\n    this.height *= -1;\n    this.bottom_up = false;\n  }\n\n}\n\nBmpDecoder.prototype.parseRGBA = function() {\n    var bitn = \"bit\" + this.bitPP;\n    var len = this.width * this.height * 4;\n    this.data = new Buffer(len);\n    this[bitn]();\n};\n\nBmpDecoder.prototype.bit1 = function() {\n  var xlen = Math.ceil(this.width / 8);\n  var mode = xlen%4;\n  var y = this.height >= 0 ? this.height - 1 : -this.height\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < xlen; x++) {\n      var b = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x*8*4;\n      for (var i = 0; i < 8; i++) {\n        if(x*8+i<this.width){\n          var rgb = this.palette[((b>>(7-i))&0x1)];\n\n          this.data[location+i*4] = 0;\n          this.data[location+i*4 + 1] = rgb.blue;\n          this.data[location+i*4 + 2] = rgb.green;\n          this.data[location+i*4 + 3] = rgb.red;\n\n        }else{\n          break;\n        }\n      }\n    }\n\n    if (mode != 0){\n      this.pos+=(4 - mode);\n    }\n  }\n};\n\nBmpDecoder.prototype.bit4 = function() {\n    //RLE-4\n    if(this.compress == 2){\n        this.data.fill(0xff);\n\n        var location = 0;\n        var lines = this.bottom_up?this.height-1:0;\n        var low_nibble = false;//for all count of pixel\n\n        while(location<this.data.length){\n            var a = this.buffer.readUInt8(this.pos++);\n            var b = this.buffer.readUInt8(this.pos++);\n            //absolute mode\n            if(a == 0){\n                if(b == 0){//line end\n                    if(this.bottom_up){\n                        lines--;\n                    }else{\n                        lines++;\n                    }\n                    location = lines*this.width*4;\n                    low_nibble = false;\n                    continue;\n                }else if(b == 1){//image end\n                    break;\n                }else if(b ==2){\n                    //offset x,y\n                    var x = this.buffer.readUInt8(this.pos++);\n                    var y = this.buffer.readUInt8(this.pos++);\n                    if(this.bottom_up){\n                        lines-=y;\n                    }else{\n                        lines+=y;\n                    }\n\n                    location +=(y*this.width*4+x*4);\n                }else{\n                    var c = this.buffer.readUInt8(this.pos++);\n                    for(var i=0;i<b;i++){\n                        if (low_nibble) {\n                            setPixelData.call(this, (c & 0x0f));\n                        } else {\n                            setPixelData.call(this, (c & 0xf0)>>4);\n                        }\n\n                        if ((i & 1) && (i+1 < b)){\n                            c = this.buffer.readUInt8(this.pos++);\n                        }\n\n                        low_nibble = !low_nibble;\n                    }\n\n                    if ((((b+1) >> 1) & 1 ) == 1){\n                        this.pos++\n                    }\n                }\n\n            }else{//encoded mode\n                for (var i = 0; i < a; i++) {\n                    if (low_nibble) {\n                        setPixelData.call(this, (b & 0x0f));\n                    } else {\n                        setPixelData.call(this, (b & 0xf0)>>4);\n                    }\n                    low_nibble = !low_nibble;\n                }\n            }\n\n        }\n\n\n\n\n        function setPixelData(rgbIndex){\n            var rgb = this.palette[rgbIndex];\n            this.data[location] = 0;\n            this.data[location + 1] = rgb.blue;\n            this.data[location + 2] = rgb.green;\n            this.data[location + 3] = rgb.red;\n            location+=4;\n        }\n    }else{\n\n      var xlen = Math.ceil(this.width/2);\n      var mode = xlen%4;\n      for (var y = this.height - 1; y >= 0; y--) {\n        var line = this.bottom_up ? y : this.height - 1 - y\n        for (var x = 0; x < xlen; x++) {\n          var b = this.buffer.readUInt8(this.pos++);\n          var location = line * this.width * 4 + x*2*4;\n\n          var before = b>>4;\n          var after = b&0x0F;\n\n          var rgb = this.palette[before];\n          this.data[location] = 0;\n          this.data[location + 1] = rgb.blue;\n          this.data[location + 2] = rgb.green;\n          this.data[location + 3] = rgb.red;\n\n\n          if(x*2+1>=this.width)break;\n\n          rgb = this.palette[after];\n\n          this.data[location+4] = 0;\n          this.data[location+4 + 1] = rgb.blue;\n          this.data[location+4 + 2] = rgb.green;\n          this.data[location+4 + 3] = rgb.red;\n\n        }\n\n        if (mode != 0){\n          this.pos+=(4 - mode);\n        }\n      }\n\n    }\n\n};\n\nBmpDecoder.prototype.bit8 = function() {\n    //RLE-8\n    if(this.compress == 1){\n        this.data.fill(0xff);\n\n        var location = 0;\n        var lines = this.bottom_up?this.height-1:0;\n\n        while(location<this.data.length){\n            var a = this.buffer.readUInt8(this.pos++);\n            var b = this.buffer.readUInt8(this.pos++);\n            //absolute mode\n            if(a == 0){\n                if(b == 0){//line end\n                    if(this.bottom_up){\n                        lines--;\n                    }else{\n                        lines++;\n                    }\n                    location = lines*this.width*4;\n                    continue;\n                }else if(b == 1){//image end\n                    break;\n                }else if(b ==2){\n                    //offset x,y\n                    var x = this.buffer.readUInt8(this.pos++);\n                    var y = this.buffer.readUInt8(this.pos++);\n                    if(this.bottom_up){\n                        lines-=y;\n                    }else{\n                        lines+=y;\n                    }\n\n                    location +=(y*this.width*4+x*4);\n                }else{\n                    for(var i=0;i<b;i++){\n                        var c = this.buffer.readUInt8(this.pos++);\n                        setPixelData.call(this, c);\n                    }\n                    if(b&1 == 1){\n                        this.pos++;\n                    }\n\n                }\n\n            }else{//encoded mode\n                for (var i = 0; i < a; i++) {\n                    setPixelData.call(this, b);\n                }\n            }\n\n        }\n\n\n\n\n        function setPixelData(rgbIndex){\n            var rgb = this.palette[rgbIndex];\n            this.data[location] = 0;\n            this.data[location + 1] = rgb.blue;\n            this.data[location + 2] = rgb.green;\n            this.data[location + 3] = rgb.red;\n            location+=4;\n        }\n    }else {\n        var mode = this.width % 4;\n        for (var y = this.height - 1; y >= 0; y--) {\n            var line = this.bottom_up ? y : this.height - 1 - y\n            for (var x = 0; x < this.width; x++) {\n                var b = this.buffer.readUInt8(this.pos++);\n                var location = line * this.width * 4 + x * 4;\n                if (b < this.palette.length) {\n                    var rgb = this.palette[b];\n\n                    this.data[location] = 0;\n                    this.data[location + 1] = rgb.blue;\n                    this.data[location + 2] = rgb.green;\n                    this.data[location + 3] = rgb.red;\n\n                } else {\n                    this.data[location] = 0;\n                    this.data[location + 1] = 0xFF;\n                    this.data[location + 2] = 0xFF;\n                    this.data[location + 3] = 0xFF;\n                }\n            }\n            if (mode != 0) {\n                this.pos += (4 - mode);\n            }\n        }\n    }\n};\n\nBmpDecoder.prototype.bit15 = function() {\n  var dif_w =this.width % 3;\n  var _11111 = parseInt(\"11111\", 2),_1_5 = _11111;\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < this.width; x++) {\n\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos+=2;\n      var blue = (B & _1_5) / _1_5 * 255 | 0;\n      var green = (B >> 5 & _1_5 ) / _1_5 * 255 | 0;\n      var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;\n      var alpha = (B>>15)?0xFF:0x00;\n\n      var location = line * this.width * 4 + x * 4;\n\n      this.data[location] = alpha;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit16 = function() {\n  var dif_w =(this.width % 2)*2;\n  //default xrgb555\n  this.maskRed = 0x7C00;\n  this.maskGreen = 0x3E0;\n  this.maskBlue =0x1F;\n  this.mask0 = 0;\n\n  if(this.compress == 3){\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n  }\n\n\n  var ns=[0,0,0];\n  for (var i=0;i<16;i++){\n    if ((this.maskRed>>i)&0x01) ns[0]++;\n    if ((this.maskGreen>>i)&0x01) ns[1]++;\n    if ((this.maskBlue>>i)&0x01) ns[2]++;\n  }\n  ns[1]+=ns[0]; ns[2]+=ns[1];\tns[0]=8-ns[0]; ns[1]-=8; ns[2]-=8;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n    for (var x = 0; x < this.width; x++) {\n\n      var B = this.buffer.readUInt16LE(this.pos);\n      this.pos+=2;\n\n      var blue = (B&this.maskBlue)<<ns[0];\n      var green = (B&this.maskGreen)>>ns[1];\n      var red = (B&this.maskRed)>>ns[2];\n\n      var location = line * this.width * 4 + x * 4;\n\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit24 = function() {\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y\n    for (var x = 0; x < this.width; x++) {\n      //Little Endian rgb\n      var blue = this.buffer.readUInt8(this.pos++);\n      var green = this.buffer.readUInt8(this.pos++);\n      var red = this.buffer.readUInt8(this.pos++);\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = 0;\n      this.data[location + 1] = blue;\n      this.data[location + 2] = green;\n      this.data[location + 3] = red;\n    }\n    //skip extra bytes\n    this.pos += (this.width % 4);\n  }\n\n};\n\n/**\n * add 32bit decode func\n * @author soubok\n */\nBmpDecoder.prototype.bit32 = function() {\n  //BI_BITFIELDS\n  if(this.compress == 3){\n    this.maskRed = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskGreen = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.maskBlue = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n    this.mask0 = this.buffer.readUInt32LE(this.pos);\n    this.pos+=4;\n      for (var y = this.height - 1; y >= 0; y--) {\n          var line = this.bottom_up ? y : this.height - 1 - y;\n          for (var x = 0; x < this.width; x++) {\n              //Little Endian rgba\n              var alpha = this.buffer.readUInt8(this.pos++);\n              var blue = this.buffer.readUInt8(this.pos++);\n              var green = this.buffer.readUInt8(this.pos++);\n              var red = this.buffer.readUInt8(this.pos++);\n              var location = line * this.width * 4 + x * 4;\n              this.data[location] = alpha;\n              this.data[location + 1] = blue;\n              this.data[location + 2] = green;\n              this.data[location + 3] = red;\n          }\n      }\n\n  }else{\n      for (var y = this.height - 1; y >= 0; y--) {\n          var line = this.bottom_up ? y : this.height - 1 - y;\n          for (var x = 0; x < this.width; x++) {\n              //Little Endian argb\n              var blue = this.buffer.readUInt8(this.pos++);\n              var green = this.buffer.readUInt8(this.pos++);\n              var red = this.buffer.readUInt8(this.pos++);\n              var alpha = this.buffer.readUInt8(this.pos++);\n              var location = line * this.width * 4 + x * 4;\n              this.data[location] = alpha;\n              this.data[location + 1] = blue;\n              this.data[location + 2] = green;\n              this.data[location + 3] = red;\n          }\n      }\n\n  }\n\n\n\n\n};\n\nBmpDecoder.prototype.getData = function() {\n  return this.data;\n};\n\nmodule.exports = function(bmpData) {\n  var decoder = new BmpDecoder(bmpData);\n  return decoder;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}