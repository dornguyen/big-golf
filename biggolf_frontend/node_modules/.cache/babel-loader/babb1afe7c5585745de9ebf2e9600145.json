{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWindows = isWindows;\nexports.isMac = isMac;\nexports.isLinux = isLinux;\nexports.isOSWin64 = isOSWin64;\nexports.arch = arch;\nexports.macOsxVersion = macOsxVersion;\nrequire(\"source-map-support/register\");\nvar _teen_process = require(\"teen_process\");\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\nvar _os = _interopRequireDefault(require(\"os\"));\nconst VERSION_PATTERN = /^(\\d+\\.\\d+)/m;\nfunction isWindows() {\n  return _os.default.type() === 'Windows_NT';\n}\nfunction isMac() {\n  return _os.default.type() === 'Darwin';\n}\nfunction isLinux() {\n  return !isWindows() && !isMac();\n}\nfunction isOSWin64() {\n  return process.arch === 'x64' || _lodash.default.has(process.env, 'PROCESSOR_ARCHITEW6432');\n}\nasync function arch() {\n  if (isLinux() || isMac()) {\n    let {\n      stdout\n    } = await (0, _teen_process.exec)('uname', ['-m']);\n    return stdout.trim() === 'i686' ? '32' : '64';\n  } else if (isWindows()) {\n    let is64 = this.isOSWin64();\n    return is64 ? '64' : '32';\n  }\n}\nasync function macOsxVersion() {\n  let stdout;\n  try {\n    stdout = (await (0, _teen_process.exec)('sw_vers', ['-productVersion'])).stdout.trim();\n  } catch (err) {\n    throw new Error(`Could not detect Mac OS X Version: ${err}`);\n  }\n  const versionMatch = VERSION_PATTERN.exec(stdout);\n  if (!versionMatch) {\n    throw new Error(`Could not detect Mac OS X Version from sw_vers output: '${stdout}'`);\n  }\n  return versionMatch[1];\n}\nrequire('source-map-support').install();","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AAEA,MAAMA,eAAe,GAAG,cAAxB;AAEA,SAASC,SAAT,GAAsB;EACpB,OAAOC,YAAGC,IAAH,OAAc,YAArB;AACD;AAED,SAASC,KAAT,GAAkB;EAChB,OAAOF,YAAGC,IAAH,OAAc,QAArB;AACD;AAED,SAASE,OAAT,GAAoB;EAClB,OAAO,CAACJ,SAAS,EAAV,IAAgB,CAACG,KAAK,EAA7B;AACD;AAED,SAASE,SAAT,GAAsB;EACpB,OAAOC,OAAO,CAACC,IAAR,KAAiB,KAAjB,IAA0BC,gBAAEC,GAAF,CAAMH,OAAO,CAACI,GAAd,EAAmB,wBAAnB,CAAjC;AACD;AAED,eAAeH,IAAf,GAAuB;EACrB,IAAIH,OAAO,MAAMD,KAAK,EAAtB,EAA0B;IACxB,IAAI;MAACQ;IAAD,IAAW,MAAM,wBAAK,OAAL,EAAc,CAAC,IAAD,CAAd,CAArB;IACA,OAAOA,MAAM,CAACC,IAAP,OAAkB,MAAlB,GAA2B,IAA3B,GAAkC,IAAzC;EACD,CAHD,MAGO,IAAIZ,SAAS,EAAb,EAAiB;IACtB,IAAIa,IAAI,GAAG,KAAKR,SAAL,EAAX;IACA,OAAOQ,IAAI,GAAG,IAAH,GAAU,IAArB;EACD;AACF;AAED,eAAeC,aAAf,GAAgC;EAC9B,IAAIH,MAAJ;EACA,IAAI;IACFA,MAAM,GAAG,CAAC,MAAM,wBAAK,SAAL,EAAgB,CAAC,iBAAD,CAAhB,CAAP,EAA6CA,MAA7C,CAAoDC,IAApD,EAAT;EACD,CAFD,CAEE,OAAOG,GAAP,EAAY;IACZ,MAAM,IAAIC,KAAJ,CAAW,sCAAqCD,GAAI,EAApD,CAAN;EACD;EAED,MAAME,YAAY,GAAGlB,eAAe,CAACmB,IAAhB,CAAqBP,MAArB,CAArB;EACA,IAAI,CAACM,YAAL,EAAmB;IACjB,MAAM,IAAID,KAAJ,CAAW,2DAA0DL,MAAO,GAA5E,CAAN;EACD;EACD,OAAOM,YAAY,CAAC,CAAD,CAAnB;AACD;AAAAE","names":["VERSION_PATTERN","isWindows","os","type","isMac","isLinux","isOSWin64","process","arch","_","has","env","stdout","trim","is64","macOsxVersion","err","Error","versionMatch","exec","require"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\appium-support\\lib\\system.js"],"sourcesContent":["import { exec } from 'teen_process';\nimport _ from 'lodash';\nimport os from 'os';\n\nconst VERSION_PATTERN = /^(\\d+\\.\\d+)/m;\n\nfunction isWindows () {\n  return os.type() === 'Windows_NT';\n}\n\nfunction isMac () {\n  return os.type() === 'Darwin';\n}\n\nfunction isLinux () {\n  return !isWindows() && !isMac();\n}\n\nfunction isOSWin64 () {\n  return process.arch === 'x64' || _.has(process.env, 'PROCESSOR_ARCHITEW6432');\n}\n\nasync function arch () {\n  if (isLinux() || isMac()) {\n    let {stdout} = await exec('uname', ['-m']);\n    return stdout.trim() === 'i686' ? '32' : '64';\n  } else if (isWindows()) {\n    let is64 = this.isOSWin64();\n    return is64 ? '64' : '32';\n  }\n}\n\nasync function macOsxVersion () {\n  let stdout;\n  try {\n    stdout = (await exec('sw_vers', ['-productVersion'])).stdout.trim();\n  } catch (err) {\n    throw new Error(`Could not detect Mac OS X Version: ${err}`);\n  }\n\n  const versionMatch = VERSION_PATTERN.exec(stdout);\n  if (!versionMatch) {\n    throw new Error(`Could not detect Mac OS X Version from sw_vers output: '${stdout}'`);\n  }\n  return versionMatch[1];\n}\n\nexport { isWindows, isMac, isLinux, isOSWin64, arch, macOsxVersion };\n"]},"metadata":{},"sourceType":"script"}