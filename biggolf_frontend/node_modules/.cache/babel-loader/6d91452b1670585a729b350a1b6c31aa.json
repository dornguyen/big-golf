{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clear = clear;\nexports.default = void 0;\nexports.init = init;\nrequire(\"source-map-support/register\");\nvar _npmlog = _interopRequireDefault(require(\"npmlog\"));\nvar _winston = require(\"winston\");\nvar _appiumSupport = require(\"appium-support\");\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n_appiumSupport.logger.patchLogger(_npmlog.default);\nglobal._global_npmlog = _npmlog.default;\n_npmlog.default.level = 'silent';\nconst levels = {\n  debug: 4,\n  info: 3,\n  warn: 2,\n  error: 1\n};\nconst colors = {\n  info: 'cyan',\n  debug: 'grey',\n  warn: 'yellow',\n  error: 'red'\n};\nconst npmToWinstonLevels = {\n  silly: 'debug',\n  verbose: 'debug',\n  debug: 'debug',\n  info: 'info',\n  http: 'info',\n  warn: 'warn',\n  error: 'error'\n};\nlet log = null;\nlet useLocalTimeZone = false;\nconst timestampFormat = _winston.format.timestamp({\n  format() {\n    let date = new Date();\n    if (useLocalTimeZone) {\n      date = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);\n    }\n    return date.toISOString().replace(/[TZ]/g, ' ').replace(/\\./g, ':').trim();\n  }\n});\nconst colorizeFormat = _winston.format.colorize({\n  colors\n});\nconst stripColorFormat = (0, _winston.format)(function stripColor(info) {\n  const code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n  info.message = info.message.replace(code, '');\n  return info;\n})();\nfunction createConsoleTransport(args, logLvl) {\n  return new _winston.transports.Console({\n    name: 'console',\n    handleExceptions: true,\n    exitOnError: false,\n    json: false,\n    level: logLvl,\n    stderrLevels: ['error'],\n    format: _winston.format.combine((0, _winston.format)(function adjustDebug(info) {\n      if (info.level === 'debug') {\n        info.level = 'info';\n        info.message = `[debug] ${info.message}`;\n      }\n      return info;\n    })(), timestampFormat, args.logNoColors ? stripColorFormat : colorizeFormat, _winston.format.printf(function printInfo(info) {\n      return `${args.logTimestamp ? `${info.timestamp} - ` : ''}${info.message}`;\n    }))\n  });\n}\nfunction createFileTransport(args, logLvl) {\n  return new _winston.transports.File({\n    name: 'file',\n    filename: args.logFile,\n    maxFiles: 1,\n    handleExceptions: true,\n    exitOnError: false,\n    json: false,\n    level: logLvl,\n    format: _winston.format.combine(stripColorFormat, timestampFormat, _winston.format.printf(function printInfo(info) {\n      return `${info.timestamp} ${info.message}`;\n    }))\n  });\n}\nfunction createHttpTransport(args, logLvl) {\n  let host = '127.0.0.1';\n  let port = 9003;\n  if (args.webhook.match(':')) {\n    const hostAndPort = args.webhook.split(':');\n    host = hostAndPort[0];\n    port = parseInt(hostAndPort[1], 10);\n  }\n  return new _winston.transports.Http({\n    name: 'http',\n    host,\n    port,\n    path: '/',\n    handleExceptions: true,\n    exitOnError: false,\n    json: false,\n    level: logLvl,\n    format: _winston.format.combine(stripColorFormat, _winston.format.printf(function printInfo(info) {\n      return `${info.timestamp} ${info.message}`;\n    }))\n  });\n}\nasync function createTransports(args) {\n  let transports = [];\n  let consoleLogLevel = null;\n  let fileLogLevel = null;\n  if (args.loglevel && args.loglevel.match(':')) {\n    const lvlPair = args.loglevel.split(':');\n    consoleLogLevel = lvlPair[0] || consoleLogLevel;\n    fileLogLevel = lvlPair[1] || fileLogLevel;\n  } else {\n    consoleLogLevel = fileLogLevel = args.loglevel;\n  }\n  transports.push(createConsoleTransport(args, consoleLogLevel));\n  if (args.logFile) {\n    try {\n      if (await _appiumSupport.fs.exists(args.logFile)) {\n        await _appiumSupport.fs.unlink(args.logFile);\n      }\n      transports.push(createFileTransport(args, fileLogLevel));\n    } catch (e) {\n      console.log(`Tried to attach logging to file '${args.logFile}' but an error ` + `occurred: ${e.message}`);\n    }\n  }\n  if (args.webhook) {\n    try {\n      transports.push(createHttpTransport(args, fileLogLevel));\n    } catch (e) {\n      console.log(`Tried to attach logging to Http at ${args.webhook} but ` + `an error occurred: ${e.message}`);\n    }\n  }\n  return transports;\n}\nasync function init(args) {\n  useLocalTimeZone = args.localTimezone;\n  clear();\n  log = (0, _winston.createLogger)({\n    transports: await createTransports(args),\n    levels\n  });\n  _npmlog.default.on('log', logObj => {\n    const winstonLevel = npmToWinstonLevels[logObj.level] || 'info';\n    let msg = logObj.message;\n    if (logObj.prefix) {\n      const prefix = `[${logObj.prefix}]`;\n      msg = `${args.logNoColors ? prefix : prefix.magenta} ${msg}`;\n    }\n    log[winstonLevel](msg);\n    if (args.logHandler && _lodash.default.isFunction(args.logHandler)) {\n      args.logHandler(logObj.level, msg);\n    }\n  });\n}\nfunction clear() {\n  if (log) {\n    for (let transport of _lodash.default.keys(log.transports)) {\n      log.remove(transport);\n    }\n  }\n  _npmlog.default.removeAllListeners('log');\n}\nvar _default = init;\nexports.default = _default;\nrequire('source-map-support').install();","map":{"version":3,"mappings":"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","names":["logger","patchLogger","npmlog","global","_global_npmlog","level","levels","debug","info","warn","error","colors","npmToWinstonLevels","silly","verbose","http","log","useLocalTimeZone","timestampFormat","format","timestamp","date","Date","valueOf","getTimezoneOffset","toISOString","replace","trim","colorizeFormat","colorize","stripColorFormat","stripColor","code","message","createConsoleTransport","args","logLvl","transports","Console","name","handleExceptions","exitOnError","json","stderrLevels","combine","adjustDebug","logNoColors","printf","printInfo","logTimestamp","createFileTransport","File","filename","logFile","maxFiles","createHttpTransport","host","port","webhook","match","hostAndPort","split","parseInt","Http","path","createTransports","consoleLogLevel","fileLogLevel","loglevel","lvlPair","push","fs","exists","unlink","e","console","init","localTimezone","clear","on","logObj","winstonLevel","msg","prefix","magenta","logHandler","_","isFunction","transport","keys","remove","removeAllListeners"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\lib\\logsink.js"],"sourcesContent":["import npmlog from 'npmlog';\nimport { createLogger, format, transports } from 'winston';\nimport { fs, logger } from 'appium-support';\nimport _ from 'lodash';\n\n\n// set up distributed logging before everything else\nlogger.patchLogger(npmlog);\nglobal._global_npmlog = npmlog;\n\n// npmlog is used only for emitting, we use winston for output\nnpmlog.level = 'silent';\nconst levels = {\n  debug: 4,\n  info: 3,\n  warn: 2,\n  error: 1,\n};\n\nconst colors = {\n  info: 'cyan',\n  debug: 'grey',\n  warn: 'yellow',\n  error: 'red',\n};\n\nconst npmToWinstonLevels = {\n  silly: 'debug',\n  verbose: 'debug',\n  debug: 'debug',\n  info: 'info',\n  http: 'info',\n  warn: 'warn',\n  error: 'error',\n};\n\nlet log = null;\nlet useLocalTimeZone = false;\n\n// add the timestamp in the correct format to the log info object\nconst timestampFormat = format.timestamp({\n  format () {\n    let date = new Date();\n    if (useLocalTimeZone) {\n      date = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);\n    }\n    // '2012-11-04T14:51:06.157Z' -> '2012-11-04 14:51:06:157'\n    return date.toISOString()\n      .replace(/[TZ]/g, ' ')\n      .replace(/\\./g, ':')\n      .trim();\n  },\n});\n\n// set the custom colors\nconst colorizeFormat = format.colorize({\n  colors,\n});\n\n// Strip the color marking within messages\nconst stripColorFormat = format(function stripColor (info) {\n  const code = /\\u001b\\[(\\d+(;\\d+)*)?m/g; // eslint-disable-line no-control-regex\n  info.message = info.message.replace(code, '');\n  return info;\n})();\n\nfunction createConsoleTransport (args, logLvl) {\n  return new (transports.Console)({\n    name: 'console',\n    handleExceptions: true,\n    exitOnError: false,\n    json: false,\n    level: logLvl,\n    stderrLevels: ['error'],\n    format: format.combine(\n      format(function adjustDebug (info) {\n        // prepend debug marker, and shift to `info` log level\n        if (info.level === 'debug') {\n          info.level = 'info';\n          info.message = `[debug] ${info.message}`;\n        }\n        return info;\n      })(),\n      timestampFormat,\n      args.logNoColors ? stripColorFormat : colorizeFormat,\n      format.printf(function printInfo (info) {\n        return `${args.logTimestamp ? `${info.timestamp} - ` : ''}${info.message}`;\n      })\n    ),\n  });\n}\n\nfunction createFileTransport (args, logLvl) {\n  return new (transports.File)({\n    name: 'file',\n    filename: args.logFile,\n    maxFiles: 1,\n    handleExceptions: true,\n    exitOnError: false,\n    json: false,\n    level: logLvl,\n    format: format.combine(\n      stripColorFormat,\n      timestampFormat,\n      format.printf(function printInfo (info) {\n        return `${info.timestamp} ${info.message}`;\n      })\n    )\n  });\n}\n\nfunction createHttpTransport (args, logLvl) {\n  let host = '127.0.0.1';\n  let port = 9003;\n\n  if (args.webhook.match(':')) {\n    const hostAndPort = args.webhook.split(':');\n    host = hostAndPort[0];\n    port = parseInt(hostAndPort[1], 10);\n  }\n\n  return new (transports.Http)({\n    name: 'http',\n    host,\n    port,\n    path: '/',\n    handleExceptions: true,\n    exitOnError: false,\n    json: false,\n    level: logLvl,\n    format: format.combine(\n      stripColorFormat,\n      format.printf(function printInfo (info) {\n        return `${info.timestamp} ${info.message}`;\n      })\n    ),\n  });\n}\n\nasync function createTransports (args) {\n  let transports = [];\n  let consoleLogLevel = null;\n  let fileLogLevel = null;\n\n  if (args.loglevel && args.loglevel.match(':')) {\n    // --log-level arg can optionally provide diff logging levels for console and file, separated by a colon\n    const lvlPair = args.loglevel.split(':');\n    consoleLogLevel = lvlPair[0] || consoleLogLevel;\n    fileLogLevel = lvlPair[1] || fileLogLevel;\n  } else {\n    consoleLogLevel = fileLogLevel = args.loglevel;\n  }\n\n  transports.push(createConsoleTransport(args, consoleLogLevel));\n\n  if (args.logFile) {\n    try {\n      // if we don't delete the log file, winston will always append and it will grow infinitely large;\n      // winston allows for limiting log file size, but as of 9.2.14 there's a serious bug when using\n      // maxFiles and maxSize together. https://github.com/flatiron/winston/issues/397\n      if (await fs.exists(args.logFile)) {\n        await fs.unlink(args.logFile);\n      }\n\n      transports.push(createFileTransport(args, fileLogLevel));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(`Tried to attach logging to file '${args.logFile}' but an error ` +\n                  `occurred: ${e.message}`);\n    }\n  }\n\n  if (args.webhook) {\n    try {\n      transports.push(createHttpTransport(args, fileLogLevel));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(`Tried to attach logging to Http at ${args.webhook} but ` +\n                  `an error occurred: ${e.message}`);\n    }\n  }\n\n  return transports;\n}\n\nasync function init (args) {\n  // set de facto param passed to timestamp function\n  useLocalTimeZone = args.localTimezone;\n\n  // clean up in case we have initiated before since npmlog is a global object\n  clear();\n\n  log = createLogger({\n    transports: await createTransports(args),\n    levels,\n  });\n\n  // Capture logs emitted via npmlog and pass them through winston\n  npmlog.on('log', (logObj) => {\n    const winstonLevel = npmToWinstonLevels[logObj.level] || 'info';\n    let msg = logObj.message;\n    if (logObj.prefix) {\n      const prefix = `[${logObj.prefix}]`;\n      msg = `${args.logNoColors ? prefix : prefix.magenta} ${msg}`;\n    }\n    log[winstonLevel](msg);\n    if (args.logHandler && _.isFunction(args.logHandler)) {\n      args.logHandler(logObj.level, msg);\n    }\n\n  });\n}\n\nfunction clear () {\n  if (log) {\n    for (let transport of _.keys(log.transports)) {\n      log.remove(transport);\n    }\n  }\n  npmlog.removeAllListeners('log');\n}\n\n\nexport { init, clear };\nexport default init;\n"]},"metadata":{},"sourceType":"script"}