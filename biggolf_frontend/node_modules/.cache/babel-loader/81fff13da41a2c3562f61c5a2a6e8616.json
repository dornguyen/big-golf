{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar base64 = require('base64-js');\nvar xmlbuilder = require('xmlbuilder');\n\n/**\n * Module exports.\n */\n\nexports.build = build;\n\n/**\n * Accepts a `Date` instance and returns an ISO date string.\n *\n * @param {Date} d - Date instance to serialize\n * @returns {String} ISO date string representation of `d`\n * @api private\n */\n\nfunction ISODateString(d) {\n  function pad(n) {\n    return n < 10 ? '0' + n : n;\n  }\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + 'Z';\n}\n\n/**\n * Returns the internal \"type\" of `obj` via the\n * `Object.prototype.toString()` trick.\n *\n * @param {Mixed} obj - any value\n * @returns {String} the internal \"type\" name\n * @api private\n */\n\nvar toString = Object.prototype.toString;\nfunction type(obj) {\n  var m = toString.call(obj).match(/\\[object (.*)\\]/);\n  return m ? m[1] : m;\n}\n\n/**\n * Generate an XML plist string from the input object `obj`.\n *\n * @param {Object} obj - the object to convert\n * @param {Object} [opts] - optional options object\n * @returns {String} converted plist XML string\n * @api public\n */\n\nfunction build(obj, opts) {\n  var XMLHDR = {\n    version: '1.0',\n    encoding: 'UTF-8'\n  };\n  var XMLDTD = {\n    pubid: '-//Apple//DTD PLIST 1.0//EN',\n    sysid: 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'\n  };\n  var doc = xmlbuilder.create('plist');\n  doc.dec(XMLHDR.version, XMLHDR.encoding, XMLHDR.standalone);\n  doc.dtd(XMLDTD.pubid, XMLDTD.sysid);\n  doc.att('version', '1.0');\n  walk_obj(obj, doc);\n  if (!opts) opts = {};\n  // default `pretty` to `true`\n  opts.pretty = opts.pretty !== false;\n  return doc.end(opts);\n}\n\n/**\n * depth first, recursive traversal of a javascript object. when complete,\n * next_child contains a reference to the build XML object.\n *\n * @api private\n */\n\nfunction walk_obj(next, next_child) {\n  var tag_type, i, prop;\n  var name = type(next);\n  if ('Undefined' == name) {\n    return;\n  } else if (Array.isArray(next)) {\n    next_child = next_child.ele('array');\n    for (i = 0; i < next.length; i++) {\n      walk_obj(next[i], next_child);\n    }\n  } else if (Buffer.isBuffer(next)) {\n    next_child.ele('data').raw(next.toString('base64'));\n  } else if ('Object' == name) {\n    next_child = next_child.ele('dict');\n    for (prop in next) {\n      if (next.hasOwnProperty(prop)) {\n        next_child.ele('key').txt(prop);\n        walk_obj(next[prop], next_child);\n      }\n    }\n  } else if ('Number' == name) {\n    // detect if this is an integer or real\n    // TODO: add an ability to force one way or another via a \"cast\"\n    tag_type = next % 1 === 0 ? 'integer' : 'real';\n    next_child.ele(tag_type).txt(next.toString());\n  } else if ('Date' == name) {\n    next_child.ele('date').txt(ISODateString(new Date(next)));\n  } else if ('Boolean' == name) {\n    next_child.ele(next ? 'true' : 'false');\n  } else if ('String' == name) {\n    next_child.ele('string').txt(next);\n  } else if ('ArrayBuffer' == name) {\n    next_child.ele('data').raw(base64.fromByteArray(next));\n  } else if (next && next.buffer && 'ArrayBuffer' == type(next.buffer)) {\n    // a typed array\n    next_child.ele('data').raw(base64.fromByteArray(new Uint8Array(next.buffer), next_child));\n  }\n}","map":{"version":3,"names":["base64","require","xmlbuilder","exports","build","ISODateString","d","pad","n","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toString","Object","prototype","type","obj","m","call","match","opts","XMLHDR","version","encoding","XMLDTD","pubid","sysid","doc","create","dec","standalone","dtd","att","walk_obj","pretty","end","next","next_child","tag_type","i","prop","name","Array","isArray","ele","length","Buffer","isBuffer","raw","hasOwnProperty","txt","Date","fromByteArray","buffer","Uint8Array"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/plist/lib/build.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar base64 = require('base64-js');\nvar xmlbuilder = require('xmlbuilder');\n\n/**\n * Module exports.\n */\n\nexports.build = build;\n\n/**\n * Accepts a `Date` instance and returns an ISO date string.\n *\n * @param {Date} d - Date instance to serialize\n * @returns {String} ISO date string representation of `d`\n * @api private\n */\n\nfunction ISODateString(d){\n  function pad(n){\n    return n < 10 ? '0' + n : n;\n  }\n  return d.getUTCFullYear()+'-'\n    + pad(d.getUTCMonth()+1)+'-'\n    + pad(d.getUTCDate())+'T'\n    + pad(d.getUTCHours())+':'\n    + pad(d.getUTCMinutes())+':'\n    + pad(d.getUTCSeconds())+'Z';\n}\n\n/**\n * Returns the internal \"type\" of `obj` via the\n * `Object.prototype.toString()` trick.\n *\n * @param {Mixed} obj - any value\n * @returns {String} the internal \"type\" name\n * @api private\n */\n\nvar toString = Object.prototype.toString;\nfunction type (obj) {\n  var m = toString.call(obj).match(/\\[object (.*)\\]/);\n  return m ? m[1] : m;\n}\n\n/**\n * Generate an XML plist string from the input object `obj`.\n *\n * @param {Object} obj - the object to convert\n * @param {Object} [opts] - optional options object\n * @returns {String} converted plist XML string\n * @api public\n */\n\nfunction build (obj, opts) {\n  var XMLHDR = {\n    version: '1.0',\n    encoding: 'UTF-8'\n  };\n\n  var XMLDTD = {\n    pubid: '-//Apple//DTD PLIST 1.0//EN',\n    sysid: 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'\n  };\n\n  var doc = xmlbuilder.create('plist');\n\n  doc.dec(XMLHDR.version, XMLHDR.encoding, XMLHDR.standalone);\n  doc.dtd(XMLDTD.pubid, XMLDTD.sysid);\n  doc.att('version', '1.0');\n\n  walk_obj(obj, doc);\n\n  if (!opts) opts = {};\n  // default `pretty` to `true`\n  opts.pretty = opts.pretty !== false;\n  return doc.end(opts);\n}\n\n/**\n * depth first, recursive traversal of a javascript object. when complete,\n * next_child contains a reference to the build XML object.\n *\n * @api private\n */\n\nfunction walk_obj(next, next_child) {\n  var tag_type, i, prop;\n  var name = type(next);\n\n  if ('Undefined' == name) {\n    return;\n  } else if (Array.isArray(next)) {\n    next_child = next_child.ele('array');\n    for (i = 0; i < next.length; i++) {\n      walk_obj(next[i], next_child);\n    }\n\n  } else if (Buffer.isBuffer(next)) {\n    next_child.ele('data').raw(next.toString('base64'));\n\n  } else if ('Object' == name) {\n    next_child = next_child.ele('dict');\n    for (prop in next) {\n      if (next.hasOwnProperty(prop)) {\n        next_child.ele('key').txt(prop);\n        walk_obj(next[prop], next_child);\n      }\n    }\n\n  } else if ('Number' == name) {\n    // detect if this is an integer or real\n    // TODO: add an ability to force one way or another via a \"cast\"\n    tag_type = (next % 1 === 0) ? 'integer' : 'real';\n    next_child.ele(tag_type).txt(next.toString());\n\n  } else if ('Date' == name) {\n    next_child.ele('date').txt(ISODateString(new Date(next)));\n\n  } else if ('Boolean' == name) {\n    next_child.ele(next ? 'true' : 'false');\n\n  } else if ('String' == name) {\n    next_child.ele('string').txt(next);\n\n  } else if ('ArrayBuffer' == name) {\n    next_child.ele('data').raw(base64.fromByteArray(next));\n\n  } else if (next && next.buffer && 'ArrayBuffer' == type(next.buffer)) {\n    // a typed array\n    next_child.ele('data').raw(base64.fromByteArray(new Uint8Array(next.buffer), next_child));\n\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}