{"ast":null,"code":"/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar createLogger = require('./create-logger');\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Container);\n    this.loggers = new Map();\n    this.options = options;\n  }\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n\n        options.transports = existing ? existing.slice() : [];\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n      return this.loggers.get(id);\n    }\n    /**\n     * Retreives a `winston.Logger` instance for the specified `id`. If\n     * an instance does not exist, one is created.\n     * @param {!string} id - The id of the Logger to get.\n     * @param {?Object} [options] - Options for the Logger instance.\n     * @returns {Logger} - A configured Logger instance with a specified id.\n     */\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n    /**\n     * Check if the container has a logger with the id.\n     * @param {?string} id - The id of the Logger instance to find.\n     * @returns {boolean} - Boolean value indicating if this instance has a\n     * logger with the specified `id`.\n     */\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n    /**\n     * Closes a `Logger` instance with the specified `id` if it exists.\n     * If no `id` is supplied then all Loggers are closed.\n     * @param {?string} id - The id of the Logger instance to close.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n      if (id) {\n        return this._removeLogger(id);\n      }\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n    /**\n     * Remove a logger based on the id.\n     * @param {!string} id - The id of the logger to remove.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n      var logger = this.loggers.get(id);\n      logger.close();\n      this._delete(id);\n    }\n    /**\n     * Deletes a `Logger` instance with the specified `id`.\n     * @param {!string} id - The id of the Logger instance to delete from\n     * container.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n  return Container;\n}();","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","createLogger","require","module","exports","Container","options","arguments","undefined","loggers","Map","value","add","id","_this","has","assign","existing","transports","slice","logger","on","_delete","set","get","close","_this2","_removeLogger","forEach","val"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/winston/dist/winston/container.js"],"sourcesContent":["/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar createLogger = require('./create-logger');\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Container);\n\n    this.loggers = new Map();\n    this.options = options;\n  }\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n\n\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n\n        options.transports = existing ? existing.slice() : [];\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n\n      return this.loggers.get(id);\n    }\n    /**\n     * Retreives a `winston.Logger` instance for the specified `id`. If\n     * an instance does not exist, one is created.\n     * @param {!string} id - The id of the Logger to get.\n     * @param {?Object} [options] - Options for the Logger instance.\n     * @returns {Logger} - A configured Logger instance with a specified id.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n    /**\n     * Check if the container has a logger with the id.\n     * @param {?string} id - The id of the Logger instance to find.\n     * @returns {boolean} - Boolean value indicating if this instance has a\n     * logger with the specified `id`.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n    /**\n     * Closes a `Logger` instance with the specified `id` if it exists.\n     * If no `id` is supplied then all Loggers are closed.\n     * @param {?string} id - The id of the Logger instance to close.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n\n      if (id) {\n        return this._removeLogger(id);\n      }\n\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n    /**\n     * Remove a logger based on the id.\n     * @param {!string} id - The id of the logger to remove.\n     * @returns {undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n\n      var logger = this.loggers.get(id);\n      logger.close();\n\n      this._delete(id);\n    }\n    /**\n     * Deletes a `Logger` instance with the specified `id`.\n     * @param {!string} id - The id of the Logger instance to delete from\n     * container.\n     * @returns {undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n\n  return Container;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script"}