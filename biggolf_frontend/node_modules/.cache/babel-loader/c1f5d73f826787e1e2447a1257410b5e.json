{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatEnoent = formatEnoent;\nrequire(\"source-map-support/register\");\nvar _which = _interopRequireDefault(require(\"which\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nfunction formatEnoent(error, cmd) {\n  let cwd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  try {\n    _which.default.sync(cmd);\n    if (cwd) {\n      try {\n        _fs.default.accessSync(cwd, _fs.default.R_OK);\n      } catch (ign) {\n        error.message = `The current working directory '${cwd}' for '${cmd}' command ` + `either does not exist or is not accessible`;\n      }\n    }\n  } catch (ign) {\n    error.message = `Command '${cmd}' not found. Is it installed?`;\n  }\n  return error;\n}\nrequire('source-map-support').install();","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AAaA,SAASA,YAAT,CAAuBC,KAAvB,EAA8BC,GAA9B,EAA+C;EAAA,IAAZC,GAAG,uEAAG,IAAzC;EACE,IAAI;IACFC,eAAMC,IAAN,CAAWH,GAAX;IACA,IAAIC,GAAJ,EAAS;MACP,IAAI;QACFG,YAAGC,UAAH,CAAcJ,GAAd,EAAmBG,YAAGE,IAAtB;MACD,CAFD,CAEE,OAAOC,GAAP,EAAY;QACZR,KAAK,CAACS,OAAN,GAAiB,kCAAiCP,GAAI,UAASD,GAAI,YAAnD,GACb,4CADH;MAED;IACF;EACF,CAVD,CAUE,OAAOO,GAAP,EAAY;IACZR,KAAK,CAACS,OAAN,GAAiB,YAAWR,GAAI,+BAAhC;EACD;EACD,OAAOD,KAAP;AACD;AAAAU","names":["formatEnoent","error","cmd","cwd","which","sync","fs","accessSync","R_OK","ign","message","require"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\teen_process\\lib\\helpers.js"],"sourcesContent":["import which from 'which';\nimport fs from 'fs';\n\n/**\n * Decorates ENOENT error received from a spawn system call\n * with a more descriptive message, so it could be properly handled by a user.\n *\n * @param {!Error} error Original error instance. !!! The instance is mutated after\n * this helper function invocation\n * @param {!string} cmd Original command to execute\n * @param {?string} cwd Optional path to the current working dir\n * @return {Error} Mutated error instance with an improved description or an\n * unchanged error instance\n */\nfunction formatEnoent (error, cmd, cwd = null) {\n  try {\n    which.sync(cmd);\n    if (cwd) {\n      try {\n        fs.accessSync(cwd, fs.R_OK);\n      } catch (ign) {\n        error.message = `The current working directory '${cwd}' for '${cmd}' command ` +\n          `either does not exist or is not accessible`;\n      }\n    }\n  } catch (ign) {\n    error.message = `Command '${cmd}' not found. Is it installed?`;\n  }\n  return error;\n}\n\nexport { formatEnoent };\n"]},"metadata":{},"sourceType":"script"}