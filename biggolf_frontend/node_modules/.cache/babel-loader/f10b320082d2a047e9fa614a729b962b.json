{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _utils = require(\"@jimp/utils\");\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional) radius, x, y\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nvar _default = function _default() {\n  return {\n    circle: function circle() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cb = arguments.length > 1 ? arguments[1] : undefined;\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n      var radius = options.radius || (this.bitmap.width > this.bitmap.height ? this.bitmap.height : this.bitmap.width) / 2;\n      var center = {\n        x: typeof options.x === 'number' ? options.x : this.bitmap.width / 2,\n        y: typeof options.y === 'number' ? options.y : this.bitmap.height / 2\n      };\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var curR = Math.sqrt(Math.pow(x - center.x, 2) + Math.pow(y - center.y, 2));\n        if (radius - curR <= 0.0) {\n          this.bitmap.data[idx + 3] = 0;\n        } else if (radius - curR < 1.0) {\n          this.bitmap.data[idx + 3] = 255 * (radius - curR);\n        }\n      });\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n      return this;\n    }\n  };\n};\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;AAAA;;AAEA;;;;;;eAMe;EAAA,OAAO;IACpBA,MADoB,oBACK;MAAA,IAAlBC,OAAkB,uEAAR,EAAQ;MAAA,IAAJC,EAAI;MACvB,IAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;QACjCC,EAAE,GAAGD,OAAL;QACAA,OAAO,GAAG,EAAV;MACD;MAED,IAAME,MAAM,GACVF,OAAO,CAACE,MAAR,IACA,CAAC,KAAKC,MAAL,CAAYC,KAAZ,GAAoB,KAAKD,MAAL,CAAYE,MAAhC,GACG,KAAKF,MAAL,CAAYE,MADf,GAEG,KAAKF,MAAL,CAAYC,KAFhB,IAEyB,CAJ3B;MAMA,IAAME,MAAM,GAAG;QACbC,CAAC,EAAE,OAAOP,OAAO,CAACO,CAAf,KAAqB,QAArB,GAAgCP,OAAO,CAACO,CAAxC,GAA4C,KAAKJ,MAAL,CAAYC,KAAZ,GAAoB,CADtD;QAEbI,CAAC,EAAE,OAAOR,OAAO,CAACQ,CAAf,KAAqB,QAArB,GAAgCR,OAAO,CAACQ,CAAxC,GAA4C,KAAKL,MAAL,CAAYE,MAAZ,GAAqB;MAFvD,CAAf;MAKA,KAAKI,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAAKN,MAAL,CAAYC,KAAjC,EAAwC,KAAKD,MAAL,CAAYE,MAApD,EAA4D,UAC1DE,CAD0D,EAE1DC,CAF0D,EAG1DE,GAH0D,EAI1D;QACA,IAAMC,IAAI,GAAGC,IAAI,CAACC,IAAL,CACXD,IAAI,CAACE,GAAL,CAASP,CAAC,GAAGD,MAAM,CAACC,CAApB,EAAuB,CAAvB,IAA4BK,IAAI,CAACE,GAAL,CAASN,CAAC,GAAGF,MAAM,CAACE,CAApB,EAAuB,CAAvB,CADjB,CAAb;QAIA,IAAIN,MAAM,GAAGS,IAAT,IAAiB,GAArB,EAA0B;UACxB,KAAKR,MAAL,CAAYY,IAAZ,CAAiBL,GAAG,GAAG,CAAvB,IAA4B,CAA5B;QACD,CAFD,MAEO,IAAIR,MAAM,GAAGS,IAAT,GAAgB,GAApB,EAAyB;UAC9B,KAAKR,MAAL,CAAYY,IAAZ,CAAiBL,GAAG,GAAG,CAAvB,IAA4B,OAAOR,MAAM,GAAGS,IAAhB,CAA5B;QACD;MACF,CAdD;MAgBA,IAAI,0BAAcV,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACe,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;MACD;MAED,OAAO,IAAP;IACD;EAvCmB,CAAP;AAAA,C","names":["circle","options","cb","radius","bitmap","width","height","center","x","y","scanQuiet","idx","curR","Math","sqrt","pow","data","call"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\plugin-circle\\src\\index.js"],"sourcesContent":["import { isNodePattern } from '@jimp/utils';\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional) radius, x, y\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  circle(options = {}, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    const radius =\n      options.radius ||\n      (this.bitmap.width > this.bitmap.height\n        ? this.bitmap.height\n        : this.bitmap.width) / 2;\n\n    const center = {\n      x: typeof options.x === 'number' ? options.x : this.bitmap.width / 2,\n      y: typeof options.y === 'number' ? options.y : this.bitmap.height / 2\n    };\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      const curR = Math.sqrt(\n        Math.pow(x - center.x, 2) + Math.pow(y - center.y, 2)\n      );\n\n      if (radius - curR <= 0.0) {\n        this.bitmap.data[idx + 3] = 0;\n      } else if (radius - curR < 1.0) {\n        this.bitmap.data[idx + 3] = 255 * (radius - curR);\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}