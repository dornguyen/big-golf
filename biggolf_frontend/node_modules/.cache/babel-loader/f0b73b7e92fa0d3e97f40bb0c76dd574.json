{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProcessIds = getProcessIds;\nexports.killProcess = killProcess;\nrequire(\"source-map-support/register\");\nvar _teen_process = require(\"teen_process\");\nasync function getProcessIds(appName) {\n  let pids;\n  try {\n    let {\n      stdout\n    } = await (0, _teen_process.exec)('pgrep', ['-x', appName]);\n    pids = stdout.trim().split('\\n').map(pid => parseInt(pid, 10));\n  } catch (err) {\n    if (parseInt(err.code, 10) !== 1) {\n      throw new Error(`Error getting process ids for app '${appName}': ${err.message}`);\n    }\n    pids = [];\n  }\n  return pids;\n}\nasync function killProcess(appName) {\n  let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let pids = await getProcessIds(appName);\n  if (pids.length === 0) {\n    return;\n  }\n  try {\n    let args = force ? ['-9'] : [];\n    args.push('-x', appName);\n    await (0, _teen_process.exec)('pkill', args);\n  } catch (err) {\n    if (parseInt(err.code, 10) !== 1) {\n      throw new Error(`Error killing app '${appName}' with pkill: ${err.message}`);\n    }\n  }\n}\nrequire('source-map-support').install();","map":{"version":3,"mappings":";;;;;;;;AAAA;AAWA,eAAeA,aAAf,CAA8BC,OAA9B,EAAuC;EACrC,IAAIC,IAAJ;EACA,IAAI;IACF,IAAI;MAACC;IAAD,IAAW,MAAM,wBAAK,OAAL,EAAc,CAAC,IAAD,EAAOF,OAAP,CAAd,CAArB;IACAC,IAAI,GAAGC,MAAM,CAACC,IAAP,GAAcC,KAAd,CAAoB,IAApB,EAA0BC,GAA1B,CAA+BC,GAAD,IAASC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAA/C,CAAP;EACD,CAHD,CAGE,OAAOE,GAAP,EAAY;IACZ,IAAID,QAAQ,CAACC,GAAG,CAACC,IAAL,EAAW,EAAX,CAAR,KAA2B,CAA/B,EAAkC;MAChC,MAAM,IAAIC,KAAJ,CAAW,sCAAqCV,OAAQ,MAAKQ,GAAG,CAACG,OAAQ,EAAzE,CAAN;IACD;IACDV,IAAI,GAAG,EAAP;EACD;EACD,OAAOA,IAAP;AACD;AAED,eAAeW,WAAf,CAA4BZ,OAA5B,EAAoD;EAAA,IAAfa,KAAK,uEAAG,KAA7C;EACE,IAAIZ,IAAI,GAAG,MAAMF,aAAa,CAACC,OAAD,CAA9B;EACA,IAAIC,IAAI,CAACa,MAAL,KAAgB,CAApB,EAAuB;IAErB;EACD;EAED,IAAI;IACF,IAAIC,IAAI,GAAGF,KAAK,GAAG,CAAC,IAAD,CAAH,GAAY,EAA5B;IACAE,IAAI,CAACC,IAAL,CAAU,IAAV,EAAgBhB,OAAhB;IACA,MAAM,wBAAK,OAAL,EAAce,IAAd,CAAN;EACD,CAJD,CAIE,OAAOP,GAAP,EAAY;IACZ,IAAID,QAAQ,CAACC,GAAG,CAACC,IAAL,EAAW,EAAX,CAAR,KAA2B,CAA/B,EAAkC;MAChC,MAAM,IAAIC,KAAJ,CAAW,sBAAqBV,OAAQ,iBAAgBQ,GAAG,CAACG,OAAQ,EAApE,CAAN;IACD;EACF;AACF;AAAAM","names":["getProcessIds","appName","pids","stdout","trim","split","map","pid","parseInt","err","code","Error","message","killProcess","force","length","args","push","require"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\appium-support\\lib\\process.js"],"sourcesContent":["import { exec } from 'teen_process';\n\n\n/*\n * Exit Status for pgrep and pkill (`man pkill`)\n *  0. One or more processes matched the criteria.\n *  1. No processes matched.\n *  2. Syntax error in the command line.\n *  3. Fatal error: out of memory etc.\n */\n\nasync function getProcessIds (appName) {\n  let pids;\n  try {\n    let {stdout} = await exec('pgrep', ['-x', appName]);\n    pids = stdout.trim().split('\\n').map((pid) => parseInt(pid, 10));\n  } catch (err) {\n    if (parseInt(err.code, 10) !== 1) {\n      throw new Error(`Error getting process ids for app '${appName}': ${err.message}`);\n    }\n    pids = [];\n  }\n  return pids;\n}\n\nasync function killProcess (appName, force = false) {\n  let pids = await getProcessIds(appName);\n  if (pids.length === 0) {\n    // the process is not running\n    return;\n  }\n\n  try {\n    let args = force ? ['-9'] : [];\n    args.push('-x', appName);\n    await exec('pkill', args);\n  } catch (err) {\n    if (parseInt(err.code, 10) !== 1) {\n      throw new Error(`Error killing app '${appName}' with pkill: ${err.message}`);\n    }\n  }\n}\n\nexport { getProcessIds, killProcess };\n"]},"metadata":{},"sourceType":"script"}