{"ast":null,"code":"var assert = require('assert');\nvar path = require('path');\nvar Readable = require('stream').Readable;\nvar util = require('util');\nfunction Walker(dir, options) {\n  assert.strictEqual(typeof dir, 'string', '`dir` parameter should be of type string. Got type: ' + typeof dir);\n  var defaultStreamOptions = {\n    objectMode: true\n  };\n  var defaultOpts = {\n    queueMethod: 'shift',\n    pathSorter: undefined,\n    filter: undefined,\n    depthLimit: undefined,\n    preserveSymlinks: false\n  };\n  options = Object.assign(defaultOpts, options, defaultStreamOptions);\n  Readable.call(this, options);\n  this.root = path.resolve(dir);\n  this.paths = [this.root];\n  this.options = options;\n  if (options.depthLimit > -1) this.rootDepth = this.root.split(path.sep).length + 1;\n  this.fs = options.fs || require('graceful-fs');\n}\nutil.inherits(Walker, Readable);\nWalker.prototype._read = function () {\n  if (this.paths.length === 0) return this.push(null);\n  var self = this;\n  var pathItem = this.paths[this.options.queueMethod]();\n  var statFunction = this.options.preserveSymlinks ? self.fs.lstat : self.fs.stat;\n  statFunction(pathItem, function (err, stats) {\n    var item = {\n      path: pathItem,\n      stats: stats\n    };\n    if (err) return self.emit('error', err, item);\n    if (!stats.isDirectory() || self.rootDepth && pathItem.split(path.sep).length - self.rootDepth >= self.options.depthLimit) {\n      return self.push(item);\n    }\n    self.fs.readdir(pathItem, function (err, pathItems) {\n      if (err) {\n        self.push(item);\n        return self.emit('error', err, item);\n      }\n      pathItems = pathItems.map(function (part) {\n        return path.join(pathItem, part);\n      });\n      if (self.options.filter) pathItems = pathItems.filter(self.options.filter);\n      if (self.options.pathSorter) pathItems.sort(self.options.pathSorter);\n      // faster way to do do incremental batch array pushes\n      self.paths.push.apply(self.paths, pathItems);\n      self.push(item);\n    });\n  });\n};\nfunction walk(root, options) {\n  return new Walker(root, options);\n}\nmodule.exports = walk;","map":{"version":3,"names":["assert","require","path","Readable","util","Walker","dir","options","strictEqual","defaultStreamOptions","objectMode","defaultOpts","queueMethod","pathSorter","undefined","filter","depthLimit","preserveSymlinks","Object","assign","call","root","resolve","paths","rootDepth","split","sep","length","fs","inherits","prototype","_read","push","self","pathItem","statFunction","lstat","stat","err","stats","item","emit","isDirectory","readdir","pathItems","map","part","join","sort","apply","walk","module","exports"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/klaw/src/index.js"],"sourcesContent":["var assert = require('assert')\nvar path = require('path')\nvar Readable = require('stream').Readable\nvar util = require('util')\n\nfunction Walker (dir, options) {\n  assert.strictEqual(typeof dir, 'string', '`dir` parameter should be of type string. Got type: ' + typeof dir)\n  var defaultStreamOptions = { objectMode: true }\n  var defaultOpts = {\n    queueMethod: 'shift',\n    pathSorter: undefined,\n    filter: undefined,\n    depthLimit: undefined,\n    preserveSymlinks: false\n  }\n  options = Object.assign(defaultOpts, options, defaultStreamOptions)\n\n  Readable.call(this, options)\n  this.root = path.resolve(dir)\n  this.paths = [this.root]\n  this.options = options\n  if (options.depthLimit > -1) this.rootDepth = this.root.split(path.sep).length + 1\n  this.fs = options.fs || require('graceful-fs')\n}\nutil.inherits(Walker, Readable)\n\nWalker.prototype._read = function () {\n  if (this.paths.length === 0) return this.push(null)\n  var self = this\n  var pathItem = this.paths[this.options.queueMethod]()\n\n  var statFunction = this.options.preserveSymlinks ? self.fs.lstat : self.fs.stat\n\n  statFunction(pathItem, function (err, stats) {\n    var item = { path: pathItem, stats: stats }\n    if (err) return self.emit('error', err, item)\n\n    if (!stats.isDirectory() || (self.rootDepth &&\n      pathItem.split(path.sep).length - self.rootDepth >= self.options.depthLimit)) {\n      return self.push(item)\n    }\n\n    self.fs.readdir(pathItem, function (err, pathItems) {\n      if (err) {\n        self.push(item)\n        return self.emit('error', err, item)\n      }\n\n      pathItems = pathItems.map(function (part) { return path.join(pathItem, part) })\n      if (self.options.filter) pathItems = pathItems.filter(self.options.filter)\n      if (self.options.pathSorter) pathItems.sort(self.options.pathSorter)\n      // faster way to do do incremental batch array pushes\n      self.paths.push.apply(self.paths, pathItems)\n\n      self.push(item)\n    })\n  })\n}\n\nfunction walk (root, options) {\n  return new Walker(root, options)\n}\n\nmodule.exports = walk\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}