{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExtension = exports.getType = exports.addType = void 0;\nvar mimeTypes = {};\nvar findType = function findType(extension) {\n  return Object.entries(mimeTypes).find(function (type) {\n    return type[1].includes(extension);\n  }) || [];\n};\nvar addType = function addType(mime, extensions) {\n  mimeTypes[mime] = extensions;\n};\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */\n\nexports.addType = addType;\nvar getType = function getType(path) {\n  var pathParts = path.split('/').slice(-1);\n  var extension = pathParts[pathParts.length - 1].split('.').pop();\n  var type = findType(extension);\n  return type[0];\n};\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */\n\nexports.getType = getType;\nvar getExtension = function getExtension(type) {\n  return (mimeTypes[type.toLowerCase()] || [])[0];\n};\nexports.getExtension = getExtension;","map":{"version":3,"mappings":";;;;;;AAAA,IAAMA,SAAS,GAAG,EAAlB;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,UAAS;EAAA,OACxBC,MAAM,CAACC,OAAP,CAAeH,SAAf,EAA0BI,IAA1B,CAA+B,cAAI;IAAA,OAAIC,IAAI,CAAC,CAAD,CAAJ,CAAQC,QAAR,CAAiBC,SAAjB,CAAJ;EAAA,CAAnC,KAAuE,EAD/C;AAAA,CAA1B;AAGO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAsB;EAC3CV,SAAS,CAACS,IAAD,CAAT,GAAkBC,UAAlB;AACD,CAFM;AAIP;;;;;;;AAKO,IAAMC,OAAO,GAAG,SAAVA,OAAU,KAAI,EAAI;EAC7B,IAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgBC,KAAhB,CAAsB,CAAC,CAAvB,CAAlB;EACA,IAAMR,SAAS,GAAGK,SAAS,CAACA,SAAS,CAACI,MAAV,GAAmB,CAApB,CAAT,CAAgCF,KAAhC,CAAsC,GAAtC,EAA2CG,GAA3C,EAAlB;EACA,IAAMZ,IAAI,GAAGJ,QAAQ,CAACM,SAAD,CAArB;EAEA,OAAOF,IAAI,CAAC,CAAD,CAAX;AACD,CANM;AAQP;;;;;;;AAKO,IAAMa,YAAY,GAAG,SAAfA,YAAe,KAAI;EAAA,OAAI,CAAClB,SAAS,CAACK,IAAI,CAACc,WAAL,EAAD,CAAT,IAAiC,EAAlC,EAAsC,CAAtC,CAAJ;AAAA,CAAzB","names":["mimeTypes","findType","Object","entries","find","type","includes","extension","addType","mime","extensions","getType","pathParts","path","split","slice","length","pop","getExtension","toLowerCase"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\core\\src\\utils\\mime.js"],"sourcesContent":["const mimeTypes = {};\n\nconst findType = extension =>\n  Object.entries(mimeTypes).find(type => type[1].includes(extension)) || [];\n\nexport const addType = (mime, extensions) => {\n  mimeTypes[mime] = extensions;\n};\n\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */\nexport const getType = path => {\n  const pathParts = path.split('/').slice(-1);\n  const extension = pathParts[pathParts.length - 1].split('.').pop();\n  const type = findType(extension);\n\n  return type[0];\n};\n\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */\nexport const getExtension = type => (mimeTypes[type.toLowerCase()] || [])[0];\n"]},"metadata":{},"sourceType":"script"}