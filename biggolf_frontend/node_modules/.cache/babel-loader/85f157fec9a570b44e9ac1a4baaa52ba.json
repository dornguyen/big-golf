{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/* global XMLHttpRequest */\nif (process.browser || process.env.ENVIRONMENT === 'BROWSER' || typeof process.versions.electron !== 'undefined' && process.type === 'renderer' && typeof XMLHttpRequest === 'function') {\n  // If we run into a browser or the electron renderer process,\n  // use XHR method instead of Request node module.\n  module.exports = function (options, cb) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', options.url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.addEventListener('load', function () {\n      if (xhr.status < 400) {\n        try {\n          var data = Buffer.from(this.response);\n          cb(null, xhr, data);\n        } catch (error) {\n          return cb(new Error('Response is not a buffer for url ' + options.url + '. Error: ' + error.message));\n        }\n      } else {\n        cb(new Error('HTTP Status ' + xhr.status + ' for url ' + options.url));\n      }\n    });\n    xhr.addEventListener('error', function (e) {\n      cb(e);\n    });\n    xhr.send();\n  };\n} else {\n  module.exports = function (_ref, cb) {\n    var options = (0, _extends2[\"default\"])({}, _ref);\n    var p = require('phin');\n    p(_objectSpread({\n      compression: true\n    }, options), function (err, res) {\n      if (err === null) {\n        cb(null, res, res.body);\n      } else {\n        cb(err);\n      }\n    });\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,IACEA,OAAO,CAACC,OAAR,IACAD,OAAO,CAACE,GAAR,CAAYC,WAAZ,KAA4B,SAD5B,IAEC,OAAOH,OAAO,CAACI,QAAR,CAAiBC,QAAxB,KAAqC,WAArC,IACCL,OAAO,CAACM,IAAR,KAAiB,UADlB,IAEC,OAAOC,cAAP,KAA0B,UAL9B,EAME;EACA;EACA;EAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkBC,EAAlB,EAAsB;IACrC,IAAMC,GAAG,GAAG,IAAIL,cAAJ,EAAZ;IACAK,GAAG,CAACC,IAAJ,CAAS,KAAT,EAAgBH,OAAO,CAACI,GAAxB,EAA6B,IAA7B;IACAF,GAAG,CAACG,YAAJ,GAAmB,aAAnB;IACAH,GAAG,CAACI,gBAAJ,CAAqB,MAArB,EAA6B,YAAW;MACtC,IAAIJ,GAAG,CAACK,MAAJ,GAAa,GAAjB,EAAsB;QACpB,IAAI;UACF,IAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKC,QAAjB,CAAb;UACAV,EAAE,CAAC,IAAD,EAAOC,GAAP,EAAYM,IAAZ,CAAF;QACD,CAHD,CAGE,OAAOI,KAAP,EAAc;UACd,OAAOX,EAAE,CACP,IAAIY,KAAJ,CACE,sCACEb,OAAO,CAACI,GADV,GAEE,WAFF,GAGEQ,KAAK,CAACE,OAJV,CADO,CAAT;QAQD;MACF,CAdD,MAcO;QACLb,EAAE,CAAC,IAAIY,KAAJ,CAAU,iBAAiBX,GAAG,CAACK,MAArB,GAA8B,WAA9B,GAA4CP,OAAO,CAACI,GAA9D,CAAD,CAAF;MACD;IACF,CAlBD;IAmBAF,GAAG,CAACI,gBAAJ,CAAqB,OAArB,EAA8B,WAAC,EAAI;MACjCL,EAAE,CAACc,CAAD,CAAF;IACD,CAFD;IAGAb,GAAG,CAACc,IAAJ;EACD,CA3BD;AA4BD,CAtCD,MAsCO;EACLlB,MAAM,CAACC,OAAP,GAAiB,gBAAyBE,EAAzB,EAA6B;IAAA,IAAfD,OAAe;IAC5C,IAAMiB,CAAC,GAAGC,OAAO,CAAC,MAAD,CAAjB;IAEAD,CAAC;MAAGE,WAAW,EAAE;IAAhB,GAAyBnB,OAAzB,GAAoC,UAACoB,GAAD,EAAMC,GAAN,EAAc;MACjD,IAAID,GAAG,KAAK,IAAZ,EAAkB;QAChBnB,EAAE,CAAC,IAAD,EAAOoB,GAAP,EAAYA,GAAG,CAACC,IAAhB,CAAF;MACD,CAFD,MAEO;QACLrB,EAAE,CAACmB,GAAD,CAAF;MACD;IACF,CANA,CAAD;EAOD,CAVD;AAWD","names":["process","browser","env","ENVIRONMENT","versions","electron","type","XMLHttpRequest","module","exports","options","cb","xhr","open","url","responseType","addEventListener","status","data","Buffer","from","response","error","Error","message","e","send","p","require","compression","err","res","body"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\@jimp\\core\\src\\request.js"],"sourcesContent":["/* global XMLHttpRequest */\n\nif (\n  process.browser ||\n  process.env.ENVIRONMENT === 'BROWSER' ||\n  (typeof process.versions.electron !== 'undefined' &&\n    process.type === 'renderer' &&\n    typeof XMLHttpRequest === 'function')\n) {\n  // If we run into a browser or the electron renderer process,\n  // use XHR method instead of Request node module.\n\n  module.exports = function(options, cb) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', options.url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.addEventListener('load', function() {\n      if (xhr.status < 400) {\n        try {\n          const data = Buffer.from(this.response);\n          cb(null, xhr, data);\n        } catch (error) {\n          return cb(\n            new Error(\n              'Response is not a buffer for url ' +\n                options.url +\n                '. Error: ' +\n                error.message\n            )\n          );\n        }\n      } else {\n        cb(new Error('HTTP Status ' + xhr.status + ' for url ' + options.url));\n      }\n    });\n    xhr.addEventListener('error', e => {\n      cb(e);\n    });\n    xhr.send();\n  };\n} else {\n  module.exports = function({ ...options }, cb) {\n    const p = require('phin');\n\n    p({ compression: true, ...options }, (err, res) => {\n      if (err === null) {\n        cb(null, res, res.body);\n      } else {\n        cb(err);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"script"}