{"ast":null,"code":"var duplexer = require('duplexer');\nvar through = require('through');\nmodule.exports = function () {\n  var streams;\n  if (arguments.length == 1 && Array.isArray(arguments[0])) {\n    streams = arguments[0];\n  } else {\n    streams = [].slice.call(arguments);\n  }\n  if (streams.length == 0) return through();else if (streams.length == 1) return streams[0];\n  var first = streams[0],\n    last = streams[streams.length - 1],\n    thepipe = duplexer(first, last);\n\n  //pipe all the streams together\n\n  function recurse(streams) {\n    if (streams.length < 2) return;\n    streams[0].pipe(streams[1]);\n    recurse(streams.slice(1));\n  }\n  recurse(streams);\n  function onerror() {\n    var args = [].slice.call(arguments);\n    args.unshift('error');\n    thepipe.emit.apply(thepipe, args);\n  }\n\n  //es.duplex already reemits the error from the first and last stream.\n  //add a listener for the inner streams in the pipeline.\n  for (var i = 1; i < streams.length - 1; i++) streams[i].on('error', onerror);\n  return thepipe;\n};","map":{"version":3,"names":["duplexer","require","through","module","exports","streams","arguments","length","Array","isArray","slice","call","first","last","thepipe","recurse","pipe","onerror","args","unshift","emit","apply","i","on"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/stream-combiner/index.js"],"sourcesContent":["var duplexer = require('duplexer')\nvar through = require('through')\n\nmodule.exports = function () {\n  var streams\n\n  if(arguments.length == 1 && Array.isArray(arguments[0])) {\n    streams = arguments[0]\n  } else {\n    streams = [].slice.call(arguments)\n  }\n\n  if(streams.length == 0)\n    return through()\n  else if(streams.length == 1)\n    return streams[0]\n\n  var first = streams[0]\n    , last = streams[streams.length - 1]\n    , thepipe = duplexer(first, last)\n\n  //pipe all the streams together\n\n  function recurse (streams) {\n    if(streams.length < 2)\n      return\n    streams[0].pipe(streams[1])\n    recurse(streams.slice(1))\n  }\n\n  recurse(streams)\n\n  function onerror () {\n    var args = [].slice.call(arguments)\n    args.unshift('error')\n    thepipe.emit.apply(thepipe, args)\n  }\n\n  //es.duplex already reemits the error from the first and last stream.\n  //add a listener for the inner streams in the pipeline.\n  for(var i = 1; i < streams.length - 1; i ++)\n    streams[i].on('error', onerror)\n\n  return thepipe\n}\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAEhCE,MAAM,CAACC,OAAO,GAAG,YAAY;EAC3B,IAAIC,OAAO;EAEX,IAAGC,SAAS,CAACC,MAAM,IAAI,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;IACvDD,OAAO,GAAGC,SAAS,CAAC,CAAC,CAAC;EACxB,CAAC,MAAM;IACLD,OAAO,GAAG,EAAE,CAACK,KAAK,CAACC,IAAI,CAACL,SAAS,CAAC;EACpC;EAEA,IAAGD,OAAO,CAACE,MAAM,IAAI,CAAC,EACpB,OAAOL,OAAO,EAAE,MACb,IAAGG,OAAO,CAACE,MAAM,IAAI,CAAC,EACzB,OAAOF,OAAO,CAAC,CAAC,CAAC;EAEnB,IAAIO,KAAK,GAAGP,OAAO,CAAC,CAAC,CAAC;IAClBQ,IAAI,GAAGR,OAAO,CAACA,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC;IAClCO,OAAO,GAAGd,QAAQ,CAACY,KAAK,EAAEC,IAAI,CAAC;;EAEnC;;EAEA,SAASE,OAAO,CAAEV,OAAO,EAAE;IACzB,IAAGA,OAAO,CAACE,MAAM,GAAG,CAAC,EACnB;IACFF,OAAO,CAAC,CAAC,CAAC,CAACW,IAAI,CAACX,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3BU,OAAO,CAACV,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3B;EAEAK,OAAO,CAACV,OAAO,CAAC;EAEhB,SAASY,OAAO,GAAI;IAClB,IAAIC,IAAI,GAAG,EAAE,CAACR,KAAK,CAACC,IAAI,CAACL,SAAS,CAAC;IACnCY,IAAI,CAACC,OAAO,CAAC,OAAO,CAAC;IACrBL,OAAO,CAACM,IAAI,CAACC,KAAK,CAACP,OAAO,EAAEI,IAAI,CAAC;EACnC;;EAEA;EACA;EACA,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,OAAO,CAACE,MAAM,GAAG,CAAC,EAAEe,CAAC,EAAG,EACzCjB,OAAO,CAACiB,CAAC,CAAC,CAACC,EAAE,CAAC,OAAO,EAAEN,OAAO,CAAC;EAEjC,OAAOH,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"script"}