{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requirePackage = requirePackage;\nrequire(\"source-map-support/register\");\nvar _system = require(\"./system\");\nvar _logger = _interopRequireDefault(require(\"./logger\"));\nvar _teen_process = require(\"teen_process\");\nvar _path = _interopRequireDefault(require(\"path\"));\nasync function linkGlobalPackage(packageName) {\n  try {\n    _logger.default.debug(`Linking package '${packageName}'`);\n    const cmd = (0, _system.isWindows)() ? 'npm.cmd' : 'npm';\n    await (0, _teen_process.exec)(cmd, ['link', packageName], {\n      timeout: 20000\n    });\n  } catch (err) {\n    const msg = `Unable to load package '${packageName}', linking failed: ${err.message}`;\n    _logger.default.debug(msg);\n    if (err.stderr) {\n      _logger.default.debug(err.stderr);\n    }\n    throw new Error(msg);\n  }\n}\nasync function requirePackage(packageName) {\n  try {\n    _logger.default.debug(`Loading local package '${packageName}'`);\n    return require(packageName);\n  } catch (err) {\n    _logger.default.debug(`Failed to load local package '${packageName}': ${err.message}`);\n  }\n  try {\n    const globalPackageName = _path.default.resolve(process.env.npm_config_prefix, 'lib', 'node_modules', packageName);\n    _logger.default.debug(`Loading global package '${globalPackageName}'`);\n    return require(globalPackageName);\n  } catch (err) {\n    _logger.default.debug(`Failed to load global package '${packageName}': ${err.message}`);\n  }\n  try {\n    await linkGlobalPackage(packageName);\n    _logger.default.debug(`Retrying load of linked package '${packageName}'`);\n    return require(packageName);\n  } catch (err) {\n    _logger.default.errorAndThrow(`Unable to load package '${packageName}': ${err.message}`);\n  }\n}\nrequire('source-map-support').install();","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AAQA,eAAeA,iBAAf,CAAkCC,WAAlC,EAA+C;EAC7C,IAAI;IACFC,gBAAIC,KAAJ,CAAW,oBAAmBF,WAAY,GAA1C;IACA,MAAMG,GAAG,GAAG,2BAAc,SAAd,GAA0B,KAAtC;IACA,MAAM,wBAAKA,GAAL,EAAU,CAAC,MAAD,EAASH,WAAT,CAAV,EAAiC;MAACI,OAAO,EAAE;IAAV,CAAjC,CAAN;EACD,CAJD,CAIE,OAAOC,GAAP,EAAY;IACZ,MAAMC,GAAG,GAAI,2BAA0BN,WAAY,sBAAqBK,GAAG,CAACE,OAAQ,EAApF;IACAN,gBAAIC,KAAJ,CAAUI,GAAV;IACA,IAAID,GAAG,CAACG,MAAR,EAAgB;MAGdP,gBAAIC,KAAJ,CAAUG,GAAG,CAACG,MAAd;IACD;IACD,MAAM,IAAIC,KAAJ,CAAUH,GAAV,CAAN;EACD;AACF;AAWD,eAAeI,cAAf,CAA+BV,WAA/B,EAA4C;EAE1C,IAAI;IACFC,gBAAIC,KAAJ,CAAW,0BAAyBF,WAAY,GAAhD;IACA,OAAOW,OAAO,CAACX,WAAD,CAAd;EACD,CAHD,CAGE,OAAOK,GAAP,EAAY;IACZJ,gBAAIC,KAAJ,CAAW,iCAAgCF,WAAY,MAAKK,GAAG,CAACE,OAAQ,EAAxE;EACD;EAGD,IAAI;IACF,MAAMK,iBAAiB,GAAGC,cAAKC,OAAL,CAAaC,OAAO,CAACC,GAAR,CAAYC,iBAAzB,EAA4C,KAA5C,EAAmD,cAAnD,EAAmEjB,WAAnE,CAA1B;IACAC,gBAAIC,KAAJ,CAAW,2BAA0BU,iBAAkB,GAAvD;IACA,OAAOD,OAAO,CAACC,iBAAD,CAAd;EACD,CAJD,CAIE,OAAOP,GAAP,EAAY;IACZJ,gBAAIC,KAAJ,CAAW,kCAAiCF,WAAY,MAAKK,GAAG,CAACE,OAAQ,EAAzE;EACD;EAGD,IAAI;IACF,MAAMR,iBAAiB,CAACC,WAAD,CAAvB;IACAC,gBAAIC,KAAJ,CAAW,oCAAmCF,WAAY,GAA1D;IACA,OAAOW,OAAO,CAACX,WAAD,CAAd;EACD,CAJD,CAIE,OAAOK,GAAP,EAAY;IACZJ,gBAAIiB,aAAJ,CAAmB,2BAA0BlB,WAAY,MAAKK,GAAG,CAACE,OAAQ,EAA1E;EACD;AACF;AAAAI","names":["linkGlobalPackage","packageName","log","debug","cmd","timeout","err","msg","message","stderr","Error","requirePackage","require","globalPackageName","path","resolve","process","env","npm_config_prefix","errorAndThrow"],"sources":["C:\\Users\\Daniel\\node_modules\\appium\\node_modules\\appium-support\\lib\\node.js"],"sourcesContent":["import { isWindows } from './system';\nimport log from './logger';\nimport { exec } from 'teen_process';\nimport path from 'path';\n\n/**\n * Internal utility to link global package to local context\n *\n * @returns {string} - name of the package to link\n * @throws {Error} If the command fails\n */\nasync function linkGlobalPackage (packageName) {\n  try {\n    log.debug(`Linking package '${packageName}'`);\n    const cmd = isWindows() ? 'npm.cmd' : 'npm';\n    await exec(cmd, ['link', packageName], {timeout: 20000});\n  } catch (err) {\n    const msg = `Unable to load package '${packageName}', linking failed: ${err.message}`;\n    log.debug(msg);\n    if (err.stderr) {\n      // log the stderr if there, but do not add to thrown error as it is\n      // _very_ verbose\n      log.debug(err.stderr);\n    }\n    throw new Error(msg);\n  }\n}\n\n/**\n * Utility function to extend node functionality, allowing us to require\n * modules that are installed globally. If the package cannot be required,\n * this will attempt to link the package and then re-require it\n *\n * @param {string} packageName - the name of the package to be required\n * @returns {object} - the package object\n * @throws {Error} If the package is not found locally or globally\n */\nasync function requirePackage (packageName) {\n  // first, get it in the normal way (see https://nodejs.org/api/modules.html#modules_all_together)\n  try {\n    log.debug(`Loading local package '${packageName}'`);\n    return require(packageName);\n  } catch (err) {\n    log.debug(`Failed to load local package '${packageName}': ${err.message}`);\n  }\n\n  // second, get it from where it ought to be in the global node_modules\n  try {\n    const globalPackageName = path.resolve(process.env.npm_config_prefix, 'lib', 'node_modules', packageName);\n    log.debug(`Loading global package '${globalPackageName}'`);\n    return require(globalPackageName);\n  } catch (err) {\n    log.debug(`Failed to load global package '${packageName}': ${err.message}`);\n  }\n\n  // third, link the file and get locally\n  try {\n    await linkGlobalPackage(packageName);\n    log.debug(`Retrying load of linked package '${packageName}'`);\n    return require(packageName);\n  } catch (err) {\n    log.errorAndThrow(`Unable to load package '${packageName}': ${err.message}`);\n  }\n}\n\nexport { requirePackage };\n"]},"metadata":{},"sourceType":"script"}