{"ast":null,"code":"'use strict';\n\n/** @class Gif */\nclass Gif {\n  // width - width of GIF in pixels\n  // height - height of GIF in pixels\n  // loops - 0 = unending; (n > 0) = iterate n times\n  // usesTransparency - whether any frames have transparent pixels\n  // colorScope - scope of color tables in GIF\n  // frames - array of frames\n  // buffer - GIF-formatted data\n\n  /**\n   * Gif is a class representing an encoded GIF. It is intended to be a read-only representation of a byte-encoded GIF. Only encoders and decoders should be creating instances of this class.\n   * \n   * Property | Description\n   * --- | ---\n   * width | width of the GIF at its widest\n   * height | height of the GIF at its highest\n   * loops | the number of times the GIF should loop before stopping; 0 => loop indefinately\n   * usesTransparency | boolean indicating whether at least one frame contains at least one transparent pixel\n   * colorScope | the scope of the color tables as encoded within the GIF; either Gif.GlobalColorsOnly (== 1) or Gif.LocalColorsOnly (== 2).\n   * frames | a array of GifFrame instances, one for each frame of the GIF\n   * buffer | a Buffer holding the encoding's byte data\n   * \n   * Its constructor should only ever be called by the GIF encoder or decoder.\n   *\n   * @param {Buffer} buffer A Buffer containing the encoded bytes\n   * @param {GifFrame[]} frames Array of frames found in the encoding\n   * @param {object} spec Properties of the encoding as listed above\n   */\n\n  constructor(buffer, frames, spec) {\n    this.width = spec.width;\n    this.height = spec.height;\n    this.loops = spec.loops;\n    this.usesTransparency = spec.usesTransparency;\n    this.colorScope = spec.colorScope;\n    this.frames = frames;\n    this.buffer = buffer;\n  }\n}\nGif.GlobalColorsPreferred = 0;\nGif.GlobalColorsOnly = 1;\nGif.LocalColorsOnly = 2;\n\n/** @class GifError */\n\nclass GifError extends Error {\n  /**\n   * GifError is a class representing a GIF-related error\n   * \n   * @param {string|Error} messageOrError\n   */\n\n  constructor(messageOrError) {\n    super(messageOrError);\n    if (messageOrError instanceof Error) {\n      this.stack = 'Gif' + messageOrError.stack;\n    }\n  }\n}\nexports.Gif = Gif;\nexports.GifError = GifError;","map":{"version":3,"names":["Gif","constructor","buffer","frames","spec","width","height","loops","usesTransparency","colorScope","GlobalColorsPreferred","GlobalColorsOnly","LocalColorsOnly","GifError","Error","messageOrError","stack","exports"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/gifwrap/src/gif.js"],"sourcesContent":["'use strict';\n\n/** @class Gif */\n\nclass Gif {\n\n    // width - width of GIF in pixels\n    // height - height of GIF in pixels\n    // loops - 0 = unending; (n > 0) = iterate n times\n    // usesTransparency - whether any frames have transparent pixels\n    // colorScope - scope of color tables in GIF\n    // frames - array of frames\n    // buffer - GIF-formatted data\n\n    /**\n     * Gif is a class representing an encoded GIF. It is intended to be a read-only representation of a byte-encoded GIF. Only encoders and decoders should be creating instances of this class.\n     * \n     * Property | Description\n     * --- | ---\n     * width | width of the GIF at its widest\n     * height | height of the GIF at its highest\n     * loops | the number of times the GIF should loop before stopping; 0 => loop indefinately\n     * usesTransparency | boolean indicating whether at least one frame contains at least one transparent pixel\n     * colorScope | the scope of the color tables as encoded within the GIF; either Gif.GlobalColorsOnly (== 1) or Gif.LocalColorsOnly (== 2).\n     * frames | a array of GifFrame instances, one for each frame of the GIF\n     * buffer | a Buffer holding the encoding's byte data\n     * \n     * Its constructor should only ever be called by the GIF encoder or decoder.\n     *\n     * @param {Buffer} buffer A Buffer containing the encoded bytes\n     * @param {GifFrame[]} frames Array of frames found in the encoding\n     * @param {object} spec Properties of the encoding as listed above\n     */\n\n    constructor(buffer, frames, spec) {\n        this.width = spec.width;\n        this.height = spec.height;\n        this.loops = spec.loops;\n        this.usesTransparency = spec.usesTransparency;\n        this.colorScope = spec.colorScope;\n        this.frames = frames;\n        this.buffer = buffer;\n    }\n}\n\nGif.GlobalColorsPreferred = 0;\nGif.GlobalColorsOnly = 1;\nGif.LocalColorsOnly = 2;\n\n/** @class GifError */\n\nclass GifError extends Error {\n\n    /**\n     * GifError is a class representing a GIF-related error\n     * \n     * @param {string|Error} messageOrError\n     */\n\n    constructor(messageOrError) {\n        super(messageOrError);\n        if (messageOrError instanceof Error) {\n            this.stack = 'Gif' + messageOrError.stack;\n        }\n    }\n}\n\nexports.Gif = Gif;\nexports.GifError = GifError;\n"],"mappings":"AAAA,YAAY;;AAEZ;AAEA,MAAMA,GAAG,CAAC;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEIC,WAAW,CAACC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAE;IAC9B,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACvB,IAAI,CAACC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACzB,IAAI,CAACC,KAAK,GAAGH,IAAI,CAACG,KAAK;IACvB,IAAI,CAACC,gBAAgB,GAAGJ,IAAI,CAACI,gBAAgB;IAC7C,IAAI,CAACC,UAAU,GAAGL,IAAI,CAACK,UAAU;IACjC,IAAI,CAACN,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACD,MAAM,GAAGA,MAAM;EACxB;AACJ;AAEAF,GAAG,CAACU,qBAAqB,GAAG,CAAC;AAC7BV,GAAG,CAACW,gBAAgB,GAAG,CAAC;AACxBX,GAAG,CAACY,eAAe,GAAG,CAAC;;AAEvB;;AAEA,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAEzB;AACJ;AACA;AACA;AACA;;EAEIb,WAAW,CAACc,cAAc,EAAE;IACxB,KAAK,CAACA,cAAc,CAAC;IACrB,IAAIA,cAAc,YAAYD,KAAK,EAAE;MACjC,IAAI,CAACE,KAAK,GAAG,KAAK,GAAGD,cAAc,CAACC,KAAK;IAC7C;EACJ;AACJ;AAEAC,OAAO,CAACjB,GAAG,GAAGA,GAAG;AACjBiB,OAAO,CAACJ,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script"}