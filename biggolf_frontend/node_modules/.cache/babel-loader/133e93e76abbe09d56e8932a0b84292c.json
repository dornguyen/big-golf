{"ast":null,"code":"/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar os = require('os');\nvar asyncForEach = require('async/forEach');\nvar debug = require('@dabh/diagnostics')('winston:rejection');\nvar once = require('one-time');\nvar stackTrace = require('stack-trace');\nvar ExceptionStream = require('./exception-stream');\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  function RejectionHandler(logger) {\n    _classCallCheck(this, RejectionHandler);\n    if (!logger) {\n      throw new Error('Logger is required to handle rejections');\n    }\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n  /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n\n  _createClass(RejectionHandler, [{\n    key: \"handle\",\n    value: function handle() {\n      var _this = this;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.forEach(function (arg) {\n        if (Array.isArray(arg)) {\n          return arg.forEach(function (handler) {\n            return _this._addHandler(handler);\n          });\n        }\n        _this._addHandler(arg);\n      });\n      if (!this.catcher) {\n        this.catcher = this._unhandledRejection.bind(this);\n        process.on('unhandledRejection', this.catcher);\n      }\n    }\n    /**\n     * Removes any handlers to `unhandledRejection` events for the current\n     * process. This does not modify the state of the `this.handlers` set.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"unhandle\",\n    value: function unhandle() {\n      var _this2 = this;\n      if (this.catcher) {\n        process.removeListener('unhandledRejection', this.catcher);\n        this.catcher = false;\n        Array.from(this.handlers.values()).forEach(function (wrapper) {\n          return _this2.logger.unpipe(wrapper);\n        });\n      }\n    }\n    /**\n     * TODO: add method description\n     * @param {Error} err - Error to get information about.\n     * @returns {mixed} - TODO: add return description.\n     */\n  }, {\n    key: \"getAllInfo\",\n    value: function getAllInfo(err) {\n      var message = err.message;\n      if (!message && typeof err === 'string') {\n        message = err;\n      }\n      return {\n        error: err,\n        // TODO (indexzero): how do we configure this?\n        level: 'error',\n        message: [\"unhandledRejection: \".concat(message || '(no error message)'), err.stack || '  No stack trace'].join('\\n'),\n        stack: err.stack,\n        exception: true,\n        date: new Date().toString(),\n        process: this.getProcessInfo(),\n        os: this.getOsInfo(),\n        trace: this.getTrace(err)\n      };\n    }\n    /**\n     * Gets all relevant process information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n  }, {\n    key: \"getProcessInfo\",\n    value: function getProcessInfo() {\n      return {\n        pid: process.pid,\n        uid: process.getuid ? process.getuid() : null,\n        gid: process.getgid ? process.getgid() : null,\n        cwd: process.cwd(),\n        execPath: process.execPath,\n        version: process.version,\n        argv: process.argv,\n        memoryUsage: process.memoryUsage()\n      };\n    }\n    /**\n     * Gets all relevant OS information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n  }, {\n    key: \"getOsInfo\",\n    value: function getOsInfo() {\n      return {\n        loadavg: os.loadavg(),\n        uptime: os.uptime()\n      };\n    }\n    /**\n     * Gets a stack trace for the specified error.\n     * @param {mixed} err - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n  }, {\n    key: \"getTrace\",\n    value: function getTrace(err) {\n      var trace = err ? stackTrace.parse(err) : stackTrace.get();\n      return trace.map(function (site) {\n        return {\n          column: site.getColumnNumber(),\n          file: site.getFileName(),\n          \"function\": site.getFunctionName(),\n          line: site.getLineNumber(),\n          method: site.getMethodName(),\n          \"native\": site.isNative()\n        };\n      });\n    }\n    /**\n     * Helper method to add a transport as an exception handler.\n     * @param {Transport} handler - The transport to add as an exception handler.\n     * @returns {void}\n     */\n  }, {\n    key: \"_addHandler\",\n    value: function _addHandler(handler) {\n      if (!this.handlers.has(handler)) {\n        handler.handleRejections = true;\n        var wrapper = new ExceptionStream(handler);\n        this.handlers.set(handler, wrapper);\n        this.logger.pipe(wrapper);\n      }\n    }\n    /**\n     * Logs all relevant information around the `err` and exits the current\n     * process.\n     * @param {Error} err - Error to handle\n     * @returns {mixed} - TODO: add return description.\n     * @private\n     */\n  }, {\n    key: \"_unhandledRejection\",\n    value: function _unhandledRejection(err) {\n      var info = this.getAllInfo(err);\n      var handlers = this._getRejectionHandlers(); // Calculate if we should exit on this error\n\n      var doExit = typeof this.logger.exitOnError === 'function' ? this.logger.exitOnError(err) : this.logger.exitOnError;\n      var timeout;\n      if (!handlers.length && doExit) {\n        // eslint-disable-next-line no-console\n        console.warn('winston: exitOnError cannot be true with no rejection handlers.'); // eslint-disable-next-line no-console\n\n        console.warn('winston: not exiting process.');\n        doExit = false;\n      }\n      function gracefulExit() {\n        debug('doExit', doExit);\n        debug('process._exiting', process._exiting);\n        if (doExit && !process._exiting) {\n          // Remark: Currently ignoring any rejections from transports when\n          // catching unhandled rejections.\n          if (timeout) {\n            clearTimeout(timeout);\n          } // eslint-disable-next-line no-process-exit\n\n          process.exit(1);\n        }\n      }\n      if (!handlers || handlers.length === 0) {\n        return process.nextTick(gracefulExit);\n      } // Log to all transports attempting to listen for when they are completed.\n\n      asyncForEach(handlers, function (handler, next) {\n        var done = once(next);\n        var transport = handler.transport || handler; // Debug wrapping so that we can inspect what's going on under the covers.\n\n        function onDone(event) {\n          return function () {\n            debug(event);\n            done();\n          };\n        }\n        transport._ending = true;\n        transport.once('finish', onDone('finished'));\n        transport.once('error', onDone('error'));\n      }, function () {\n        return doExit && gracefulExit();\n      });\n      this.logger.log(info); // If exitOnError is true, then only allow the logging of exceptions to\n      // take up to `3000ms`.\n\n      if (doExit) {\n        timeout = setTimeout(gracefulExit, 3000);\n      }\n    }\n    /**\n     * Returns the list of transports and exceptionHandlers for this instance.\n     * @returns {Array} - List of transports and exceptionHandlers for this\n     * instance.\n     * @private\n     */\n  }, {\n    key: \"_getRejectionHandlers\",\n    value: function _getRejectionHandlers() {\n      // Remark (indexzero): since `logger.transports` returns all of the pipes\n      // from the _readableState of the stream we actually get the join of the\n      // explicit handlers and the implicit transports with\n      // `handleRejections: true`\n      return this.logger.transports.filter(function (wrap) {\n        var transport = wrap.transport || wrap;\n        return transport.handleRejections;\n      });\n    }\n  }]);\n  return RejectionHandler;\n}();","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","os","require","asyncForEach","debug","once","stackTrace","ExceptionStream","module","exports","RejectionHandler","logger","Error","handlers","Map","value","handle","_this","_len","arguments","args","Array","_key","forEach","arg","isArray","handler","_addHandler","catcher","_unhandledRejection","bind","process","on","unhandle","_this2","removeListener","from","values","wrapper","unpipe","getAllInfo","err","message","error","level","concat","stack","join","exception","date","Date","toString","getProcessInfo","getOsInfo","trace","getTrace","pid","uid","getuid","gid","getgid","cwd","execPath","version","argv","memoryUsage","loadavg","uptime","parse","get","map","site","column","getColumnNumber","file","getFileName","getFunctionName","line","getLineNumber","method","getMethodName","isNative","has","handleRejections","set","pipe","info","_getRejectionHandlers","doExit","exitOnError","timeout","console","warn","gracefulExit","_exiting","clearTimeout","exit","nextTick","next","done","transport","onDone","event","_ending","log","setTimeout","transports","filter","wrap"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/winston/dist/winston/rejection-handler.js"],"sourcesContent":["/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar os = require('os');\n\nvar asyncForEach = require('async/forEach');\n\nvar debug = require('@dabh/diagnostics')('winston:rejection');\n\nvar once = require('one-time');\n\nvar stackTrace = require('stack-trace');\n\nvar ExceptionStream = require('./exception-stream');\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  function RejectionHandler(logger) {\n    _classCallCheck(this, RejectionHandler);\n\n    if (!logger) {\n      throw new Error('Logger is required to handle rejections');\n    }\n\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n  /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n\n\n  _createClass(RejectionHandler, [{\n    key: \"handle\",\n    value: function handle() {\n      var _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.forEach(function (arg) {\n        if (Array.isArray(arg)) {\n          return arg.forEach(function (handler) {\n            return _this._addHandler(handler);\n          });\n        }\n\n        _this._addHandler(arg);\n      });\n\n      if (!this.catcher) {\n        this.catcher = this._unhandledRejection.bind(this);\n        process.on('unhandledRejection', this.catcher);\n      }\n    }\n    /**\n     * Removes any handlers to `unhandledRejection` events for the current\n     * process. This does not modify the state of the `this.handlers` set.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"unhandle\",\n    value: function unhandle() {\n      var _this2 = this;\n\n      if (this.catcher) {\n        process.removeListener('unhandledRejection', this.catcher);\n        this.catcher = false;\n        Array.from(this.handlers.values()).forEach(function (wrapper) {\n          return _this2.logger.unpipe(wrapper);\n        });\n      }\n    }\n    /**\n     * TODO: add method description\n     * @param {Error} err - Error to get information about.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getAllInfo\",\n    value: function getAllInfo(err) {\n      var message = err.message;\n\n      if (!message && typeof err === 'string') {\n        message = err;\n      }\n\n      return {\n        error: err,\n        // TODO (indexzero): how do we configure this?\n        level: 'error',\n        message: [\"unhandledRejection: \".concat(message || '(no error message)'), err.stack || '  No stack trace'].join('\\n'),\n        stack: err.stack,\n        exception: true,\n        date: new Date().toString(),\n        process: this.getProcessInfo(),\n        os: this.getOsInfo(),\n        trace: this.getTrace(err)\n      };\n    }\n    /**\n     * Gets all relevant process information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getProcessInfo\",\n    value: function getProcessInfo() {\n      return {\n        pid: process.pid,\n        uid: process.getuid ? process.getuid() : null,\n        gid: process.getgid ? process.getgid() : null,\n        cwd: process.cwd(),\n        execPath: process.execPath,\n        version: process.version,\n        argv: process.argv,\n        memoryUsage: process.memoryUsage()\n      };\n    }\n    /**\n     * Gets all relevant OS information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getOsInfo\",\n    value: function getOsInfo() {\n      return {\n        loadavg: os.loadavg(),\n        uptime: os.uptime()\n      };\n    }\n    /**\n     * Gets a stack trace for the specified error.\n     * @param {mixed} err - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getTrace\",\n    value: function getTrace(err) {\n      var trace = err ? stackTrace.parse(err) : stackTrace.get();\n      return trace.map(function (site) {\n        return {\n          column: site.getColumnNumber(),\n          file: site.getFileName(),\n          \"function\": site.getFunctionName(),\n          line: site.getLineNumber(),\n          method: site.getMethodName(),\n          \"native\": site.isNative()\n        };\n      });\n    }\n    /**\n     * Helper method to add a transport as an exception handler.\n     * @param {Transport} handler - The transport to add as an exception handler.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_addHandler\",\n    value: function _addHandler(handler) {\n      if (!this.handlers.has(handler)) {\n        handler.handleRejections = true;\n        var wrapper = new ExceptionStream(handler);\n        this.handlers.set(handler, wrapper);\n        this.logger.pipe(wrapper);\n      }\n    }\n    /**\n     * Logs all relevant information around the `err` and exits the current\n     * process.\n     * @param {Error} err - Error to handle\n     * @returns {mixed} - TODO: add return description.\n     * @private\n     */\n\n  }, {\n    key: \"_unhandledRejection\",\n    value: function _unhandledRejection(err) {\n      var info = this.getAllInfo(err);\n\n      var handlers = this._getRejectionHandlers(); // Calculate if we should exit on this error\n\n\n      var doExit = typeof this.logger.exitOnError === 'function' ? this.logger.exitOnError(err) : this.logger.exitOnError;\n      var timeout;\n\n      if (!handlers.length && doExit) {\n        // eslint-disable-next-line no-console\n        console.warn('winston: exitOnError cannot be true with no rejection handlers.'); // eslint-disable-next-line no-console\n\n        console.warn('winston: not exiting process.');\n        doExit = false;\n      }\n\n      function gracefulExit() {\n        debug('doExit', doExit);\n        debug('process._exiting', process._exiting);\n\n        if (doExit && !process._exiting) {\n          // Remark: Currently ignoring any rejections from transports when\n          // catching unhandled rejections.\n          if (timeout) {\n            clearTimeout(timeout);\n          } // eslint-disable-next-line no-process-exit\n\n\n          process.exit(1);\n        }\n      }\n\n      if (!handlers || handlers.length === 0) {\n        return process.nextTick(gracefulExit);\n      } // Log to all transports attempting to listen for when they are completed.\n\n\n      asyncForEach(handlers, function (handler, next) {\n        var done = once(next);\n        var transport = handler.transport || handler; // Debug wrapping so that we can inspect what's going on under the covers.\n\n        function onDone(event) {\n          return function () {\n            debug(event);\n            done();\n          };\n        }\n\n        transport._ending = true;\n        transport.once('finish', onDone('finished'));\n        transport.once('error', onDone('error'));\n      }, function () {\n        return doExit && gracefulExit();\n      });\n      this.logger.log(info); // If exitOnError is true, then only allow the logging of exceptions to\n      // take up to `3000ms`.\n\n      if (doExit) {\n        timeout = setTimeout(gracefulExit, 3000);\n      }\n    }\n    /**\n     * Returns the list of transports and exceptionHandlers for this instance.\n     * @returns {Array} - List of transports and exceptionHandlers for this\n     * instance.\n     * @private\n     */\n\n  }, {\n    key: \"_getRejectionHandlers\",\n    value: function _getRejectionHandlers() {\n      // Remark (indexzero): since `logger.transports` returns all of the pipes\n      // from the _readableState of the stream we actually get the join of the\n      // explicit handlers and the implicit transports with\n      // `handleRejections: true`\n      return this.logger.transports.filter(function (wrap) {\n        var transport = wrap.transport || wrap;\n        return transport.handleRejections;\n      });\n    }\n  }]);\n\n  return RejectionHandler;\n}();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,SAASA,eAAe,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,SAASC,iBAAiB,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAC,CAAC;IAAEE,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;IAAED,UAAU,CAACE,YAAY,GAAG,IAAI;IAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;IAAEC,MAAM,CAACC,cAAc,CAACT,MAAM,EAAEI,UAAU,CAACM,GAAG,EAAEN,UAAU,CAAC;EAAE;AAAE;AAE5T,SAASO,YAAY,CAACd,WAAW,EAAEe,UAAU,EAAEC,WAAW,EAAE;EAAE,IAAID,UAAU,EAAEb,iBAAiB,CAACF,WAAW,CAACiB,SAAS,EAAEF,UAAU,CAAC;EAAE,IAAIC,WAAW,EAAEd,iBAAiB,CAACF,WAAW,EAAEgB,WAAW,CAAC;EAAE,OAAOhB,WAAW;AAAE;AAEtN,IAAIkB,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AAEtB,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIE,KAAK,GAAGF,OAAO,CAAC,mBAAmB,CAAC,CAAC,mBAAmB,CAAC;AAE7D,IAAIG,IAAI,GAAGH,OAAO,CAAC,UAAU,CAAC;AAE9B,IAAII,UAAU,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAEvC,IAAIK,eAAe,GAAGL,OAAO,CAAC,oBAAoB,CAAC;AACnD;AACA;AACA;AACA;;AAGAM,MAAM,CAACC,OAAO,GAAG,aAAa,YAAY;EACxC;AACF;AACA;AACA;EACE,SAASC,gBAAgB,CAACC,MAAM,EAAE;IAChC9B,eAAe,CAAC,IAAI,EAAE6B,gBAAgB,CAAC;IAEvC,IAAI,CAACC,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,QAAQ,GAAG,IAAIC,GAAG,EAAE;EAC3B;EACA;AACF;AACA;AACA;AACA;;EAGEjB,YAAY,CAACa,gBAAgB,EAAE,CAAC;IAC9Bd,GAAG,EAAE,QAAQ;IACbmB,KAAK,EAAE,SAASC,MAAM,GAAG;MACvB,IAAIC,KAAK,GAAG,IAAI;MAEhB,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAAC9B,MAAM,EAAE+B,IAAI,GAAG,IAAIC,KAAK,CAACH,IAAI,CAAC,EAAEI,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGJ,IAAI,EAAEI,IAAI,EAAE,EAAE;QACvFF,IAAI,CAACE,IAAI,CAAC,GAAGH,SAAS,CAACG,IAAI,CAAC;MAC9B;MAEAF,IAAI,CAACG,OAAO,CAAC,UAAUC,GAAG,EAAE;QAC1B,IAAIH,KAAK,CAACI,OAAO,CAACD,GAAG,CAAC,EAAE;UACtB,OAAOA,GAAG,CAACD,OAAO,CAAC,UAAUG,OAAO,EAAE;YACpC,OAAOT,KAAK,CAACU,WAAW,CAACD,OAAO,CAAC;UACnC,CAAC,CAAC;QACJ;QAEAT,KAAK,CAACU,WAAW,CAACH,GAAG,CAAC;MACxB,CAAC,CAAC;MAEF,IAAI,CAAC,IAAI,CAACI,OAAO,EAAE;QACjB,IAAI,CAACA,OAAO,GAAG,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAAC;QAClDC,OAAO,CAACC,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAACJ,OAAO,CAAC;MAChD;IACF;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDhC,GAAG,EAAE,UAAU;IACfmB,KAAK,EAAE,SAASkB,QAAQ,GAAG;MACzB,IAAIC,MAAM,GAAG,IAAI;MAEjB,IAAI,IAAI,CAACN,OAAO,EAAE;QAChBG,OAAO,CAACI,cAAc,CAAC,oBAAoB,EAAE,IAAI,CAACP,OAAO,CAAC;QAC1D,IAAI,CAACA,OAAO,GAAG,KAAK;QACpBP,KAAK,CAACe,IAAI,CAAC,IAAI,CAACvB,QAAQ,CAACwB,MAAM,EAAE,CAAC,CAACd,OAAO,CAAC,UAAUe,OAAO,EAAE;UAC5D,OAAOJ,MAAM,CAACvB,MAAM,CAAC4B,MAAM,CAACD,OAAO,CAAC;QACtC,CAAC,CAAC;MACJ;IACF;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1C,GAAG,EAAE,YAAY;IACjBmB,KAAK,EAAE,SAASyB,UAAU,CAACC,GAAG,EAAE;MAC9B,IAAIC,OAAO,GAAGD,GAAG,CAACC,OAAO;MAEzB,IAAI,CAACA,OAAO,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;QACvCC,OAAO,GAAGD,GAAG;MACf;MAEA,OAAO;QACLE,KAAK,EAAEF,GAAG;QACV;QACAG,KAAK,EAAE,OAAO;QACdF,OAAO,EAAE,CAAC,sBAAsB,CAACG,MAAM,CAACH,OAAO,IAAI,oBAAoB,CAAC,EAAED,GAAG,CAACK,KAAK,IAAI,kBAAkB,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QACrHD,KAAK,EAAEL,GAAG,CAACK,KAAK;QAChBE,SAAS,EAAE,IAAI;QACfC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,QAAQ,EAAE;QAC3BpB,OAAO,EAAE,IAAI,CAACqB,cAAc,EAAE;QAC9BnD,EAAE,EAAE,IAAI,CAACoD,SAAS,EAAE;QACpBC,KAAK,EAAE,IAAI,CAACC,QAAQ,CAACd,GAAG;MAC1B,CAAC;IACH;IACA;AACJ;AACA;AACA;EAEE,CAAC,EAAE;IACD7C,GAAG,EAAE,gBAAgB;IACrBmB,KAAK,EAAE,SAASqC,cAAc,GAAG;MAC/B,OAAO;QACLI,GAAG,EAAEzB,OAAO,CAACyB,GAAG;QAChBC,GAAG,EAAE1B,OAAO,CAAC2B,MAAM,GAAG3B,OAAO,CAAC2B,MAAM,EAAE,GAAG,IAAI;QAC7CC,GAAG,EAAE5B,OAAO,CAAC6B,MAAM,GAAG7B,OAAO,CAAC6B,MAAM,EAAE,GAAG,IAAI;QAC7CC,GAAG,EAAE9B,OAAO,CAAC8B,GAAG,EAAE;QAClBC,QAAQ,EAAE/B,OAAO,CAAC+B,QAAQ;QAC1BC,OAAO,EAAEhC,OAAO,CAACgC,OAAO;QACxBC,IAAI,EAAEjC,OAAO,CAACiC,IAAI;QAClBC,WAAW,EAAElC,OAAO,CAACkC,WAAW;MAClC,CAAC;IACH;IACA;AACJ;AACA;AACA;EAEE,CAAC,EAAE;IACDrE,GAAG,EAAE,WAAW;IAChBmB,KAAK,EAAE,SAASsC,SAAS,GAAG;MAC1B,OAAO;QACLa,OAAO,EAAEjE,EAAE,CAACiE,OAAO,EAAE;QACrBC,MAAM,EAAElE,EAAE,CAACkE,MAAM;MACnB,CAAC;IACH;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDvE,GAAG,EAAE,UAAU;IACfmB,KAAK,EAAE,SAASwC,QAAQ,CAACd,GAAG,EAAE;MAC5B,IAAIa,KAAK,GAAGb,GAAG,GAAGnC,UAAU,CAAC8D,KAAK,CAAC3B,GAAG,CAAC,GAAGnC,UAAU,CAAC+D,GAAG,EAAE;MAC1D,OAAOf,KAAK,CAACgB,GAAG,CAAC,UAAUC,IAAI,EAAE;QAC/B,OAAO;UACLC,MAAM,EAAED,IAAI,CAACE,eAAe,EAAE;UAC9BC,IAAI,EAAEH,IAAI,CAACI,WAAW,EAAE;UACxB,UAAU,EAAEJ,IAAI,CAACK,eAAe,EAAE;UAClCC,IAAI,EAAEN,IAAI,CAACO,aAAa,EAAE;UAC1BC,MAAM,EAAER,IAAI,CAACS,aAAa,EAAE;UAC5B,QAAQ,EAAET,IAAI,CAACU,QAAQ;QACzB,CAAC;MACH,CAAC,CAAC;IACJ;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDrF,GAAG,EAAE,aAAa;IAClBmB,KAAK,EAAE,SAASY,WAAW,CAACD,OAAO,EAAE;MACnC,IAAI,CAAC,IAAI,CAACb,QAAQ,CAACqE,GAAG,CAACxD,OAAO,CAAC,EAAE;QAC/BA,OAAO,CAACyD,gBAAgB,GAAG,IAAI;QAC/B,IAAI7C,OAAO,GAAG,IAAI/B,eAAe,CAACmB,OAAO,CAAC;QAC1C,IAAI,CAACb,QAAQ,CAACuE,GAAG,CAAC1D,OAAO,EAAEY,OAAO,CAAC;QACnC,IAAI,CAAC3B,MAAM,CAAC0E,IAAI,CAAC/C,OAAO,CAAC;MAC3B;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACD1C,GAAG,EAAE,qBAAqB;IAC1BmB,KAAK,EAAE,SAASc,mBAAmB,CAACY,GAAG,EAAE;MACvC,IAAI6C,IAAI,GAAG,IAAI,CAAC9C,UAAU,CAACC,GAAG,CAAC;MAE/B,IAAI5B,QAAQ,GAAG,IAAI,CAAC0E,qBAAqB,EAAE,CAAC,CAAC;;MAG7C,IAAIC,MAAM,GAAG,OAAO,IAAI,CAAC7E,MAAM,CAAC8E,WAAW,KAAK,UAAU,GAAG,IAAI,CAAC9E,MAAM,CAAC8E,WAAW,CAAChD,GAAG,CAAC,GAAG,IAAI,CAAC9B,MAAM,CAAC8E,WAAW;MACnH,IAAIC,OAAO;MAEX,IAAI,CAAC7E,QAAQ,CAACxB,MAAM,IAAImG,MAAM,EAAE;QAC9B;QACAG,OAAO,CAACC,IAAI,CAAC,iEAAiE,CAAC,CAAC,CAAC;;QAEjFD,OAAO,CAACC,IAAI,CAAC,+BAA+B,CAAC;QAC7CJ,MAAM,GAAG,KAAK;MAChB;MAEA,SAASK,YAAY,GAAG;QACtBzF,KAAK,CAAC,QAAQ,EAAEoF,MAAM,CAAC;QACvBpF,KAAK,CAAC,kBAAkB,EAAE2B,OAAO,CAAC+D,QAAQ,CAAC;QAE3C,IAAIN,MAAM,IAAI,CAACzD,OAAO,CAAC+D,QAAQ,EAAE;UAC/B;UACA;UACA,IAAIJ,OAAO,EAAE;YACXK,YAAY,CAACL,OAAO,CAAC;UACvB,CAAC,CAAC;;UAGF3D,OAAO,CAACiE,IAAI,CAAC,CAAC,CAAC;QACjB;MACF;MAEA,IAAI,CAACnF,QAAQ,IAAIA,QAAQ,CAACxB,MAAM,KAAK,CAAC,EAAE;QACtC,OAAO0C,OAAO,CAACkE,QAAQ,CAACJ,YAAY,CAAC;MACvC,CAAC,CAAC;;MAGF1F,YAAY,CAACU,QAAQ,EAAE,UAAUa,OAAO,EAAEwE,IAAI,EAAE;QAC9C,IAAIC,IAAI,GAAG9F,IAAI,CAAC6F,IAAI,CAAC;QACrB,IAAIE,SAAS,GAAG1E,OAAO,CAAC0E,SAAS,IAAI1E,OAAO,CAAC,CAAC;;QAE9C,SAAS2E,MAAM,CAACC,KAAK,EAAE;UACrB,OAAO,YAAY;YACjBlG,KAAK,CAACkG,KAAK,CAAC;YACZH,IAAI,EAAE;UACR,CAAC;QACH;QAEAC,SAAS,CAACG,OAAO,GAAG,IAAI;QACxBH,SAAS,CAAC/F,IAAI,CAAC,QAAQ,EAAEgG,MAAM,CAAC,UAAU,CAAC,CAAC;QAC5CD,SAAS,CAAC/F,IAAI,CAAC,OAAO,EAAEgG,MAAM,CAAC,OAAO,CAAC,CAAC;MAC1C,CAAC,EAAE,YAAY;QACb,OAAOb,MAAM,IAAIK,YAAY,EAAE;MACjC,CAAC,CAAC;MACF,IAAI,CAAClF,MAAM,CAAC6F,GAAG,CAAClB,IAAI,CAAC,CAAC,CAAC;MACvB;;MAEA,IAAIE,MAAM,EAAE;QACVE,OAAO,GAAGe,UAAU,CAACZ,YAAY,EAAE,IAAI,CAAC;MAC1C;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDjG,GAAG,EAAE,uBAAuB;IAC5BmB,KAAK,EAAE,SAASwE,qBAAqB,GAAG;MACtC;MACA;MACA;MACA;MACA,OAAO,IAAI,CAAC5E,MAAM,CAAC+F,UAAU,CAACC,MAAM,CAAC,UAAUC,IAAI,EAAE;QACnD,IAAIR,SAAS,GAAGQ,IAAI,CAACR,SAAS,IAAIQ,IAAI;QACtC,OAAOR,SAAS,CAACjB,gBAAgB;MACnC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,CAAC;EAEH,OAAOzE,gBAAgB;AACzB,CAAC,EAAE"},"metadata":{},"sourceType":"script"}