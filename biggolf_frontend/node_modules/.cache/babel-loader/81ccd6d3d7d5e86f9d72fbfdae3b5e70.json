{"ast":null,"code":"/**\n * tail-file.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nvar fs = require('fs');\nvar _require = require('string_decoder'),\n  StringDecoder = _require.StringDecoder;\nvar _require2 = require('readable-stream'),\n  Stream = _require2.Stream;\n/**\n * Simple no-op function.\n * @returns {undefined}\n */\n\nfunction noop() {}\n/**\n * TODO: add function description.\n * @param {Object} options - Options for tail.\n * @param {function} iter - Iterator function to execute on every line.\n* `tail -f` a file. Options must include file.\n * @returns {mixed} - TODO: add return description.\n */\n\nmodule.exports = function (options, iter) {\n  var buffer = Buffer.alloc(64 * 1024);\n  var decode = new StringDecoder('utf8');\n  var stream = new Stream();\n  var buff = '';\n  var pos = 0;\n  var row = 0;\n  if (options.start === -1) {\n    delete options.start;\n  }\n  stream.readable = true;\n  stream.destroy = function () {\n    stream.destroyed = true;\n    stream.emit('end');\n    stream.emit('close');\n  };\n  fs.open(options.file, 'a+', '0644', function (err, fd) {\n    if (err) {\n      if (!iter) {\n        stream.emit('error', err);\n      } else {\n        iter(err);\n      }\n      stream.destroy();\n      return;\n    }\n    (function read() {\n      if (stream.destroyed) {\n        fs.close(fd, noop);\n        return;\n      }\n      return fs.read(fd, buffer, 0, buffer.length, pos, function (error, bytes) {\n        if (error) {\n          if (!iter) {\n            stream.emit('error', error);\n          } else {\n            iter(error);\n          }\n          stream.destroy();\n          return;\n        }\n        if (!bytes) {\n          if (buff) {\n            // eslint-disable-next-line eqeqeq\n            if (options.start == null || row > options.start) {\n              if (!iter) {\n                stream.emit('line', buff);\n              } else {\n                iter(null, buff);\n              }\n            }\n            row++;\n            buff = '';\n          }\n          return setTimeout(read, 1000);\n        }\n        var data = decode.write(buffer.slice(0, bytes));\n        if (!iter) {\n          stream.emit('data', data);\n        }\n        data = (buff + data).split(/\\n+/);\n        var l = data.length - 1;\n        var i = 0;\n        for (; i < l; i++) {\n          // eslint-disable-next-line eqeqeq\n          if (options.start == null || row > options.start) {\n            if (!iter) {\n              stream.emit('line', data[i]);\n            } else {\n              iter(null, data[i]);\n            }\n          }\n          row++;\n        }\n        buff = data[l];\n        pos += bytes;\n        return read();\n      });\n    })();\n  });\n  if (!iter) {\n    return stream;\n  }\n  return stream.destroy;\n};","map":{"version":3,"names":["fs","require","_require","StringDecoder","_require2","Stream","noop","module","exports","options","iter","buffer","Buffer","alloc","decode","stream","buff","pos","row","start","readable","destroy","destroyed","emit","open","file","err","fd","read","close","length","error","bytes","setTimeout","data","write","slice","split","l","i"],"sources":["C:/Users/Daniel/node_modules/appium/node_modules/winston/dist/winston/tail-file.js"],"sourcesContent":["/**\n * tail-file.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nvar fs = require('fs');\n\nvar _require = require('string_decoder'),\n    StringDecoder = _require.StringDecoder;\n\nvar _require2 = require('readable-stream'),\n    Stream = _require2.Stream;\n/**\n * Simple no-op function.\n * @returns {undefined}\n */\n\n\nfunction noop() {}\n/**\n * TODO: add function description.\n * @param {Object} options - Options for tail.\n * @param {function} iter - Iterator function to execute on every line.\n* `tail -f` a file. Options must include file.\n * @returns {mixed} - TODO: add return description.\n */\n\n\nmodule.exports = function (options, iter) {\n  var buffer = Buffer.alloc(64 * 1024);\n  var decode = new StringDecoder('utf8');\n  var stream = new Stream();\n  var buff = '';\n  var pos = 0;\n  var row = 0;\n\n  if (options.start === -1) {\n    delete options.start;\n  }\n\n  stream.readable = true;\n\n  stream.destroy = function () {\n    stream.destroyed = true;\n    stream.emit('end');\n    stream.emit('close');\n  };\n\n  fs.open(options.file, 'a+', '0644', function (err, fd) {\n    if (err) {\n      if (!iter) {\n        stream.emit('error', err);\n      } else {\n        iter(err);\n      }\n\n      stream.destroy();\n      return;\n    }\n\n    (function read() {\n      if (stream.destroyed) {\n        fs.close(fd, noop);\n        return;\n      }\n\n      return fs.read(fd, buffer, 0, buffer.length, pos, function (error, bytes) {\n        if (error) {\n          if (!iter) {\n            stream.emit('error', error);\n          } else {\n            iter(error);\n          }\n\n          stream.destroy();\n          return;\n        }\n\n        if (!bytes) {\n          if (buff) {\n            // eslint-disable-next-line eqeqeq\n            if (options.start == null || row > options.start) {\n              if (!iter) {\n                stream.emit('line', buff);\n              } else {\n                iter(null, buff);\n              }\n            }\n\n            row++;\n            buff = '';\n          }\n\n          return setTimeout(read, 1000);\n        }\n\n        var data = decode.write(buffer.slice(0, bytes));\n\n        if (!iter) {\n          stream.emit('data', data);\n        }\n\n        data = (buff + data).split(/\\n+/);\n        var l = data.length - 1;\n        var i = 0;\n\n        for (; i < l; i++) {\n          // eslint-disable-next-line eqeqeq\n          if (options.start == null || row > options.start) {\n            if (!iter) {\n              stream.emit('line', data[i]);\n            } else {\n              iter(null, data[i]);\n            }\n          }\n\n          row++;\n        }\n\n        buff = data[l];\n        pos += bytes;\n        return read();\n      });\n    })();\n  });\n\n  if (!iter) {\n    return stream;\n  }\n\n  return stream.destroy;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}